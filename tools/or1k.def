// OpenRISC 1000 instruction set definitions
// Copyright (C) Florian Negele

// This file is part of the Eigen Compiler Suite.

// The ECS is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The ECS is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with the ECS.  If not, see <https://www.gnu.org/licenses/>.

#ifndef CLASS
	#define CLASS(class)
#endif

#ifndef INSTR
	#define INSTR(mnem, code, mask, type1, type2, type3, class)
#endif

#ifndef MNEM
	#define MNEM(name, mnem, ...)
#endif

#ifndef TYPE
	#define TYPE(type)
#endif

// mnemonics

MNEM (l.add,        LADD,       Add)
MNEM (l.addc,       LADDC,      Add and Carry)
MNEM (l.addi,       LADDI,      Add Immediate)
MNEM (l.addic,      LADDIC,     Add Immediate and Carry)
MNEM (l.and,        LAND,       And)
MNEM (l.andi,       LANDI,      And with Immediate Half Word)
MNEM (l.bf,         LBF,        Branch if Flag)
MNEM (l.bnf,        LBNF,       Branch if No Flag)
MNEM (l.cmov,       LCMOV,      Conditional Move)
MNEM (l.csync,      LCSYNC,     Context Synchronization)
MNEM (l.div,        LDIV,       Divide Signed)
MNEM (l.divu,       LDIVU,      Divide Unsigned)
MNEM (l.extbs,      LEXTBS,     Extend Byte with Sign)
MNEM (l.extbz,      LEXTBZ,     Extend Byte with Zero)
MNEM (l.exths,      LEXTHS,     Extend Half Word with Sign)
MNEM (l.exthz,      LEXTHZ,     Extend Half Word with Zero)
MNEM (l.extws,      LEXTWS,     Extend Word with Sign)
MNEM (l.extwz,      LEXTWZ,     Extend Word with Zero)
MNEM (l.ff1,        LFF1,       Find First 1)
MNEM (l.fl1,        LFL1,       Find Last 1)
MNEM (l.j,          LJ,         Jump)
MNEM (l.jal,        LJAL,       Jump and Link)
MNEM (l.jalr,       LJALR,      Jump and Link Register)
MNEM (l.jr,         LJR,        Jump Register)
MNEM (l.lbs,        LLBS,       Load Byte and Extend with Sign)
MNEM (l.lbz,        LLBZ,       Load Byte and Extend with Zero)
MNEM (l.ld,         LLD,        Load Double Word)
MNEM (l.lhs,        LLHS,       Load Half Word and Extend with Sign)
MNEM (l.lhz,        LLHZ,       Load Half Word and Extend with Zero)
MNEM (l.lwa,        LLWA,       Load Single Word Atomic)
MNEM (l.lws,        LLWS,       Load Single Word and Extend with Sign)
MNEM (l.lwz,        LLWZ,       Load Single Word and Extend with Zero)
MNEM (l.mac,        LMAC,       Multiply and Accumulate Signed)
MNEM (l.maci,       LMACI,      Multiply Immediate and Accumulate Signed)
MNEM (l.macrc,      LMACRC,     MAC Read and Clear)
MNEM (l.macu,       LMACU,      Multiply and Accumulate Unsigned)
MNEM (l.mfspr,      LMFSPR,     Move From Special-Purpose Register)
MNEM (l.movhi,      LMOVHI,     Move Immediate High)
MNEM (l.msb,        LMSB,       Multiply and Subtract Signed)
MNEM (l.msbu,       LMSBU,      Multiply and Subtract Unsigned)
MNEM (l.msync,      LMSYNC,     Memory Synchronization)
MNEM (l.mtspr,      LMTSPR,     Move To Special-Purpose Register)
MNEM (l.mul,        LMUL,       Multiply Signed)
MNEM (l.muld,       LMULD,      Multiply Signed to Double)
MNEM (l.muldu,      LMULDU,     Multiply Unsigned to Double)
MNEM (l.muli,       LMULI,      Multiply Immediate Signed)
MNEM (l.mulu,       LMULU,      Multiply Unsigned)
MNEM (l.nop,        LNOP,       No Operation)
MNEM (l.or,         LOR,        Or)
MNEM (l.ori,        LORI,       Or with Immediate Half Word)
MNEM (l.psync,      LPSYNC,     Pipeline Synchronization)
MNEM (l.rfe,        LRFE,       Return From Exception)
MNEM (l.ror,        LROR,       Rotate Right)
MNEM (l.rori,       LRORI,      Rotate Right with Immediate)
MNEM (l.sb,         LSB,        Store Byte)
MNEM (l.sd,         LSD,        Store Double Word)
MNEM (l.sfeq,       LSFEQ,      Set Flag if Equal)
MNEM (l.sfeqi,      LSFEQI,     Set Flag if Equal Immediate)
MNEM (l.sfges,      LSFGES,     Set Flag if Greater or Equal Than Signed)
MNEM (l.sfgesi,     LSFGESI,    Set Flag if Greater or Equal Than Signed Immediate)
MNEM (l.sfgeu,      LSFGEU,     Set Flag if Greater or Equal Than Unsigned)
MNEM (l.sfgeui,     LSFGEUI,    Set Flag if Greater or Equal Than Unsigned Immediate)
MNEM (l.sfgts,      LSFGTS,     Set Flag if Greater Than Signed)
MNEM (l.sfgtsi,     LSFGTSI,    Set Flag if Greater Than Signed Immediate)
MNEM (l.sfgtu,      LSFGTU,     Set Flag if Greater Than Unsigned)
MNEM (l.sfgtui,     LSFGTUI,    Set Flag if Greater Than Unsigned Immediate)
MNEM (l.sfles,      LSFLES,     Set Flag if Less or Equal Than Signed)
MNEM (l.sflesi,     LSFLESI,    Set Flag if Less or Equal Than Signed Immediate)
MNEM (l.sfleu,      LSFLEU,     Set Flag if Less or Equal Than Unsigned)
MNEM (l.sfleui,     LSFLEUI,    Set Flag if Less or Equal Than Unsigned Immediate)
MNEM (l.sflts,      LSFLTS,     Set Flag if Less Than Signed)
MNEM (l.sfltsi,     LSFLTSI,    Set Flag if Less Than Signed Immediate)
MNEM (l.sfltu,      LSFLTU,     Set Flag if Less Than Unsigned)
MNEM (l.sfltui,     LSFLTUI,    Set Flag if Less Than Unsigned Immediate)
MNEM (l.sfne,       LSFNE,      Set Flag if Not Equal)
MNEM (l.sfnei,      LSFNEI,     Set Flag if Not Equal Immediate)
MNEM (l.sh,         LSH,        Store Half Word)
MNEM (l.sll,        LSLL,       Shift Left Logical)
MNEM (l.slli,       LSLLI,      Shift Left Logical Immediate)
MNEM (l.sra,        LSRA,       Shift Right Arithmetic)
MNEM (l.srai,       LSRAI,      Shift Right Arithmetic Immediate)
MNEM (l.srl,        LSRL,       Shift Right Logical)
MNEM (l.srli,       LSRLI,      Shift Right Logical Immediate)
MNEM (l.sub,        LSUB,       Subtract)
MNEM (l.sw,         LSW,        Store Single Word)
MNEM (l.swa,        LSWA,       Store Single Word Atomic)
MNEM (l.sys,        LSYS,       System Call)
MNEM (l.trap,       LTRAP,      Trap)
MNEM (l.xor,        LXOR,       Exclusive Or)
MNEM (l.xori,       LXORI,      Exclusive Or with Immediate Half Word)
MNEM (lf.add.d,     LFADDD,     Add Floating-Point Double-Precision)
MNEM (lf.add.s,     LFADDS,     Add Floating-Point Single-Precision)
MNEM (lf.div.d,     LFDIVD,     Divide Floating-Point Double-Precision)
MNEM (lf.div.s,     LFDIVS,     Divide Floating-Point Single-Precision)
MNEM (lf.ftoi.d,    LFFTOID,    Floating-Point Double-Precision To Integer)
MNEM (lf.ftoi.s,    LFFTOIS,    Floating-Point Single-Precision To Integer)
MNEM (lf.itof.d,    LFITOFD,    Integer To Floating-Point Double-Precision)
MNEM (lf.itof.s,    LFITOFS,    Integer To Floating-Point Single-Precision)
MNEM (lf.madd.d,    LFMADDD,    Multiply and Add Floating-Point Double-Precision)
MNEM (lf.madd.s,    LFMADDS,    Multiply and Add Floating-Point Single-Precision)
MNEM (lf.mul.d,     LFMULD,     Multiply Floating-Point Double-Precision)
MNEM (lf.mul.s,     LFMULS,     Multiply Floating-Point Single-Precision)
MNEM (lf.rem.d,     LFREMD,     Remainder Floating-Point Double-Precision)
MNEM (lf.rem.s,     LFREMS,     Remainder Floating-Point Single-Precision)
MNEM (lf.sfeq.d,    LFSFEQD,    Set Flag if Equal Floating-Point Double-Precision)
MNEM (lf.sfeq.s,    LFSFEQS,    Set Flag if Equal Floating-Point Single-Precision)
MNEM (lf.sfge.d,    LFSFGED,    Set Flag if Greater or Equal Than Floating-Point Double-Precision)
MNEM (lf.sfge.s,    LFSFGES,    Set Flag if Greater or Equal Than Floating-Point Single-Precision)
MNEM (lf.sfgt.d,    LFSFGTD,    Set Flag if Greater Than Floating-Point Double-Precision)
MNEM (lf.sfgt.s,    LFSFGTS,    Set Flag if Greater Than Floating-Point Single-Precision)
MNEM (lf.sfle.d,    LFSFLED,    Set Flag if Less or Equal Than Floating-Point Double-Precision)
MNEM (lf.sfle.s,    LFSFLES,    Set Flag if Less or Equal Than Floating-Point Single-Precision)
MNEM (lf.sflt.d,    LFSFLTD,    Set Flag if Less Than Floating-Point Double-Precision)
MNEM (lf.sflt.s,    LFSFLTS,    Set Flag if Less Than Floating-Point Single-Precision)
MNEM (lf.sfne.d,    LFSFNED,    Set Flag if Not Equal Floating-Point Double-Precision)
MNEM (lf.sfne.s,    LFSFNES,    Set Flag if Not Equal Floating-Point Single-Precision)
MNEM (lf.sub.d,     LFSUBD,     Subtract Floating-Point Double-Precision)
MNEM (lf.sub.s,     LFSUBS,     Subtract Floating-Point Single-Precision)
MNEM (lv.add.b,     LVADDB,     Vector Byte Elements Add Signed)
MNEM (lv.add.h,     LVADDH,     Vector Half-Word Elements Add Signed)
MNEM (lv.adds.b,    LVADDSB,    Vector Byte Elements Add Signed Saturated)
MNEM (lv.adds.h,    LVADDSH,    Vector Half-Word Elements Add Signed Saturated)
MNEM (lv.addu.b,    LVADDUB,    Vector Byte Elements Add Unsigned)
MNEM (lv.addu.h,    LVADDUH,    Vector Half-Word Elements Add Unsigned)
MNEM (lv.addus.b,   LVADDUSB,   Vector Byte Elements Add Unsigned Saturated)
MNEM (lv.addus.h,   LVADDUSH,   Vector Half-Word Elements Add Unsigned Saturated)
MNEM (lv.all_eq.b,  LVALLEQB,   Vector Byte Elements All Equal)
MNEM (lv.all_eq.h,  LVALLEQH,   Vector Half-Word Elements All Equal)
MNEM (lv.all_ge.b,  LVALLGEB,   Vector Byte Elements All Greater Than or Equal To)
MNEM (lv.all_ge.h,  LVALLGEH,   Vector Half-Word Elements All Greater Than or Equal To)
MNEM (lv.all_gt.b,  LVALLGTB,   Vector Byte Elements All Greater Than)
MNEM (lv.all_gt.h,  LVALLGTH,   Vector Half-Word Elements All Greater Than)
MNEM (lv.all_le.b,  LVALLLEB,   Vector Byte Elements All Less Than or Equal To)
MNEM (lv.all_le.h,  LVALLLEH,   Vector Half-Word Elements All Less Than or Equal To)
MNEM (lv.all_lt.b,  LVALLLTB,   Vector Byte Elements All Less Than)
MNEM (lv.all_lt.h,  LVALLLTH,   Vector Half-Word Elements All Less Than)
MNEM (lv.all_ne.b,  LVALLNEB,   Vector Byte Elements All Not Equal)
MNEM (lv.all_ne.h,  LVALLNEH,   Vector Half-Word Elements All Not Equal)
MNEM (lv.and,       LVAND,      Vector And)
MNEM (lv.any_eq.b,  LVANYEQB,   Vector Byte Elements Any Equal)
MNEM (lv.any_eq.h,  LVANYEQH,   Vector Half-Word Elements Any Equal)
MNEM (lv.any_ge.b,  LVANYGEB,   Vector Byte Elements Any Greater Than or Equal To)
MNEM (lv.any_ge.h,  LVANYGEH,   Vector Half-Word Elements Any Greater Than or Equal To)
MNEM (lv.any_gt.b,  LVANYGTB,   Vector Byte Elements Any Greater Than)
MNEM (lv.any_gt.h,  LVANYGTH,   Vector Half-Word Elements Any Greater Than)
MNEM (lv.any_le.b,  LVANYLEB,   Vector Byte Elements Any Less Than or Equal To)
MNEM (lv.any_le.h,  LVANYLEH,   Vector Half-Word Elements Any Less Than or Equal To)
MNEM (lv.any_lt.b,  LVANYLTB,   Vector Byte Elements Any Less Than)
MNEM (lv.any_lt.h,  LVANYLTH,   Vector Half-Word Elements Any Less Than)
MNEM (lv.any_ne.b,  LVANYNEB,   Vector Byte Elements Any Not Equal)
MNEM (lv.any_ne.h,  LVANYNEH,   Vector Half-Word Elements Any Not Equal)
MNEM (lv.avg.b,     LVAVGB,     Vector Byte Elements Average)
MNEM (lv.avg.h,     LVAVGH,     Vector Half-Word Elements Average)
MNEM (lv.cmp_eq.b,  LVCMPEQB,   Vector Byte Elements Compare Equal)
MNEM (lv.cmp_eq.h,  LVCMPEQH,   Vector Half-Word Elements Compare Equal)
MNEM (lv.cmp_ge.b,  LVCMPGEB,   Vector Byte Elements Compare Greater Than or Equal To)
MNEM (lv.cmp_ge.h,  LVCMPGEH,   Vector Half-Word Elements Compare Greater Than or Equal To)
MNEM (lv.cmp_gt.b,  LVCMPGTB,   Vector Byte Elements Compare Greater Than)
MNEM (lv.cmp_gt.h,  LVCMPGTH,   Vector Half-Word Elements Compare Greater Than)
MNEM (lv.cmp_le.b,  LVCMPLEB,   Vector Byte Elements Compare Less Than or Equal To)
MNEM (lv.cmp_le.h,  LVCMPLEH,   Vector Half-Word Elements Compare Less Than or Equal To)
MNEM (lv.cmp_lt.b,  LVCMPLTB,   Vector Byte Elements Compare Less Than)
MNEM (lv.cmp_lt.h,  LVCMPLTH,   Vector Half-Word Elements Compare Less Than)
MNEM (lv.cmp_ne.b,  LVCMPNEB,   Vector Byte Elements Compare Not Equal)
MNEM (lv.cmp_ne.h,  LVCMPNEH,   Vector Half-Word Elements Compare Not Equal)
MNEM (lv.madds.h,   LVMADDSH,   Vector Half-Word Elements Multiply Add Signed Saturated)
MNEM (lv.max.b,     LVMAXB,     Vector Byte Elements Maximum)
MNEM (lv.max.h,     LVMAXH,     Vector Half-Word Elements Maximum)
MNEM (lv.merge.b,   LVMERGEB,   Vector Byte Elements Merge)
MNEM (lv.merge.h,   LVMERGEH,   Vector Half-Word Elements Merge)
MNEM (lv.min.b,     LVMINB,     Vector Byte Elements Minimum)
MNEM (lv.min.h,     LVMINH,     Vector Half-Word Elements Minimum)
MNEM (lv.msubs.h,   LVMSUBSH,   Vector Half-Word Elements Multiply Subtract Signed Saturated)
MNEM (lv.muls.h,    LVMULSH,    Vector Half-Word Elements Multiply Signed Saturated)
MNEM (lv.nand,      LVNAND,     Vector Not And)
MNEM (lv.nor,       LVNOR,      Vector Not Or)
MNEM (lv.or,        LVOR,       Vector Or)
MNEM (lv.pack.b,    LVPACKB,    Vector Byte Elements Pack)
MNEM (lv.pack.h,    LVPACKH,    Vector Half-Word Elements Pack)
MNEM (lv.packs.b,   LVPACKSB,   Vector Byte Elements Pack Signed Saturated)
MNEM (lv.packs.h,   LVPACKSH,   Vector Half-Word Elements Pack Signed Saturated)
MNEM (lv.packus.b,  LVPACKUSB,  Vector Byte Elements Pack Unsigned Saturated)
MNEM (lv.packus.h,  LVPACKUSH,  Vector Half-Word Elements Pack Unsigned Saturated)
MNEM (lv.perm.n,    LVPERMN,    Vector Nibble Elements Permute)
MNEM (lv.rl.b,      LVRLB,      Vector Byte Elements Rotate Left)
MNEM (lv.rl.h,      LVRLH,      Vector Half-Word Elements Rotate Left)
MNEM (lv.sll,       LVSLL,      Vector Shift Left Logical)
MNEM (lv.sll.b,     LVSLLB,     Vector Byte Elements Shift Left Logical)
MNEM (lv.sll.h,     LVSLLH,     Vector Half-Word Elements Shift Left Logical)
MNEM (lv.sra.b,     LVSRAB,     Vector Byte Elements Shift Right Arithmetic)
MNEM (lv.sra.h,     LVSRAH,     Vector Half-Word Elements Shift Right Arithmetic)
MNEM (lv.srl,       LVSRL,      Vector Shift Right Logical)
MNEM (lv.srl.b,     LVSRLB,     Vector Byte Elements Shift Right Logical)
MNEM (lv.srl.h,     LVSRLH,     Vector Half-Word Elements Shift Right Logical)
MNEM (lv.sub.b,     LVSUBB,     Vector Byte Elements Subtract Signed)
MNEM (lv.sub.h,     LVSUBH,     Vector Half-Word Elements Subtract Signed)
MNEM (lv.subs.b,    LVSUBSB,    Vector Byte Elements Subtract Signed Saturated)
MNEM (lv.subs.h,    LVSUBSH,    Vector Half-Word Elements Subtract Signed Saturated)
MNEM (lv.subu.b,    LVSUBUB,    Vector Byte Elements Subtract Unsigned)
MNEM (lv.subu.h,    LVSUBUH,    Vector Half-Word Elements Subtract Unsigned)
MNEM (lv.subus.b,   LVSUBUSB,   Vector Byte Elements Subtract Unsigned Saturated)
MNEM (lv.subus.h,   LVSUBUSH,   Vector Half-Word Elements Subtract Unsigned Saturated)
MNEM (lv.unpack.b,  LVUNPACKB,  Vector Byte Elements Unpack)
MNEM (lv.unpack.h,  LVUNPACKH,  Vector Half-Word Elements Unpack)
MNEM (lv.xor,       LVXOR,      Vector Exclusive Or)

// basic instructions

INSTR (LADD,       0xe0000000,  0xfc00030f,  RD,    RA,    RB,    ORBIS32I)
INSTR (LADDC,      0xe0000001,  0xfc00030f,  RD,    RA,    RB,    ORBIS32I)
INSTR (LADDI,      0x9c000000,  0xfc000000,  RD,    RA,    I,     ORBIS32I)
INSTR (LADDIC,     0xa0000000,  0xfc000000,  RD,    RA,    I,     ORBIS32I)
INSTR (LAND,       0xe0000003,  0xfc00030f,  RD,    RA,    RB,    ORBIS32I)
INSTR (LANDI,      0xa4000000,  0xfc000000,  RD,    RA,    K,     ORBIS32I)
INSTR (LBF,        0x10000000,  0xfc000000,  N,     Void,  Void,  ORBIS32I)
INSTR (LBNF,       0x0c000000,  0xfc000000,  N,     Void,  Void,  ORBIS32I)
INSTR (LCMOV,      0xe000000e,  0xfc00030f,  RD,    RA,    RB,    ORBIS32II)
INSTR (LCSYNC,     0x23000000,  0xffffffff,  Void,  Void,  Void,  ORBIS32II)
INSTR (LDIV,       0xe0000309,  0xfc00030f,  RD,    RA,    RB,    ORBIS32II)
INSTR (LDIVU,      0xe000030a,  0xfc00030f,  RD,    RA,    RB,    ORBIS32II)
INSTR (LEXTBS,     0xe000004c,  0xfc0003cf,  RD,    RA,    Void,  ORBIS32II)
INSTR (LEXTBZ,     0xe00000cc,  0xfc0003cf,  RD,    RA,    Void,  ORBIS32II)
INSTR (LEXTHS,     0xe000000c,  0xfc0003cf,  RD,    RA,    Void,  ORBIS32II)
INSTR (LEXTHZ,     0xe000008c,  0xfc0003cf,  RD,    RA,    Void,  ORBIS32II)
INSTR (LEXTWS,     0xe000000d,  0xfc0003cf,  RD,    RA,    Void,  ORBIS64II)
INSTR (LEXTWZ,     0xe000004d,  0xfc0003cf,  RD,    RA,    Void,  ORBIS64II)
INSTR (LFF1,       0xe000000f,  0xfc00030f,  RD,    RA,    Void,  ORBIS32II)
INSTR (LFL1,       0xe000010f,  0xfc00030f,  RD,    RA,    Void,  ORBIS32II)
INSTR (LJ,         0x00000000,  0xfc000000,  N,     Void,  Void,  ORBIS32I)
INSTR (LJAL,       0x04000000,  0xfc000000,  N,     Void,  Void,  ORBIS32I)
INSTR (LJALR,      0x48000000,  0xfc000000,  RB,    Void,  Void,  ORBIS32I)
INSTR (LJR,        0x44000000,  0xfc000000,  RB,    Void,  Void,  ORBIS32I)
INSTR (LLBS,       0x90000000,  0xfc000000,  RD,    IRA,   Void,  ORBIS32I)
INSTR (LLBZ,       0x8c000000,  0xfc000000,  RD,    IRA,   Void,  ORBIS32I)
INSTR (LLD,        0x80000000,  0xfc000000,  RD,    IRA,   Void,  ORBIS64I)
INSTR (LLHS,       0x98000000,  0xfc000000,  RD,    IRA,   Void,  ORBIS32I)
INSTR (LLHZ,       0x94000000,  0xfc000000,  RD,    IRA,   Void,  ORBIS32I)
INSTR (LLWA,       0x6c000000,  0xfc000000,  RD,    IRA,   Void,  ORBIS32II)
INSTR (LLWS,       0x88000000,  0xfc000000,  RD,    IRA,   Void,  ORBIS32I)
INSTR (LLWZ,       0x84000000,  0xfc000000,  RD,    IRA,   Void,  ORBIS32I)
INSTR (LMAC,       0xc4000001,  0xfc00000f,  RA,    RB,    Void,  ORBIS32II)
INSTR (LMACI,      0x4c000000,  0xfc000000,  RA,    I,     Void,  ORBIS32II)
INSTR (LMACRC,     0x18010000,  0xfc01ffff,  RD,    Void,  Void,  ORBIS32II)
INSTR (LMACU,      0xc4000003,  0xfc00000f,  RA,    RB,    Void,  ORBIS32II)
INSTR (LMFSPR,     0xb4000000,  0xfc000000,  RD,    RA,    K,     ORBIS32I)
INSTR (LMOVHI,     0x18000000,  0xfc010000,  RD,    K,     Void,  ORBIS32I)
INSTR (LMSB,       0xc4000002,  0xfc00000f,  RA,    RB,    Void,  ORBIS32II)
INSTR (LMSBU,      0xc4000004,  0xfc00000f,  RA,    RB,    Void,  ORBIS32II)
INSTR (LMSYNC,     0x22000000,  0xffffffff,  Void,  Void,  Void,  ORBIS32II)
INSTR (LMTSPR,     0xc0000000,  0xfc000000,  RA,    RB,    K_,    ORBIS32I)
INSTR (LMUL,       0xe0000306,  0xfc00030f,  RD,    RA,    RB,    ORBIS32II)
INSTR (LMULD,      0xe0000307,  0xfc00030f,  RA,    RB,    Void,  ORBIS32II)
INSTR (LMULDU,     0xe000030c,  0xfc00030f,  RA,    RB,    Void,  ORBIS32II)
INSTR (LMULI,      0xb0000000,  0xfc000000,  RD,    RA,    I,     ORBIS32II)
INSTR (LMULU,      0xe000030b,  0xfc00030f,  RD,    RA,    RB,    ORBIS32II)
INSTR (LNOP,       0x15000000,  0xff000000,  K,     Void,  Void,  ORBIS32I)
INSTR (LOR,        0xe0000004,  0xfc00030f,  RD,    RA,    RB,    ORBIS32I)
INSTR (LORI,       0xa8000000,  0xfc000000,  RD,    RA,    K,     ORBIS32I)
INSTR (LPSYNC,     0x22800000,  0xffffffff,  Void,  Void,  Void,  ORBIS32II)
INSTR (LRFE,       0x24000000,  0xfc000000,  Void,  Void,  Void,  ORBIS32I)
INSTR (LROR,       0xe00000c8,  0xfc0003cf,  RD,    RA,    RB,    ORBIS32II)
INSTR (LRORI,      0xb80000c0,  0xfc0000c0,  RD,    RA,    L,     ORBIS32II)
INSTR (LSB,        0xd8000000,  0xfc000000,  IRA_,  RB,    Void,  ORBIS32I)
INSTR (LSD,        0xd0000000,  0xfc000000,  IRA_,  RB,    Void,  ORBIS64I)
INSTR (LSFEQ,      0xe4000000,  0xffe00000,  RA,    RB,    Void,  ORBIS32I)
INSTR (LSFEQI,     0xbc000000,  0xffe00000,  RA,    I,     Void,  ORBIS32II)
INSTR (LSFGES,     0xe5600000,  0xffe00000,  RA,    RB,    Void,  ORBIS32I)
INSTR (LSFGESI,    0xbd600000,  0xffe00000,  RA,    I,     Void,  ORBIS32II)
INSTR (LSFGEU,     0xe4600000,  0xffe00000,  RA,    RB,    Void,  ORBIS32I)
INSTR (LSFGEUI,    0xbc600000,  0xffe00000,  RA,    I,     Void,  ORBIS32II)
INSTR (LSFGTS,     0xe5400000,  0xffe00000,  RA,    RB,    Void,  ORBIS32I)
INSTR (LSFGTSI,    0xbd400000,  0xffe00000,  RA,    I,     Void,  ORBIS32II)
INSTR (LSFGTU,     0xe4400000,  0xffe00000,  RA,    RB,    Void,  ORBIS32I)
INSTR (LSFGTUI,    0xbc400000,  0xffe00000,  RA,    I,     Void,  ORBIS32II)
INSTR (LSFLES,     0xe5a00000,  0xffe00000,  RA,    RB,    Void,  ORBIS32I)
INSTR (LSFLESI,    0xbda00000,  0xffe00000,  RA,    I,     Void,  ORBIS32II)
INSTR (LSFLEU,     0xe4a00000,  0xffe00000,  RA,    RB,    Void,  ORBIS32I)
INSTR (LSFLEUI,    0xbca00000,  0xffe00000,  RA,    I,     Void,  ORBIS32II)
INSTR (LSFLTS,     0xe5800000,  0xffe00000,  RA,    RB,    Void,  ORBIS32I)
INSTR (LSFLTSI,    0xbd800000,  0xffe00000,  RA,    I,     Void,  ORBIS32II)
INSTR (LSFLTU,     0xe4800000,  0xffe00000,  RA,    RB,    Void,  ORBIS32I)
INSTR (LSFLTUI,    0xbc800000,  0xffe00000,  RA,    I,     Void,  ORBIS32II)
INSTR (LSFNE,      0xe4200000,  0xffe00000,  RA,    RB,    Void,  ORBIS32I)
INSTR (LSFNEI,     0xbc200000,  0xffe00000,  RA,    I,     Void,  ORBIS32II)
INSTR (LSH,        0xdc000000,  0xfc000000,  IRA_,  RB,    Void,  ORBIS32I)
INSTR (LSLL,       0xe0000008,  0xfc0003cf,  RD,    RA,    RB,    ORBIS32I)
INSTR (LSLLI,      0xb8000000,  0xfc0000c0,  RD,    RA,    L,     ORBIS32I)
INSTR (LSRA,       0xe0000088,  0xfc0003cf,  RD,    RA,    RB,    ORBIS32I)
INSTR (LSRAI,      0xb8000080,  0xfc0000c0,  RD,    RA,    L,     ORBIS32I)
INSTR (LSRL,       0xe0000048,  0xfc0003cf,  RD,    RA,    RB,    ORBIS32I)
INSTR (LSRLI,      0xb8000040,  0xfc0000c0,  RD,    RA,    L,     ORBIS32I)
INSTR (LSUB,       0xe0000002,  0xfc00030f,  RD,    RA,    RB,    ORBIS32I)
INSTR (LSW,        0xd4000000,  0xfc000000,  IRA_,  RB,    Void,  ORBIS32I)
INSTR (LSWA,       0xcc000000,  0xfc000000,  IRA_,  RB,    Void,  ORBIS32II)
INSTR (LSYS,       0x20000000,  0xffff0000,  K,     Void,  Void,  ORBIS32I)
INSTR (LTRAP,      0x21000000,  0xffff0000,  K,     Void,  Void,  ORBIS32II)
INSTR (LXOR,       0xe0000005,  0xfc00030f,  RD,    RA,    RB,    ORBIS32I)
INSTR (LXORI,      0xac000000,  0xfc000000,  RD,    RA,    I,     ORBIS32I)

// floating-point instructions

INSTR (LFADDD,     0xc8000010,  0xfc0000ff,  RD,    RA,    RB,    ORFPX64I)
INSTR (LFADDS,     0xc8000000,  0xfc0000ff,  RD,    RA,    RB,    ORFPX32I)
INSTR (LFDIVD,     0xc8000013,  0xfc0000ff,  RD,    RA,    RB,    ORFPX64II)
INSTR (LFDIVS,     0xc8000003,  0xfc0000ff,  RD,    RA,    RB,    ORFPX32II)
INSTR (LFFTOID,    0xc8000015,  0xfc00f8ff,  RD,    RA,    Void,  ORFPX64I)
INSTR (LFFTOIS,    0xc8000005,  0xfc00f8ff,  RD,    RA,    Void,  ORFPX32I)
INSTR (LFITOFD,    0xc8000014,  0xfc00f8ff,  RD,    RA,    Void,  ORFPX64I)
INSTR (LFITOFS,    0xc8000004,  0xfc00f8ff,  RD,    RA,    Void,  ORFPX32I)
INSTR (LFMADDD,    0xc8000017,  0xfc0000ff,  RD,    RA,    RB,    ORFPX64II)
INSTR (LFMADDS,    0xc8000007,  0xfc0000ff,  RD,    RA,    RB,    ORFPX32II)
INSTR (LFMULD,     0xc8000012,  0xfc0000ff,  RD,    RA,    RB,    ORFPX64I)
INSTR (LFMULS,     0xc8000002,  0xfc0000ff,  RD,    RA,    RB,    ORFPX32I)
INSTR (LFREMD,     0xc8000016,  0xfc0000ff,  RD,    RA,    RB,    ORFPX64II)
INSTR (LFREMS,     0xc8000006,  0xfc0000ff,  RD,    RA,    RB,    ORFPX32II)
INSTR (LFSFEQD,    0xc8000018,  0xfc0000ff,  RA,    RB,    Void,  ORFPX64I)
INSTR (LFSFEQS,    0xc8000008,  0xfc0000ff,  RA,    RB,    Void,  ORFPX32I)
INSTR (LFSFGED,    0xc800001b,  0xfc0000ff,  RA,    RB,    Void,  ORFPX64I)
INSTR (LFSFGES,    0xc800000b,  0xfc0000ff,  RA,    RB,    Void,  ORFPX32I)
INSTR (LFSFGTD,    0xc800001a,  0xfc0000ff,  RA,    RB,    Void,  ORFPX64I)
INSTR (LFSFGTS,    0xc800000a,  0xfc0000ff,  RA,    RB,    Void,  ORFPX32I)
INSTR (LFSFLED,    0xc800001d,  0xfc0000ff,  RA,    RB,    Void,  ORFPX64I)
INSTR (LFSFLES,    0xc800000d,  0xfc0000ff,  RA,    RB,    Void,  ORFPX32I)
INSTR (LFSFLTD,    0xc800001c,  0xfc0000ff,  RA,    RB,    Void,  ORFPX64I)
INSTR (LFSFLTS,    0xc800000c,  0xfc0000ff,  RA,    RB,    Void,  ORFPX32I)
INSTR (LFSFNED,    0xc8000019,  0xfc0000ff,  RA,    RB,    Void,  ORFPX64I)
INSTR (LFSFNES,    0xc8000009,  0xfc0000ff,  RA,    RB,    Void,  ORFPX32I)
INSTR (LFSUBD,     0xc8000011,  0xfc0000ff,  RD,    RA,    RB,    ORFPX64I)
INSTR (LFSUBS,     0xc8000001,  0xfc0000ff,  RD,    RA,    RB,    ORFPX32I)

// vector instructions

INSTR (LVADDB,     0x28000030,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVADDH,     0x28000031,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVADDSB,    0x28000032,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVADDSH,    0x28000033,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVADDUB,    0x28000034,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVADDUH,    0x28000035,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVADDUSB,   0x28000036,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVADDUSH,   0x28000037,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVALLEQB,   0x28000010,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVALLEQH,   0x28000011,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVALLGEB,   0x28000012,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVALLGEH,   0x28000013,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVALLGTB,   0x28000014,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVALLGTH,   0x28000015,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVALLLEB,   0x28000016,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVALLLEH,   0x28000017,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVALLLTB,   0x28000018,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVALLLTH,   0x28000019,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVALLNEB,   0x2800001a,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVALLNEH,   0x2800001b,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVAND,      0x28000038,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVANYEQB,   0x28000020,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVANYEQH,   0x28000021,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVANYGEB,   0x28000022,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVANYGEH,   0x28000023,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVANYGTB,   0x28000024,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVANYGTH,   0x28000025,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVANYLEB,   0x28000026,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVANYLEH,   0x28000027,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVANYLTB,   0x28000028,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVANYLTH,   0x28000029,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVANYNEB,   0x2800002a,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVANYNEH,   0x2800002b,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVAVGB,     0x28000039,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVAVGH,     0x2800003a,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVCMPEQB,   0x28000040,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVCMPEQH,   0x28000041,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVCMPGEB,   0x28000042,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVCMPGEH,   0x28000043,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVCMPGTB,   0x28000044,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVCMPGTH,   0x28000045,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVCMPLEB,   0x28000046,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVCMPLEH,   0x28000047,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVCMPLTB,   0x28000048,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVCMPLTH,   0x28000049,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVCMPNEB,   0x2800004a,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVCMPNEH,   0x2800004b,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVMADDSH,   0x28000054,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVMAXB,     0x28000055,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVMAXH,     0x28000056,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVMERGEB,   0x28000057,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVMERGEH,   0x28000058,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVMINB,     0x28000059,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVMINH,     0x2800005a,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVMSUBSH,   0x2800005b,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVMULSH,    0x2800005c,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64II)
INSTR (LVNAND,     0x2800005d,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVNOR,      0x2800005e,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVOR,       0x2800005f,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVPACKB,    0x28000060,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVPACKH,    0x28000061,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVPACKSB,   0x28000062,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVPACKSH,   0x28000063,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVPACKUSB,  0x28000064,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVPACKUSH,  0x28000065,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVPERMN,    0x28000066,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVRLB,      0x28000067,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVRLH,      0x28000068,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSLL,      0x2800006b,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSLLB,     0x28000069,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSLLH,     0x2800006a,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSRAB,     0x2800006e,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSRAH,     0x2800006f,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSRL,      0x28000070,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSRLB,     0x2800006c,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSRLH,     0x2800006d,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSUBB,     0x28000071,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSUBH,     0x28000072,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSUBSB,    0x28000073,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSUBSH,    0x28000074,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSUBUB,    0x28000075,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSUBUH,    0x28000076,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSUBUSB,   0x28000077,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVSUBUSH,   0x28000078,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVUNPACKB,  0x28000079,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVUNPACKH,  0x2800007a,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)
INSTR (LVXOR,      0x2800007b,  0xfc0000ff,  RD,    RA,    RB,    ORVDX64I)

// operand types

TYPE (I)
TYPE (IRA)
TYPE (IRA_)
TYPE (K)
TYPE (K_)
TYPE (L)
TYPE (N)
TYPE (RA)
TYPE (RB)
TYPE (RD)

// instruction classes

CLASS (ORBIS32I)
CLASS (ORBIS32II)
CLASS (ORBIS64I)
CLASS (ORBIS64II)
CLASS (ORFPX32I)
CLASS (ORFPX32II)
CLASS (ORFPX64I)
CLASS (ORFPX64II)
CLASS (ORVDX64I)
CLASS (ORVDX64II)

#undef CLASS
#undef INSTR
#undef MNEM
#undef TYPE
