(* Windows API wrapper
Copyright (C) Florian Negele

This file is part of the Eigen Compiler Suite.

The ECS is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

The ECS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of the GNU General Public License version 3,
the copyright holder grants you additional permissions to use
this file as described in the ECS Runtime Support Exception.

You should have received a copy of the GNU General Public License
and a copy of the ECS Runtime Support Exception along with
the ECS.  If not, see <https://www.gnu.org/licenses/>. *)

MODULE Windows IN API;

IMPORT SYSTEM;

CONST Size = SIZE;

CONST ABOVE_NORMAL_PRIORITY_CLASS* = 8000H;
CONST AC_SRC_ALPHA* = 1H;
CONST AC_SRC_OVER* = 0H;
CONST AD_CLOCKWISE* = 2;
CONST AD_COUNTERCLOCKWISE* = 1;
CONST AF_APPLETALK* = 16;
CONST AF_BTH* = 32;
CONST AF_INET* = 2;
CONST AF_INET6* = 23;
CONST AF_IPX* = 6;
CONST AF_IRDA* = 26;
CONST AF_NETBIOS* = 17;
CONST AF_UNSPEC* = 0;
CONST ALTERNATE* = 1;
CONST ANSI_FIXED_FONT* = 11;
CONST ANSI_VAR_FONT* = 12;
CONST ASPECTX* = 40;
CONST ASPECTXY* = 44;
CONST ASPECTY* = 42;
CONST BACKGROUND_BLUE* = 10H;
CONST BACKGROUND_GREEN* = 20H;
CONST BACKGROUND_INTENSITY* = 80H;
CONST BACKGROUND_RED* = 40H;
CONST BAUD_075* = 1H;
CONST BAUD_110* = 2H;
CONST BAUD_115200* = 20000H;
CONST BAUD_1200* = 40H;
CONST BAUD_128K* = 10000H;
CONST BAUD_134_5* = 4H;
CONST BAUD_14400* = 1000H;
CONST BAUD_150* = 8H;
CONST BAUD_1800* = 80H;
CONST BAUD_19200* = 2000H;
CONST BAUD_2400* = 100H;
CONST BAUD_300* = 10H;
CONST BAUD_38400* = 4000H;
CONST BAUD_4800* = 200H;
CONST BAUD_56K* = 8000H;
CONST BAUD_57600* = 40000H;
CONST BAUD_600* = 20H;
CONST BAUD_7200* = 400H;
CONST BAUD_9600* = 800H;
CONST BAUD_USER* = 10000000H;
CONST BDR_RAISEDINNER* = 4;
CONST BDR_RAISEDOUTER* = 1;
CONST BDR_SUNKENINNER* = 8;
CONST BDR_SUNKENOUTER* = 2;
CONST BELOW_NORMAL_PRIORITY_CLASS* = 4000H;
CONST BF_ADJUST* = 2000H;
CONST BF_BOTTOM* = 8;
CONST BF_LEFT* = 1;
CONST BF_BOTTOMLEFT* = BF_BOTTOM + BF_LEFT;
CONST BF_RIGHT* = 4;
CONST BF_BOTTOMRIGHT* = BF_BOTTOM + BF_RIGHT;
CONST BF_DIAGONAL* = 16;
CONST BF_DIAGONAL_ENDBOTTOMLEFT* = BF_DIAGONAL + BF_BOTTOM + BF_LEFT;
CONST BF_DIAGONAL_ENDBOTTOMRIGHT* = BF_DIAGONAL + BF_BOTTOM + BF_RIGHT;
CONST BF_TOP* = 2;
CONST BF_DIAGONAL_ENDTOPLEFT* = BF_DIAGONAL + BF_TOP + BF_LEFT;
CONST BF_DIAGONAL_ENDTOPRIGHT* = BF_DIAGONAL + BF_TOP + BF_RIGHT;
CONST BF_FLAT* = 4000H;
CONST BF_MIDDLE* = 800H;
CONST BF_MONO* = 8000H;
CONST BF_RECT* = BF_LEFT + BF_TOP + BF_RIGHT + BF_BOTTOM;
CONST BF_SOFT* = 1000H;
CONST BF_TOPLEFT* = BF_TOP + BF_LEFT;
CONST BF_TOPRIGHT* = BF_TOP + BF_RIGHT;
CONST BITSPIXEL* = 12;
CONST BLACKNESS* = 42H;
CONST BLACKONWHITE* = 1;
CONST BLACK_BRUSH* = 4;
CONST BLACK_PEN* = 7;
CONST BLTALIGNMENT* = 119;
CONST BTHPROTO_RFCOMM* = 3;
CONST CAPTUREBLT* = 40000000H;
CONST CA_LOG_FILTER* = 2;
CONST CA_NEGATIVE* = 1;
CONST CBR_110* = 110;
CONST CBR_115200* = 115200;
CONST CBR_1200* = 1200;
CONST CBR_128000* = 128000;
CONST CBR_14400* = 14400;
CONST CBR_19200* = 19200;
CONST CBR_2400* = 2400;
CONST CBR_256000* = 256000;
CONST CBR_300* = 300;
CONST CBR_38400* = 38400;
CONST CBR_4800* = 4800;
CONST CBR_56000* = 56000;
CONST CBR_57600* = 57600;
CONST CBR_600* = 600;
CONST CBR_9600* = 9600;
CONST CCHDEVICENAME* = 32;
CONST CCHFORMNAME* = 32;
CONST CC_CHORD* = 4;
CONST CC_CIRCLES* = 1;
CONST CC_ELLIPSES* = 8;
CONST CC_INTERIORS* = 128;
CONST CC_NONE* = 0;
CONST CC_PIE* = 2;
CONST CC_ROUNDRECT* = 256;
CONST CC_STYLED* = 32;
CONST CC_WIDE* = 16;
CONST CC_WIDESTYLED* = 64;
CONST CDS_FULLSCREEN* = 4;
CONST CDS_GLOBAL* = 8;
CONST CDS_NORESET* = 10000000H;
CONST CDS_RESET* = 40000000H;
CONST CDS_SET_PRIMARY* = 16;
CONST CDS_TEST* = 2;
CONST CDS_UPDATEREGISTRY* = 1;
CONST CE_BREAK* = 10H;
CONST CE_DNS* = 800H;
CONST CE_FRAME* = 8H;
CONST CE_IOE* = 400H;
CONST CE_MODE* = 8000H;
CONST CE_OOP* = 1000H;
CONST CE_OVERRUN* = 2H;
CONST CE_PTO* = 200H;
CONST CE_RXOVER* = 1H;
CONST CE_RXPARITY* = 4H;
CONST CE_TXFULL* = 100H;
CONST CF_BITMAP* = 2;
CONST CF_DIB* = 8;
CONST CF_DIBV5* = 17;
CONST CF_DIF* = 5;
CONST CF_DSPBITMAP* = 82H;
CONST CF_DSPENHMETAFILE* = 8EH;
CONST CF_DSPMETAFILEPICT* = 83H;
CONST CF_DSPTEXT* = 81H;
CONST CF_ENHMETAFILE* = 14H;
CONST CF_GDIOBJFIRST* = 300H;
CONST CF_GDIOBJLAST* = 3FFH;
CONST CF_HDROP* = 15;
CONST CF_LOCALE* = 16;
CONST CF_METAFILEPICT* = 3;
CONST CF_OEMTEXT* = 7;
CONST CF_OWNERDISPLAY* = 80H;
CONST CF_PALETTE* = 9;
CONST CF_PENDATA* = 10;
CONST CF_PRIVATEFIRST* = 200H;
CONST CF_PRIVATELAST* = 2FFH;
CONST CF_RIFF* = 11;
CONST CF_SYLK* = 4;
CONST CF_TEXT* = 1;
CONST CF_TIFF* = 6;
CONST CF_UNICODETEXT* = 13;
CONST CF_WAVE* = 12;
CONST CLIPCAPS* = 36;
CONST CM_CMYK_COLOR* = 4H;
CONST CM_DEVICE_ICM* = 1H;
CONST CM_GAMMA_RAMP* = 2H;
CONST CM_NONE* = 0H;
CONST COLORMGMTCAPS* = 121;
CONST COLORONCOLOR* = 3;
CONST COLORRES* = 108;
CONST COLOR_3DDKSHADOW* = 21;
CONST COLOR_BTNFACE* = 15;
CONST COLOR_3DFACE* = COLOR_BTNFACE;
CONST COLOR_BTNHIGHLIGHT* = 20;
CONST COLOR_3DHIGHLIGHT* = COLOR_BTNHIGHLIGHT;
CONST COLOR_3DHILIGHT* = COLOR_BTNHIGHLIGHT;
CONST COLOR_3DLIGHT* = 22;
CONST COLOR_BTNSHADOW* = 16;
CONST COLOR_3DSHADOW* = COLOR_BTNSHADOW;
CONST COLOR_ACTIVEBORDER* = 10;
CONST COLOR_ACTIVECAPTION* = 2;
CONST COLOR_APPWORKSPACE* = 12;
CONST COLOR_BACKGROUND* = 1;
CONST COLOR_BTNHILIGHT* = COLOR_BTNHIGHLIGHT;
CONST COLOR_BTNTEXT* = 18;
CONST COLOR_CAPTIONTEXT* = 9;
CONST COLOR_DESKTOP* = COLOR_BACKGROUND;
CONST COLOR_GRADIENTACTIVECAPTION* = 27;
CONST COLOR_GRADIENTINACTIVECAPTION* = 28;
CONST COLOR_GRAYTEXT* = 17;
CONST COLOR_HIGHLIGHT* = 13;
CONST COLOR_HIGHLIGHTTEXT* = 14;
CONST COLOR_HOTLIGHT* = 26;
CONST COLOR_INACTIVEBORDER* = 11;
CONST COLOR_INACTIVECAPTION* = 3;
CONST COLOR_INACTIVECAPTIONTEXT* = 19;
CONST COLOR_INFOBK* = 24;
CONST COLOR_INFOTEXT* = 23;
CONST COLOR_MENU* = 4;
CONST COLOR_MENUBAR* = 30;
CONST COLOR_MENUHILIGHT* = 29;
CONST COLOR_MENUTEXT* = 7;
CONST COLOR_SCROLLBAR* = 0;
CONST COLOR_WINDOW* = 5;
CONST COLOR_WINDOWFRAME* = 6;
CONST COLOR_WINDOWTEXT* = 8;
CONST COMPLEXREGION* = 3;
CONST CONDITION_VARIABLE_LOCKMODE_SHARED* = 1H;
CONST CONSOLE_FULLSCREEN* = 1;
CONST CONSOLE_FULLSCREEN_HARDWARE* = 2;
CONST CREATE_ALWAYS* = 2;
CONST CREATE_NEW* = 1;
CONST CREATE_SUSPENDED* = 4;
CONST CRITICAL_SECTION_NO_DEBUG_INFO* = 1000000H;
CONST CS_BYTEALIGNCLIENT* = 1000H;
CONST CS_BYTEALIGNWINDOW* = 2000H;
CONST CS_CLASSDC* = 40H;
CONST CS_DBLCLKS* = 8H;
CONST CS_DROPSHADOW* = 20000H;
CONST CS_GLOBALCLASS* = 4000H;
CONST CS_HREDRAW* = 2H;
CONST CS_IME* = 10000H;
CONST CS_NOCLOSE* = 200H;
CONST CS_OWNDC* = 20H;
CONST CS_PARENTDC* = 80H;
CONST CS_SAVEBITS* = 800H;
CONST CS_VREDRAW* = 1H;
CONST CURVECAPS* = 28;
CONST CW_USEDEFAULT* = INTEGER (80000000H);
CONST DATABITS_16* = 10H;
CONST DATABITS_16X* = 20H;
CONST DATABITS_5* = 1H;
CONST DATABITS_6* = 2H;
CONST DATABITS_7* = 4H;
CONST DATABITS_8* = 8H;
CONST DCB_ACCUMULATE* = 2;
CONST DCB_DIRTY* = 2;
CONST DCB_DISABLE* = 8;
CONST DCB_ENABLE* = 4;
CONST DCB_RESET* = 1;
CONST DCB_SET* = 3;
CONST DCX_CACHE* = 2;
CONST DCX_CLIPCHILDREN* = 8;
CONST DCX_CLIPSIBLINGS* = 16;
CONST DCX_EXCLUDERGN* = 64;
CONST DCX_EXCLUDEUPDATE* = 100H;
CONST DCX_INTERSECTRGN* = 128;
CONST DCX_INTERSECTUPDATE* = 200H;
CONST DCX_LOCKWINDOWUPDATE* = 400H;
CONST DCX_NORESETATTRS* = 4;
CONST DCX_PARENTCLIP* = 32;
CONST DCX_VALIDATE* = 200000H;
CONST DCX_WINDOW* = 1;
CONST DC_ACTIVE* = 1H;
CONST DC_BINNAMES* = 12;
CONST DC_BINS* = 6;
CONST DC_BRUSH* = 18;
CONST DC_BUTTONS* = 1000H;
CONST DC_COPIES* = 18;
CONST DC_DRIVER* = 11;
CONST DC_DUPLEX* = 7;
CONST DC_ENUMRESOLUTIONS* = 13;
CONST DC_EXTRA* = 9;
CONST DC_FIELDS* = 1;
CONST DC_FILEDEPENDENCIES* = 14;
CONST DC_GRADIENT* = 20H;
CONST DC_ICON* = 4H;
CONST DC_INBUTTON* = 10H;
CONST DC_MAXEXTENT* = 5;
CONST DC_MINEXTENT* = 4;
CONST DC_ORIENTATION* = 17;
CONST DC_PAPERNAMES* = 16;
CONST DC_PAPERS* = 2;
CONST DC_PAPERSIZE* = 3;
CONST DC_PEN* = 19;
CONST DC_SIZE* = 8;
CONST DC_SMALLCAP* = 2H;
CONST DC_TEXT* = 8H;
CONST DC_TRUETYPE* = 15;
CONST DC_VERSION* = 10;
CONST DEFAULT_GUI_FONT* = 17;
CONST DEFAULT_PALETTE* = 15;
CONST DELETE* = 10000H;
CONST DESKTOPHORZRES* = 118;
CONST DESKTOPVERTRES* = 117;
CONST DEVICE_DEFAULT_FONT* = 14;
CONST DFCS_ADJUSTRECT* = 2000H;
CONST DFCS_BUTTON3STATE* = 8;
CONST DFCS_BUTTONCHECK* = 0;
CONST DFCS_BUTTONPUSH* = 16;
CONST DFCS_BUTTONRADIO* = 4;
CONST DFCS_BUTTONRADIOIMAGE* = 1;
CONST DFCS_BUTTONRADIOMASK* = 2;
CONST DFCS_CAPTIONCLOSE* = 0;
CONST DFCS_CAPTIONHELP* = 4;
CONST DFCS_CAPTIONMAX* = 2;
CONST DFCS_CAPTIONMIN* = 1;
CONST DFCS_CAPTIONRESTORE* = 3;
CONST DFCS_CHECKED* = 1024;
CONST DFCS_FLAT* = 4000H;
CONST DFCS_HOT* = 1000H;
CONST DFCS_INACTIVE* = 256;
CONST DFCS_MENUARROW* = 0;
CONST DFCS_MENUARROWRIGHT* = 4;
CONST DFCS_MENUBULLET* = 2;
CONST DFCS_MENUCHECK* = 1;
CONST DFCS_MONO* = 8000H;
CONST DFCS_PUSHED* = 512;
CONST DFCS_SCROLLCOMBOBOX* = 5;
CONST DFCS_SCROLLDOWN* = 1;
CONST DFCS_SCROLLLEFT* = 2;
CONST DFCS_SCROLLRIGHT* = 3;
CONST DFCS_SCROLLSIZEGRIP* = 8;
CONST DFCS_SCROLLSIZEGRIPRIGHT* = 16;
CONST DFCS_SCROLLUP* = 0;
CONST DFCS_TRANSPARENT* = 800H;
CONST DFC_BUTTON* = 4;
CONST DFC_CAPTION* = 1;
CONST DFC_MENU* = 2;
CONST DFC_POPUPMENU* = 5;
CONST DFC_SCROLL* = 3;
CONST DIB_PAL_COLORS* = 1;
CONST DIB_RGB_COLORS* = 0;
CONST DKGRAY_BRUSH* = 3;
CONST DMCOLLATE_FALSE* = 0;
CONST DMCOLLATE_TRUE* = 1;
CONST DMCOLOR_COLOR* = 2;
CONST DMCOLOR_MONOCHROME* = 1;
CONST DMDFO_CENTER* = 2;
CONST DMDFO_DEFAULT* = 0;
CONST DMDFO_STRETCH* = 1;
CONST DMDITHER_COARSE* = 2;
CONST DMDITHER_ERRORDIFFUSION* = 5;
CONST DMDITHER_FINE* = 3;
CONST DMDITHER_GRAYSCALE* = 10;
CONST DMDITHER_LINEART* = 4;
CONST DMDITHER_NONE* = 1;
CONST DMDITHER_RESERVED6* = 6;
CONST DMDITHER_RESERVED7* = 7;
CONST DMDITHER_RESERVED8* = 8;
CONST DMDITHER_RESERVED9* = 9;
CONST DMDITHER_USER* = 256;
CONST DMDO_180* = 2;
CONST DMDO_270* = 3;
CONST DMDO_90* = 1;
CONST DMDO_DEFAULT* = 0;
CONST DMDUP_HORIZONTAL* = 3;
CONST DMDUP_SIMPLEX* = 1;
CONST DMDUP_VERTICAL* = 2;
CONST DMICMMETHOD_DEVICE* = 4;
CONST DMICMMETHOD_DRIVER* = 3;
CONST DMICMMETHOD_NONE* = 1;
CONST DMICMMETHOD_SYSTEM* = 2;
CONST DMICMMETHOD_USER* = 256;
CONST DMICM_COLORMETRIC* = 3;
CONST DMICM_CONTRAST* = 2;
CONST DMICM_SATURATE* = 1;
CONST DMICM_USER* = 256;
CONST DMMEDIA_GLOSSY* = 3;
CONST DMMEDIA_STANDARD* = 1;
CONST DMMEDIA_TRANSPARENCY* = 2;
CONST DMMEDIA_USER* = 256;
CONST DMPAPER_10X11* = 45;
CONST DMPAPER_10X14* = 16;
CONST DMPAPER_11X17* = 17;
CONST DMPAPER_15X11* = 46;
CONST DMPAPER_9X11* = 44;
CONST DMPAPER_A2* = 66;
CONST DMPAPER_A3* = 8;
CONST DMPAPER_A3_EXTRA* = 63;
CONST DMPAPER_A3_EXTRA_TRANSVERSE* = 68;
CONST DMPAPER_A3_TRANSVERSE* = 67;
CONST DMPAPER_A4* = 9;
CONST DMPAPER_A4SMALL* = 10;
CONST DMPAPER_A4_EXTRA* = 53;
CONST DMPAPER_A4_PLUS* = 60;
CONST DMPAPER_A4_TRANSVERSE* = 55;
CONST DMPAPER_A5* = 11;
CONST DMPAPER_A5_EXTRA* = 64;
CONST DMPAPER_A5_TRANSVERSE* = 61;
CONST DMPAPER_A_PLUS* = 57;
CONST DMPAPER_B4* = 12;
CONST DMPAPER_B5* = 13;
CONST DMPAPER_B5_EXTRA* = 65;
CONST DMPAPER_B5_TRANSVERSE* = 62;
CONST DMPAPER_B_PLUS* = 58;
CONST DMPAPER_CSHEET* = 24;
CONST DMPAPER_DSHEET* = 25;
CONST DMPAPER_ENV_10* = 20;
CONST DMPAPER_ENV_11* = 21;
CONST DMPAPER_ENV_12* = 22;
CONST DMPAPER_ENV_14* = 23;
CONST DMPAPER_ENV_9* = 19;
CONST DMPAPER_ENV_B4* = 33;
CONST DMPAPER_ENV_B5* = 34;
CONST DMPAPER_ENV_B6* = 35;
CONST DMPAPER_ENV_C3* = 29;
CONST DMPAPER_ENV_C4* = 30;
CONST DMPAPER_ENV_C5* = 28;
CONST DMPAPER_ENV_C6* = 31;
CONST DMPAPER_ENV_C65* = 32;
CONST DMPAPER_ENV_DL* = 27;
CONST DMPAPER_ENV_INVITE* = 47;
CONST DMPAPER_ENV_ITALY* = 36;
CONST DMPAPER_ENV_MONARCH* = 37;
CONST DMPAPER_ENV_PERSONAL* = 38;
CONST DMPAPER_ESHEET* = 26;
CONST DMPAPER_EXECUTIVE* = 7;
CONST DMPAPER_FANFOLD_LGL_GERMAN* = 41;
CONST DMPAPER_FANFOLD_STD_GERMAN* = 40;
CONST DMPAPER_FANFOLD_US* = 39;
CONST DMPAPER_FOLIO* = 14;
CONST DMPAPER_ISO_B4* = 42;
CONST DMPAPER_JAPANESE_POSTCARD* = 43;
CONST DMPAPER_LEDGER* = 4;
CONST DMPAPER_LEGAL* = 5;
CONST DMPAPER_LEGAL_EXTRA* = 51;
CONST DMPAPER_LETTER* = 1;
CONST DMPAPER_LETTERSMALL* = 2;
CONST DMPAPER_LETTER_EXTRA* = 50;
CONST DMPAPER_LETTER_EXTRA_TRANSVERSE* = 56;
CONST DMPAPER_LETTER_PLUS* = 59;
CONST DMPAPER_LETTER_TRANSVERSE* = 54;
CONST DMPAPER_NOTE* = 18;
CONST DMPAPER_QUARTO* = 15;
CONST DMPAPER_RESERVED_48* = 48;
CONST DMPAPER_RESERVED_49* = 49;
CONST DMPAPER_STATEMENT* = 6;
CONST DMPAPER_TABLOID* = 3;
CONST DMPAPER_TABLOID_EXTRA* = 52;
CONST DMPAPER_USER* = 256;
CONST DMTT_BITMAP* = 1;
CONST DMTT_DOWNLOAD* = 2;
CONST DMTT_DOWNLOAD_OUTLINE* = 4;
CONST DMTT_SUBDEV* = 3;
CONST DM_BITSPERPEL* = 40000H;
CONST DM_COLLATE* = 8000H;
CONST DM_COLOR* = 800H;
CONST DM_COPIES* = 100H;
CONST DM_DEFAULTSOURCE* = 200H;
CONST DM_DISPLAYFIXEDOUTPUT* = 20000000H;
CONST DM_DISPLAYFLAGS* = 200000H;
CONST DM_DISPLAYFREQUENCY* = 400000H;
CONST DM_DISPLAYORIENTATION* = 80H;
CONST DM_DITHERTYPE* = 4000000H;
CONST DM_DUPLEX* = 1000H;
CONST DM_FORMNAME* = 10000H;
CONST DM_GRAYSCALE* = 1H;
CONST DM_ICMINTENT* = 1000000H;
CONST DM_ICMMETHOD* = 800000H;
CONST DM_INTERLACED* = 2H;
CONST DM_LOGPIXELS* = 20000H;
CONST DM_MEDIATYPE* = 2000000H;
CONST DM_NUP* = 40H;
CONST DM_ORIENTATION* = 1H;
CONST DM_PANNINGHEIGHT* = 10000000H;
CONST DM_PANNINGWIDTH* = 8000000H;
CONST DM_PAPERLENGTH* = 4H;
CONST DM_PAPERSIZE* = 2H;
CONST DM_PAPERWIDTH* = 8H;
CONST DM_PELSHEIGHT* = 100000H;
CONST DM_PELSWIDTH* = 80000H;
CONST DM_POSITION* = 20H;
CONST DM_PRINTQUALITY* = 400H;
CONST DM_SCALE* = 10H;
CONST DM_TTOPTION* = 4000H;
CONST DM_YRESOLUTION* = 2000H;
CONST DRIVERVERSION* = 0;
CONST DSS_DEFAULT* = 64;
CONST DSS_DISABLED* = 32;
CONST DSS_HIDEPREFIX* = 200H;
CONST DSS_MONO* = 128;
CONST DSS_NORMAL* = 0;
CONST DSS_PREFIXONLY* = 400H;
CONST DSS_RIGHT* = 8000H;
CONST DSS_UNION* = 16;
CONST DSTINVERT* = 550009H;
CONST DST_BITMAP* = 4;
CONST DST_COMPLEX* = 0;
CONST DST_ICON* = 3;
CONST DST_PREFIXTEXT* = 2;
CONST DST_TEXT* = 1;
CONST DTR_CONTROL_DISABLE* = 0H;
CONST DTR_CONTROL_ENABLE* = 1H;
CONST DTR_CONTROL_HANDSHAKE* = 2H;
CONST DT_BOTTOM* = 8;
CONST DT_CALCRECT* = 1024;
CONST DT_CENTER* = 1;
CONST DT_CHARSTREAM* = 4;
CONST DT_DISPFILE* = 6;
CONST DT_EDITCONTROL* = 8192;
CONST DT_END_ELLIPSIS* = 32768;
CONST DT_EXPANDTABS* = 64;
CONST DT_EXTERNALLEADING* = 512;
CONST DT_HIDEPREFIX* = 1048576;
CONST DT_INTERNAL* = 4096;
CONST DT_LEFT* = 0;
CONST DT_METAFILE* = 5;
CONST DT_MODIFYSTRING* = 65536;
CONST DT_NOCLIP* = 256;
CONST DT_NOFULLWIDTHCHARBREAK* = 524288;
CONST DT_NOPREFIX* = 2048;
CONST DT_PATH_ELLIPSIS* = 16384;
CONST DT_PLOTTER* = 0;
CONST DT_PREFIXONLY* = 2097152;
CONST DT_RASCAMERA* = 3;
CONST DT_RASDISPLAY* = 1;
CONST DT_RASPRINTER* = 2;
CONST DT_RIGHT* = 2;
CONST DT_RTLREADING* = 131072;
CONST DT_SINGLELINE* = 32;
CONST DT_TABSTOP* = 128;
CONST DT_TOP* = 0;
CONST DT_VCENTER* = 4;
CONST DT_WORDBREAK* = 16;
CONST DT_WORD_ELLIPSIS* = 40000H;
CONST EDD_GET_DEVICE_INTERFACE_NAME* = 1;
CONST EDGE_BUMP* = BDR_RAISEDOUTER + BDR_SUNKENINNER;
CONST EDGE_ETCHED* = BDR_SUNKENOUTER + BDR_RAISEDINNER;
CONST EDGE_RAISED* = BDR_RAISEDOUTER + BDR_RAISEDINNER;
CONST EDGE_SUNKEN* = BDR_SUNKENOUTER + BDR_SUNKENINNER;
CONST EDS_RAWMODE* = 2H;
CONST EDS_ROTATEDMODE* = 4H;
CONST ENABLE_ECHO_INPUT* = 4H;
CONST ENABLE_INSERT_MODE* = 20H;
CONST ENABLE_LINE_INPUT* = 2H;
CONST ENABLE_MOUSE_INPUT* = 10H;
CONST ENABLE_PROCESSED_INPUT* = 1H;
CONST ENABLE_PROCESSED_OUTPUT* = 1H;
CONST ENABLE_QUICK_EDIT_MODE* = 40H;
CONST ENABLE_WINDOW_INPUT* = 8H;
CONST ENABLE_WRAP_AT_EOL_OUTPUT* = 2H;
CONST ENUM_CURRENT_SETTINGS* = -1;
CONST ENUM_REGISTRY_SETTINGS* = -2;
CONST ETO_CLIPPED* = 4H;
CONST ETO_GLYPH_INDEX* = 10H;
CONST ETO_GRAYED* = 1H;
CONST ETO_IGNORELANGUAGE* = 1000H;
CONST ETO_NUMERICSLATIN* = 800H;
CONST ETO_NUMERICSLOCAL* = 400H;
CONST ETO_OPAQUE* = 2H;
CONST ETO_PDY* = 2000H;
CONST ETO_RTLREADING* = 80H;
CONST EVENPARITY* = 2;
CONST EV_BREAK* = 40H;
CONST EV_CTS* = 8H;
CONST EV_DSR* = 10H;
CONST EV_ERR* = 80H;
CONST EV_EVENT1* = 800H;
CONST EV_EVENT2* = 1000H;
CONST EV_PERR* = 200H;
CONST EV_RING* = 100H;
CONST EV_RLSD* = 20H;
CONST EV_RX80FULL* = 400H;
CONST EV_RXCHAR* = 1H;
CONST EV_RXFLAG* = 2H;
CONST EV_TXEMPTY* = 4H;
CONST EXCEPTION_MAXIMUM_PARAMETERS* = 15;
CONST FALSE* = 0;
CONST FILE_ADD_FILE* = 2H;
CONST FILE_ADD_SUBDIRECTORY* = 4H;
CONST READ_CONTROL* = 20000H;
CONST WRITE_DAC* = 40000H;
CONST WRITE_OWNER* = 80000H;
CONST STANDARD_RIGHTS_REQUIRED* = DELETE + READ_CONTROL + WRITE_DAC + WRITE_OWNER;
CONST SYNCHRONIZE* = 100000H;
CONST FILE_ALL_ACCESS* = STANDARD_RIGHTS_REQUIRED + SYNCHRONIZE + 1FFH;
CONST FILE_APPEND_DATA* = 4H;
CONST FILE_ATTRIBUTE_ARCHIVE* = 20H;
CONST FILE_ATTRIBUTE_COMPRESSED* = 800H;
CONST FILE_ATTRIBUTE_DEVICE* = 40H;
CONST FILE_ATTRIBUTE_DIRECTORY* = 10H;
CONST FILE_ATTRIBUTE_ENCRYPTED* = 4000H;
CONST FILE_ATTRIBUTE_HIDDEN* = 2H;
CONST FILE_ATTRIBUTE_NORMAL* = 80H;
CONST FILE_ATTRIBUTE_NOT_CONTENT_INDEXED* = 2000H;
CONST FILE_ATTRIBUTE_OFFLINE* = 1000H;
CONST FILE_ATTRIBUTE_READONLY* = 1H;
CONST FILE_ATTRIBUTE_REPARSE_POINT* = 400H;
CONST FILE_ATTRIBUTE_SPARSE_FILE* = 200H;
CONST FILE_ATTRIBUTE_SYSTEM* = 4H;
CONST FILE_ATTRIBUTE_TEMPORARY* = 100H;
CONST FILE_BEGIN* = 0;
CONST FILE_CREATE_PIPE_INSTANCE* = 4H;
CONST FILE_CURRENT* = 1;
CONST FILE_DELETE_CHILD* = 40H;
CONST FILE_END* = 2;
CONST FILE_EXECUTE* = 20H;
CONST FILE_FLAG_BACKUP_SEMANTICS* = 2000000H;
CONST FILE_FLAG_DELETE_ON_CLOSE* = 4000000H;
CONST FILE_FLAG_FIRST_PIPE_INSTANCE* = 80000H;
CONST FILE_FLAG_NO_BUFFERING* = 20000000H;
CONST FILE_FLAG_OPEN_NO_RECALL* = 100000H;
CONST FILE_FLAG_OPEN_REPARSE_POINT* = 200000H;
CONST FILE_FLAG_OVERLAPPED* = 40000000H;
CONST FILE_FLAG_POSIX_SEMANTICS* = 1000000H;
CONST FILE_FLAG_RANDOM_ACCESS* = 10000000H;
CONST FILE_FLAG_SEQUENTIAL_SCAN* = 8000000H;
CONST FILE_FLAG_SESSION_AWARE* = 800000H;
CONST FILE_FLAG_WRITE_THROUGH* = 80000000H;
CONST STANDARD_RIGHTS_EXECUTE* = READ_CONTROL;
CONST FILE_READ_ATTRIBUTES* = 80H;
CONST FILE_GENERIC_EXECUTE* = STANDARD_RIGHTS_EXECUTE + FILE_READ_ATTRIBUTES + FILE_EXECUTE + SYNCHRONIZE;
CONST STANDARD_RIGHTS_READ* = READ_CONTROL;
CONST FILE_READ_DATA* = 1H;
CONST FILE_READ_EA* = 8H;
CONST FILE_GENERIC_READ* = STANDARD_RIGHTS_READ + FILE_READ_DATA + FILE_READ_ATTRIBUTES + FILE_READ_EA + SYNCHRONIZE;
CONST STANDARD_RIGHTS_WRITE* = READ_CONTROL;
CONST FILE_WRITE_DATA* = 2H;
CONST FILE_WRITE_ATTRIBUTES* = 100H;
CONST FILE_WRITE_EA* = 10H;
CONST FILE_GENERIC_WRITE* = STANDARD_RIGHTS_WRITE + FILE_WRITE_DATA + FILE_WRITE_ATTRIBUTES + FILE_WRITE_EA + FILE_APPEND_DATA + SYNCHRONIZE;
CONST FILE_LIST_DIRECTORY* = 1H;
CONST FILE_READ_ONLY_VOLUME* = 80000H;
CONST FILE_SHARE_DELETE* = 4H;
CONST FILE_SHARE_READ* = 1H;
CONST FILE_SHARE_WRITE* = 2H;
CONST FILE_TRAVERSE* = 20H;
CONST FLI_GLYPHS* = 40000H;
CONST FLOODFILLBORDER* = 0;
CONST FLOODFILLSURFACE* = 1;
CONST FOREGROUND_BLUE* = 1H;
CONST FOREGROUND_GREEN* = 2H;
CONST FOREGROUND_INTENSITY* = 8H;
CONST FOREGROUND_RED* = 4H;
CONST FR_NOT_ENUM* = 20H;
CONST FR_PRIVATE* = 10H;
CONST GCL_CBCLSEXTRA* = -20;
CONST GCL_CBWNDEXTRA* = -18;
CONST GCL_HBRBACKGROUND* = -10;
CONST GCL_HCURSOR* = -12;
CONST GCL_HICON* = -14;
CONST GCL_HICONSM* = -34;
CONST GCL_HMODULE* = -16;
CONST GCL_MENUNAME* = -8;
CONST GCL_STYLE* = -26;
CONST GCP_DBCS* = 1;
CONST GCP_DIACRITIC* = 256;
CONST GCP_GLYPHSHAPE* = 16;
CONST GCP_KASHIDA* = 1024;
CONST GCP_LIGATE* = 32;
CONST GCP_REORDER* = 2;
CONST GCP_USEKERNING* = 8;
CONST GCL_WNDPROC* = -24;
CONST GCW_ATOM* = -32;
CONST GENERIC_ALL* = 10000000H;
CONST GENERIC_EXECUTE* = 20000000H;
CONST GENERIC_READ* = 80000000H;
CONST GENERIC_WRITE* = 40000000H;
CONST GGI_MARK_NONEXISTING_GLYPHS* = 1H;
CONST GGO_BEZIER* = 3;
CONST GGO_BITMAP* = 1;
CONST GGO_GLYPH_INDEX* = 128;
CONST GGO_GRAY2_BITMAP* = 4;
CONST GGO_GRAY4_BITMAP* = 5;
CONST GGO_GRAY8_BITMAP* = 6;
CONST GGO_METRICS* = 0;
CONST GGO_NATIVE* = 2;
CONST GGO_UNHINTED* = 256;
CONST GMEM_MOVEABLE* = 2H;
CONST GMEM_ZEROINIT* = 40H;
CONST GHND* = GMEM_MOVEABLE + GMEM_ZEROINIT;
CONST GMEM_DDESHARE* = 2000H;
CONST GMEM_DISCARDABLE* = 100H;
CONST GMEM_FIXED* = 0H;
CONST GMEM_NOT_BANKED* = 1000H;
CONST GMEM_LOWER* = GMEM_NOT_BANKED;
CONST GMEM_MODIFY* = 80H;
CONST GMEM_NOCOMPACT* = 10H;
CONST GMEM_NODISCARD* = 20H;
CONST GMEM_NOTIFY* = 4000H;
CONST GMEM_SHARE* = 2000H;
CONST GM_ADVANCED* = 2;
CONST GM_COMPATIBLE* = 1;
CONST GPTR* = GMEM_FIXED + GMEM_ZEROINIT;
CONST GRADIENT_FILL_RECT_H* = 0H;
CONST GRADIENT_FILL_RECT_V* = 1H;
CONST GRADIENT_FILL_TRIANGLE* = 2H;
CONST GRAY_BRUSH* = 2;
CONST GW_CHILD* = 5;
CONST GW_ENABLEDPOPUP* = 6;
CONST GW_HWNDFIRST* = 0;
CONST GW_HWNDLAST* = 1;
CONST GW_HWNDNEXT* = 2;
CONST GW_HWNDPREV* = 3;
CONST GW_OWNER* = 4;
CONST GWL_EXSTYLE* = -20;
CONST GWL_HINSTANCE* = -6;
CONST GWL_HWNDPARENT* = -8;
CONST GWL_ID* = -12;
CONST GWL_STYLE* = -16;
CONST GWL_USERDATA* = -21;
CONST GWL_WNDPROC* = -4;
CONST HALFTONE* = 4;
CONST HBMMENU_CALLBACK* = -1;
CONST HBMMENU_MBAR_CLOSE* = 5;
CONST HBMMENU_MBAR_CLOSE_D* = 6;
CONST HBMMENU_MBAR_MINIMIZE* = 3;
CONST HBMMENU_MBAR_MINIMIZE_D* = 7;
CONST HBMMENU_MBAR_RESTORE* = 2;
CONST HBMMENU_POPUP_CLOSE* = 8;
CONST HBMMENU_POPUP_MAXIMIZE* = 10;
CONST HBMMENU_POPUP_MINIMIZE* = 11;
CONST HBMMENU_POPUP_RESTORE* = 9;
CONST HBMMENU_SYSTEM* = 1;
CONST HEAP_CREATE_ENABLE_EXECUTE* = 40000H;
CONST HEAP_GENERATE_EXCEPTIONS* = 4H;
CONST HEAP_NO_SERIALIZE* = 1H;
CONST HEAP_REALLOC_IN_PLACE_ONLY* = 10H;
CONST HEAP_ZERO_MEMORY* = 8H;
CONST HIGH_PRIORITY_CLASS* = 80H;
CONST HOLLOW_BRUSH* = 5;
CONST HORZRES* = 8;
CONST HORZSIZE* = 4;
CONST HS_BDIAGONAL* = 3;
CONST HS_CROSS* = 4;
CONST HS_DIAGCROSS* = 5;
CONST HS_FDIAGONAL* = 2;
CONST HS_HORIZONTAL* = 0;
CONST HS_VERTICAL* = 1;
CONST HWND_BOTTOM* = 1;
CONST HWND_NOTOPMOST* = -2;
CONST HWND_TOP* = 0;
CONST HWND_TOPMOST* = -1;
CONST IDABORT* = 3;
CONST IDANI_CAPTION* = 3;
CONST IDCANCEL* = 2;
CONST IDCLOSE* = 8;
CONST IDCONTINUE* = 11;
CONST IDC_APPSTARTING* = 32650;
CONST IDC_ARROW* = 32512;
CONST IDC_CROSS* = 32515;
CONST IDC_HAND* = 32649;
CONST IDC_HELP* = 32651;
CONST IDC_IBEAM* = 32513;
CONST IDC_ICON* = 32641;
CONST IDC_NO* = 32648;
CONST IDC_SIZE* = 32640;
CONST IDC_SIZEALL* = 32646;
CONST IDC_SIZENESW* = 32643;
CONST IDC_SIZENS* = 32645;
CONST IDC_SIZENWSE* = 32642;
CONST IDC_SIZEWE* = 32644;
CONST IDC_UPARROW* = 32516;
CONST IDC_WAIT* = 32514;
CONST IDHELP* = 9;
CONST IDIGNORE* = 5;
CONST IDI_APPLICATION* = 32512;
CONST IDI_ASTERISK* = 32516;
CONST IDI_ERROR* = 32513;
CONST IDI_EXCLAMATION* = 32515;
CONST IDI_HAND* = 32513;
CONST IDI_INFORMATION* = 32516;
CONST IDI_QUESTION* = 32514;
CONST IDI_SHIELD* = 32518;
CONST IDI_WARNING* = 32515;
CONST IDI_WINLOGO* = 32517;
CONST IDLE_PRIORITY_CLASS* = 40H;
CONST IDNO* = 7;
CONST IDOK* = 1;
CONST IDRETRY* = 4;
CONST IDTRYAGAIN* = 10;
CONST IDYES* = 6;
CONST ILLUMINANT_A* = 1;
CONST ILLUMINANT_B* = 2;
CONST ILLUMINANT_C* = 3;
CONST ILLUMINANT_D50* = 4;
CONST ILLUMINANT_D55* = 5;
CONST ILLUMINANT_D65* = 6;
CONST ILLUMINANT_D75* = 7;
CONST ILLUMINANT_DAYLIGHT* = ILLUMINANT_C;
CONST ILLUMINANT_DEVICE_DEFAULT* = 0;
CONST ILLUMINANT_F2* = 8;
CONST ILLUMINANT_FLUORESCENT* = ILLUMINANT_F2;
CONST ILLUMINANT_MAX_INDEX* = ILLUMINANT_F2;
CONST ILLUMINANT_NTSC* = ILLUMINANT_C;
CONST ILLUMINANT_TUNGSTEN* = ILLUMINANT_A;
CONST INFINITE* = -1;
CONST INIT_ONCE_ASYNC* = 2H;
CONST INIT_ONCE_CHECK_ONLY* = 1H;
CONST INVALID_FILE_ATTRIBUTES* = -1;
CONST INVALID_FILE_SIZE* = -1;
CONST INVALID_HANDLE_VALUE* = -1;
CONST INVALID_SET_FILE_POINTER* = -1;
CONST INVALID_SOCKET* = -1;
CONST IPPROTO_ICMP* = 1;
CONST IPPROTO_ICMPV6* = 58;
CONST IPPROTO_IGMP* = 2;
CONST IPPROTO_RM* = 113;
CONST IPPROTO_TCP* = 6;
CONST IPPROTO_UDP* = 17;
CONST LAYOUT_BITMAPORIENTATIONPRESERVED* = 8;
CONST LAYOUT_BTT* = 2;
CONST LAYOUT_LTR* = 0;
CONST LAYOUT_RTL* = 1;
CONST LAYOUT_VBH* = 4;
CONST LAYOUT_ORIENTATIONMASK* = LAYOUT_RTL + LAYOUT_BTT + LAYOUT_VBH;
CONST LC_INTERIORS* = 128;
CONST LC_MARKER* = 4;
CONST LC_NONE* = 0;
CONST LC_POLYLINE* = 2;
CONST LC_POLYMARKER* = 8;
CONST LC_STYLED* = 32;
CONST LC_WIDE* = 16;
CONST LC_WIDESTYLED* = 64;
CONST LF_FACESIZE* = 32;
CONST LF_FULLFACESIZE* = 64;
CONST LINECAPS* = 30;
CONST LOGPIXELSX* = 88;
CONST LOGPIXELSY* = 90;
CONST LTGRAY_BRUSH* = 1;
CONST MARKPARITY* = 3;
CONST MAXBYTE* = 0FFH;
CONST MAXDWORD* = UNSIGNED32 (0FFFFFFFFH);
CONST MAXWORD* = 0FFFFH;
CONST MB_ABORTRETRYIGNORE* = 2H;
CONST MB_APPLMODAL* = 0H;
CONST MB_CANCELTRYCONTINUE* = 6H;
CONST MB_DEFAULT_DESKTOP_ONLY* = 20000H;
CONST MB_DEFBUTTON1* = 0H;
CONST MB_DEFBUTTON2* = 100H;
CONST MB_DEFBUTTON3* = 200H;
CONST MB_DEFBUTTON4* = 300H;
CONST MB_HELP* = 4000H;
CONST MB_ICONASTERISK* = 40H;
CONST MB_ICONHAND* = 10H;
CONST MB_ICONERROR* = MB_ICONHAND;
CONST MB_ICONEXCLAMATION* = 30H;
CONST MB_ICONINFORMATION* = MB_ICONASTERISK;
CONST MB_ICONQUESTION* = 20H;
CONST MB_ICONSTOP* = MB_ICONHAND;
CONST MB_ICONWARNING* = MB_ICONEXCLAMATION;
CONST MB_NOFOCUS* = 8000H;
CONST MB_OK* = 0H;
CONST MB_OKCANCEL* = 1H;
CONST MB_RETRYCANCEL* = 5H;
CONST MB_RIGHT* = 80000H;
CONST MB_RTLREADING* = 100000H;
CONST MB_SERVICE_NOTIFICATION* = 200000H;
CONST MB_SETFOREGROUND* = 10000H;
CONST MB_SYSTEMMODAL* = 1000H;
CONST MB_TASKMODAL* = 2000H;
CONST MB_TOPMOST* = 40000H;
CONST MB_USERICON* = 80H;
CONST MB_YESNO* = 4H;
CONST MB_YESNOCANCEL* = 3H;
CONST MERGECOPY* = 0C000CAH;
CONST MERGEPAINT* = 0BB0226H;
CONST MF_CHECKED* = 8H;
CONST MFS_CHECKED* = MF_CHECKED;
CONST MF_DEFAULT* = 1000H;
CONST MFS_DEFAULT* = MF_DEFAULT;
CONST MFS_GRAYED* = 3H;
CONST MFS_DISABLED* = MFS_GRAYED;
CONST MF_ENABLED* = 0H;
CONST MFS_ENABLED* = MF_ENABLED;
CONST MF_HILITE* = 80H;
CONST MFS_HILITE* = MF_HILITE;
CONST MF_UNCHECKED* = 0H;
CONST MFS_UNCHECKED* = MF_UNCHECKED;
CONST MF_UNHILITE* = 0H;
CONST MFS_UNHILITE* = MF_UNHILITE;
CONST MF_BITMAP* = 4H;
CONST MFT_BITMAP* = MF_BITMAP;
CONST MF_MENUBARBREAK* = 20H;
CONST MFT_MENUBARBREAK* = MF_MENUBARBREAK;
CONST MF_MENUBREAK* = 40H;
CONST MFT_MENUBREAK* = MF_MENUBREAK;
CONST MF_OWNERDRAW* = 100H;
CONST MFT_OWNERDRAW* = MF_OWNERDRAW;
CONST MFT_RADIOCHECK* = 200H;
CONST MF_RIGHTJUSTIFY* = 4000H;
CONST MFT_RIGHTJUSTIFY* = MF_RIGHTJUSTIFY;
CONST MFT_RIGHTORDER* = 2000H;
CONST MF_SEPARATOR* = 800H;
CONST MFT_SEPARATOR* = MF_SEPARATOR;
CONST MF_STRING* = 0H;
CONST MFT_STRING* = MF_STRING;
CONST MF_APPEND* = 100H;
CONST MF_BYCOMMAND* = 0H;
CONST MF_BYPOSITION* = 400H;
CONST MF_CHANGE* = 80H;
CONST MF_DELETE* = 200H;
CONST MF_DISABLED* = 2H;
CONST MF_GRAYED* = 1H;
CONST MF_HELP* = 4000H;
CONST MF_INSERT* = 0H;
CONST MF_POPUP* = 10H;
CONST MF_REMOVE* = 1000H;
CONST MF_SYSMENU* = 2000H;
CONST MF_USECHECKBITMAPS* = 200H;
CONST MIIM_BITMAP* = 80H;
CONST MIIM_CHECKMARKS* = 8H;
CONST MIIM_DATA* = 20H;
CONST MIIM_FTYPE* = 100H;
CONST MIIM_ID* = 2H;
CONST MIIM_STATE* = 1H;
CONST MIIM_STRING* = 40H;
CONST MIIM_SUBMENU* = 4H;
CONST MIIM_TYPE* = 10H;
CONST MM_ANISOTROPIC* = 8;
CONST MM_HIENGLISH* = 5;
CONST MM_HIMETRIC* = 3;
CONST MM_ISOTROPIC* = 7;
CONST MM_LOENGLISH* = 4;
CONST MM_LOMETRIC* = 2;
CONST MM_MAX_NUMAXES* = 16;
CONST MM_TEXT* = 1;
CONST MM_TWIPS* = 6;
CONST MN_GETHMENU* = 1E1H;
CONST MONITOR_DEFAULTTONEAREST* = 2H;
CONST MONITOR_DEFAULTTONULL* = 0H;
CONST MONITOR_DEFAULTTOPRIMARY* = 1H;
CONST MOUSEEVENTF_ABSOLUTE* = 8000H;
CONST MOUSEEVENTF_HWHEEL* = 1000H;
CONST MOUSEEVENTF_LEFTDOWN* = 2H;
CONST MOUSEEVENTF_LEFTUP* = 4H;
CONST MOUSEEVENTF_MIDDLEDOWN* = 20H;
CONST MOUSEEVENTF_MIDDLEUP* = 40H;
CONST MOUSEEVENTF_MOVE* = 1H;
CONST MOUSEEVENTF_RIGHTDOWN* = 8H;
CONST MOUSEEVENTF_RIGHTUP* = 10H;
CONST MOUSEEVENTF_WHEEL* = 800H;
CONST MOUSEEVENTF_XDOWN* = 80H;
CONST MOUSEEVENTF_XUP* = 100H;
CONST MSG_DONTROUTE* = 4H;
CONST MSG_OOB* = 1H;
CONST MSG_PARTIAL* = 8000H;
CONST MSG_PEEK* = 2H;
CONST MS_CTS_ON* = 10H;
CONST MS_DSR_ON* = 20H;
CONST MS_RING_ON* = 40H;
CONST MS_RLSD_ON* = 80H;
CONST MWT_IDENTITY* = 1;
CONST MWT_LEFTMULTIPLY* = 2;
CONST MWT_RIGHTMULTIPLY* = 3;
CONST NFR_ANSI* = 1;
CONST NFR_UNICODE* = 2;
CONST NF_QUERY* = 3;
CONST NF_REQUERY* = 4;
CONST NOMIRRORBITMAP* = 80000000H;
CONST NOPARITY* = 0;
CONST NORMAL_PRIORITY_CLASS* = 20H;
CONST NOTSRCCOPY* = 330008H;
CONST NOTSRCERASE* = 1100A6H;
CONST NULL* = 0;
CONST NULLREGION* = 1;
CONST NULL_BRUSH* = 5;
CONST NULL_PEN* = 8;
CONST NUMBRUSHES* = 16;
CONST NUMCOLORS* = 24;
CONST NUMFONTS* = 22;
CONST NUMMARKERS* = 20;
CONST NUMPENS* = 18;
CONST NUMRESERVED* = 106;
CONST OBJ_BITMAP* = 7;
CONST OBJ_BRUSH* = 2;
CONST OBJ_COLORSPACE* = 14;
CONST OBJ_DC* = 3;
CONST OBJ_ENHMETADC* = 12;
CONST OBJ_ENHMETAFILE* = 13;
CONST OBJ_EXTPEN* = 11;
CONST OBJ_FONT* = 6;
CONST OBJ_MEMDC* = 10;
CONST OBJ_METADC* = 4;
CONST OBJ_METAFILE* = 9;
CONST OBJ_PAL* = 5;
CONST OBJ_PEN* = 1;
CONST OBJ_REGION* = 8;
CONST ODDPARITY* = 1;
CONST OEM_FIXED_FONT* = 10;
CONST ONE5STOPBITS* = 1;
CONST ONESTOPBIT* = 0;
CONST OPAQUE* = 2;
CONST OPEN_ALWAYS* = 4;
CONST OPEN_EXISTING* = 3;
CONST ORIENTATION_PREFERENCE_LANDSCAPE* = 1;
CONST ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED* = 3;
CONST ORIENTATION_PREFERENCE_NONE* = 0;
CONST ORIENTATION_PREFERENCE_PORTRAIT* = 2;
CONST ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED* = 4;
CONST PARITY_EVEN* = 400H;
CONST PARITY_MARK* = 800H;
CONST PARITY_NONE* = 100H;
CONST PARITY_ODD* = 200H;
CONST PARITY_SPACE* = 1000H;
CONST PATCOPY* = 0F00021H;
CONST PATH_MAX* = 260;
CONST PATINVERT* = 5A0049H;
CONST PATPAINT* = 0FB0A09H;
CONST PBTF_APMRESUMEFROMFAILURE* = 1H;
CONST PBT_APMBATTERYLOW* = 9H;
CONST PBT_APMOEMEVENT* = 0BH;
CONST PBT_APMPOWERSTATUSCHANGE* = 0AH;
CONST PBT_APMQUERYSTANDBY* = 01H;
CONST PBT_APMQUERYSTANDBYFAILED* = 3H;
CONST PBT_APMQUERYSUSPEND* = 0H;
CONST PBT_APMQUERYSUSPENDFAILED* = 2H;
CONST PBT_APMRESUMEAUTOMATIC* = 12H;
CONST PBT_APMRESUMECRITICAL* = 6H;
CONST PBT_APMRESUMESTANDBY* = 8H;
CONST PBT_APMRESUMESUSPEND* = 7H;
CONST PBT_APMSTANDBY* = 5H;
CONST PBT_APMSUSPEND* = 4H;
CONST PCF_16BITMODE* = 200H;
CONST PCF_DTRDSR* = 1H;
CONST PCF_INTTIMEOUTS* = 80H;
CONST PCF_PARITY_CHECK* = 8H;
CONST PCF_RLSD* = 4H;
CONST PCF_RTSCTS* = 2H;
CONST PCF_SETXCHAR* = 20H;
CONST PCF_SPECIALCHARS* = 100H;
CONST PCF_TOTALTIMEOUTS* = 40H;
CONST PCF_XONXOFF* = 10H;
CONST PC_INTERIORS* = 128;
CONST PC_NONE* = 0;
CONST PC_PATHS* = 512;
CONST PC_POLYGON* = 1;
CONST PC_POLYPOLYGON* = 256;
CONST PC_RECTANGLE* = 2;
CONST PC_SCANLINE* = 8;
CONST PC_STYLED* = 32;
CONST PC_TRAPEZOID* = 4;
CONST PC_WIDE* = 16;
CONST PC_WIDESTYLED* = 64;
CONST PC_WINDPOLYGON* = 4;
CONST PDEVICESIZE* = 26;
CONST PHYSICALHEIGHT* = 111;
CONST PHYSICALOFFSETX* = 112;
CONST PHYSICALOFFSETY* = 113;
CONST PHYSICALWIDTH* = 110;
CONST PLANES* = 14;
CONST POLYGONALCAPS* = 32;
CONST PROCESSOR_ARCHITECTURE_AMD64* = 9;
CONST PROCESSOR_ARCHITECTURE_ARM* = 5;
CONST PROCESSOR_ARCHITECTURE_IA64* = 6;
CONST PROCESSOR_ARCHITECTURE_INTEL* = 0;
CONST PROCESSOR_ARCHITECTURE_UNKNOWN* = 0FFFFH;
CONST PROCESS_HEAP_ENTRY_BUSY* = 4H;
CONST PROCESS_HEAP_ENTRY_DDESHARE* = 20H;
CONST PROCESS_HEAP_ENTRY_MOVEABLE* = 10H;
CONST PROCESS_HEAP_REGION* = 1H;
CONST PROCESS_HEAP_UNCOMMITTED_RANGE* = 2H;
CONST PROCESS_MODE_BACKGROUND_BEGIN* = 100000H;
CONST PROCESS_MODE_BACKGROUND_END* = 200000H;
CONST PST_FAX* = 21H;
CONST PST_LAT* = 101H;
CONST PST_MODEM* = 6H;
CONST PST_NETWORK_BRIDGE* = 100H;
CONST PST_PARALLELPORT* = 2H;
CONST PST_RS232* = 1H;
CONST PST_RS422* = 3H;
CONST PST_RS423* = 4H;
CONST PST_RS449* = 5H;
CONST PST_SCANNER* = 22H;
CONST PST_TCPIP_TELNET* = 102H;
CONST PST_UNSPECIFIED* = 0H;
CONST PST_X25* = 103H;
CONST PS_DASH* = 1;
CONST PS_DASHDOT* = 3;
CONST PS_DASHDOTDOT* = 4;
CONST PS_DOT* = 2;
CONST PS_INSIDEFRAME* = 6;
CONST PS_NULL* = 5;
CONST PS_SOLID* = 0;
CONST PURGE_RXABORT* = 2H;
CONST PURGE_RXCLEAR* = 8H;
CONST PURGE_TXABORT* = 1H;
CONST PURGE_TXCLEAR* = 4H;
CONST PWR_CRITICALRESUME* = 3;
CONST PWR_FAIL* = -1;
CONST PWR_OK* = 1;
CONST PWR_SUSPENDREQUEST* = 1;
CONST PWR_SUSPENDRESUME* = 2;
CONST R2_BLACK* = 1;
CONST R2_COPYPEN* = 13;
CONST R2_MASKNOTPEN* = 3;
CONST R2_MASKPEN* = 9;
CONST R2_MASKPENNOT* = 5;
CONST R2_MERGENOTPEN* = 12;
CONST R2_MERGEPEN* = 15;
CONST R2_MERGEPENNOT* = 14;
CONST R2_NOP* = 11;
CONST R2_NOT* = 6;
CONST R2_NOTCOPYPEN* = 4;
CONST R2_NOTMASKPEN* = 8;
CONST R2_NOTMERGEPEN* = 2;
CONST R2_NOTXORPEN* = 10;
CONST R2_WHITE* = 16;
CONST R2_XORPEN* = 7;
CONST RASTERCAPS* = 38;
CONST RC_BANDING* = 2;
CONST RC_BIGFONT* = 1024;
CONST RC_BITBLT* = 1;
CONST RC_BITMAP64* = 8;
CONST RC_DEVBITS* = 8000H;
CONST RC_DIBTODEV* = 512;
CONST RC_DI_BITMAP* = 128;
CONST RC_FLOODFILL* = 4096;
CONST RC_GDI20_OUTPUT* = 16;
CONST RC_GDI20_STATE* = 32;
CONST RC_NONE* = 0;
CONST RC_OP_DX_OUTPUT* = 4000H;
CONST RC_PALETTE* = 256;
CONST RC_SAVEBITMAP* = 64;
CONST RC_SCALING* = 4;
CONST RC_STRETCHBLT* = 2048;
CONST RC_STRETCHDIB* = 8192;
CONST REALTIME_PRIORITY_CLASS* = 100H;
CONST RGN_AND* = 1;
CONST RGN_COPY* = 5;
CONST RGN_DIFF* = 4;
CONST RGN_OR* = 2;
CONST RGN_XOR* = 3;
CONST RTS_CONTROL_DISABLE* = 0H;
CONST RTS_CONTROL_ENABLE* = 1H;
CONST RTS_CONTROL_HANDSHAKE* = 2H;
CONST RTS_CONTROL_TOGGLE* = 3H;
CONST SB_CONST_ALPHA* = 1H;
CONST SB_GRAD_RECT* = 10H;
CONST SB_GRAD_TRI* = 20H;
CONST SB_NONE* = 0H;
CONST SB_PIXEL_ALPHA* = 2H;
CONST SB_PREMULT_ALPHA* = 4H;
CONST SCALINGFACTORX* = 114;
CONST SCALINGFACTORY* = 115;
CONST SD_BOTH* = 2;
CONST SD_RECEIVE* = 0;
CONST SD_SEND* = 1;
CONST SHADEBLENDCAPS* = 120;
CONST SIMPLEREGION* = 2;
CONST SIZEPALETTE* = 104;
CONST SOCKET_ERROR* = -1;
CONST SOCK_DGRAM* = 2;
CONST SOCK_RAW* = 3;
CONST SOCK_RDM* = 4;
CONST SOCK_SEQPACKET* = 5;
CONST SOCK_STREAM* = 1;
CONST SOMAXCONN* = 7FFFFFFFH;
CONST SPACEPARITY* = 4;
CONST SPECIFIC_RIGHTS_ALL* = 0FFFFH;
CONST SP_BAUD* = 2H;
CONST SP_DATABITS* = 4H;
CONST SP_HANDSHAKING* = 10H;
CONST SP_PARITY* = 1H;
CONST SP_PARITY_CHECK* = 20H;
CONST SP_RLSD* = 40H;
CONST SP_STOPBITS* = 8H;
CONST SRCAND* = 8800C6H;
CONST SRCCOPY* = 0CC0020H;
CONST SRCERASE* = 440328H;
CONST SRCINVERT* = 660046H;
CONST SRCPAINT* = 0EE0086H;
CONST STANDARD_RIGHTS_ALL* = DELETE + READ_CONTROL + WRITE_DAC + WRITE_OWNER + SYNCHRONIZE;
CONST STD_ERROR_HANDLE* = -12;
CONST STD_INPUT_HANDLE* = -10;
CONST STD_OUTPUT_HANDLE* = -11;
CONST STOPBITS_10* = 1H;
CONST STOPBITS_15* = 2H;
CONST STOPBITS_20* = 4H;
CONST STRETCH_ANDSCANS* = 1;
CONST STRETCH_DELETESCANS* = 3;
CONST STRETCH_HALFTONE* = 4;
CONST STRETCH_ORSCANS* = 2;
CONST SWP_ASYNCWINDOWPOS* = 4000H;
CONST SWP_DEFERERASE* = 2000H;
CONST SWP_FRAMECHANGED* = 20H;
CONST SWP_DRAWFRAME* = SWP_FRAMECHANGED;
CONST SWP_HIDEWINDOW* = 80H;
CONST SWP_NOACTIVATE* = 10H;
CONST SWP_NOCOPYBITS* = 100H;
CONST SWP_NOMOVE* = 2H;
CONST SWP_NOOWNERZORDER* = 200H;
CONST SWP_NOREDRAW* = 8H;
CONST SWP_NOREPOSITION* = SWP_NOOWNERZORDER;
CONST SWP_NOSENDCHANGING* = 400H;
CONST SWP_NOSIZE* = 1H;
CONST SWP_NOZORDER* = 4H;
CONST SWP_SHOWWINDOW* = 40H;
CONST SW_FORCEMINIMIZE* = 11;
CONST SW_HIDE* = 0;
CONST SW_MAXIMIZE* = 3;
CONST SW_MINIMIZE* = 6;
CONST SW_RESTORE* = 9;
CONST SW_SHOW* = 5;
CONST SW_SHOWDEFAULT* = 10;
CONST SW_SHOWMAXIMIZED* = 3;
CONST SW_SHOWMINIMIZED* = 2;
CONST SW_SHOWMINNOACTIVE* = 7;
CONST SW_SHOWNA* = 8;
CONST SW_SHOWNOACTIVATE* = 4;
CONST SW_SHOWNORMAL* = 1;
CONST SYSPAL_ERROR* = 0;
CONST SYSPAL_NOSTATIC* = 2;
CONST SYSPAL_NOSTATIC256* = 3;
CONST SYSPAL_STATIC* = 1;
CONST SYSRGN* = 4;
CONST SYSTEM_FIXED_FONT* = 16;
CONST SYSTEM_FONT* = 13;
CONST TA_BASELINE* = 24;
CONST TA_BOTTOM* = 8;
CONST TA_CENTER* = 6;
CONST TA_LEFT* = 0;
CONST TA_NOUPDATECP* = 0;
CONST TA_RIGHT* = 2;
CONST TA_RTLREADING* = 256;
CONST TA_TOP* = 0;
CONST TA_UPDATECP* = 1;
CONST TC_CP_STROKE* = 4;
CONST TC_CR_90* = 8;
CONST TC_CR_ANY* = 16;
CONST TC_EA_DOUBLE* = 512;
CONST TC_IA_ABLE* = 1024;
CONST TC_OP_CHARACTER* = 1;
CONST TC_OP_STROKE* = 2;
CONST TC_RA_ABLE* = 8192;
CONST TC_RESERVED* = 32768;
CONST TC_SA_CONTIN* = 256;
CONST TC_SA_DOUBLE* = 64;
CONST TC_SA_INTEGER* = 128;
CONST TC_SCROLLBLT* = 65536;
CONST TC_SF_X_YINDEP* = 32;
CONST TC_SO_ABLE* = 4096;
CONST TC_UA_ABLE* = 2048;
CONST TC_VA_ABLE* = 16384;
CONST TECHNOLOGY* = 2;
CONST TEXTCAPS* = 34;
CONST TIMERV_DEFAULT_COALESCING* = 0H;
CONST TIMERV_NO_COALESCING* = 0FFFFFFFFH;
CONST TRANSPARENT* = 1;
CONST TRUE* = 1;
CONST TRUNCATE_EXISTING* = 5;
CONST TWOSTOPBITS* = 2;
CONST UISF_ACTIVE* = 4H;
CONST UISF_HIDEACCEL* = 2H;
CONST UISF_HIDEFOCUS* = 1H;
CONST UIS_CLEAR* = 2;
CONST UIS_INITIALIZE* = 3;
CONST UIS_SET* = 1;
CONST USER_TIMER_MAXIMUM* = 7FFFFFFFH;
CONST USER_TIMER_MINIMUM* = 0AH;
CONST VERTRES* = 10;
CONST VERTSIZE* = 6;
CONST VREFRESH* = 116;
CONST WAIT_ABANDONED* = 80H;
CONST WAIT_FAILED* = -1;
CONST WAIT_OBJECT_0* = 0H;
CONST WAIT_TIMEOUT* = 102H;
CONST WA_ACTIVE* = 1;
CONST WA_CLICKACTIVE* = 2;
CONST WA_INACTIVE* = 0;
CONST WHITENESS* = 0FF0062H;
CONST WHITEONBLACK* = 2;
CONST WHITE_BRUSH* = 0;
CONST WHITE_PEN* = 6;
CONST WINDING* = 2;
CONST WMSZ_BOTTOM* = 6;
CONST WMSZ_BOTTOMLEFT* = 7;
CONST WMSZ_BOTTOMRIGHT* = 8;
CONST WMSZ_LEFT* = 1;
CONST WMSZ_RIGHT* = 2;
CONST WMSZ_TOP* = 3;
CONST WMSZ_TOPLEFT* = 4;
CONST WMSZ_TOPRIGHT* = 5;
CONST WM_ACTIVATE* = 6H;
CONST WM_ACTIVATEAPP* = 1CH;
CONST WM_AFXFIRST* = 360H;
CONST WM_AFXLAST* = 37FH;
CONST WM_APP* = 8000H;
CONST WM_APPCOMMAND* = 319H;
CONST WM_ASKCBFORMATNAME* = 30CH;
CONST WM_CANCELJOURNAL* = 4BH;
CONST WM_CANCELMODE* = 1FH;
CONST WM_CAPTURECHANGED* = 215H;
CONST WM_CHANGECBCHAIN* = 30DH;
CONST WM_CHANGEUISTATE* = 127H;
CONST WM_CHAR* = 102H;
CONST WM_CHARTOITEM* = 2FH;
CONST WM_CHILDACTIVATE* = 22H;
CONST WM_CLEAR* = 303H;
CONST WM_CLOSE* = 10H;
CONST WM_COMMAND* = 111H;
CONST WM_COMMNOTIFY* = 44H;
CONST WM_COMPACTING* = 41H;
CONST WM_COMPAREITEM* = 39H;
CONST WM_CONTEXTMENU* = 7BH;
CONST WM_COPY* = 301H;
CONST WM_COPYDATA* = 4AH;
CONST WM_CREATE* = 1H;
CONST WM_CTLCOLORBTN* = 135H;
CONST WM_CTLCOLORDLG* = 136H;
CONST WM_CTLCOLOREDIT* = 133H;
CONST WM_CTLCOLORLISTBOX* = 134H;
CONST WM_CTLCOLORMSGBOX* = 132H;
CONST WM_CTLCOLORSCROLLBAR* = 137H;
CONST WM_CTLCOLORSTATIC* = 138H;
CONST WM_CUT* = 300H;
CONST WM_DEADCHAR* = 103H;
CONST WM_DELETEITEM* = 2DH;
CONST WM_DESTROY* = 2H;
CONST WM_DESTROYCLIPBOARD* = 307H;
CONST WM_DEVICECHANGE* = 219H;
CONST WM_DEVMODECHANGE* = 1BH;
CONST WM_DISPLAYCHANGE* = 7EH;
CONST WM_DRAWCLIPBOARD* = 308H;
CONST WM_DRAWITEM* = 2BH;
CONST WM_DROPFILES* = 233H;
CONST WM_ENABLE* = 0AH;
CONST WM_ENDSESSION* = 16H;
CONST WM_ENTERIDLE* = 121H;
CONST WM_ENTERMENULOOP* = 211H;
CONST WM_ENTERSIZEMOVE* = 231H;
CONST WM_ERASEBKGND* = 14H;
CONST WM_EXITMENULOOP* = 212H;
CONST WM_EXITSIZEMOVE* = 232H;
CONST WM_FONTCHANGE* = 1DH;
CONST WM_GETDLGCODE* = 87H;
CONST WM_GETFONT* = 31H;
CONST WM_GETHOTKEY* = 33H;
CONST WM_GETICON* = 7FH;
CONST WM_GETMINMAXINFO* = 24H;
CONST WM_GETOBJECT* = 3DH;
CONST WM_GETTEXT* = 0DH;
CONST WM_GETTEXTLENGTH* = 0EH;
CONST WM_HANDHELDFIRST* = 358H;
CONST WM_HANDHELDLAST* = 35FH;
CONST WM_HELP* = 53H;
CONST WM_HOTKEY* = 312H;
CONST WM_HSCROLL* = 114H;
CONST WM_HSCROLLCLIPBOARD* = 30EH;
CONST WM_ICONERASEBKGND* = 27H;
CONST WM_IME_CHAR* = 286H;
CONST WM_IME_COMPOSITION* = 10FH;
CONST WM_IME_COMPOSITIONFULL* = 284H;
CONST WM_IME_CONTROL* = 283H;
CONST WM_IME_ENDCOMPOSITION* = 10EH;
CONST WM_IME_KEYDOWN* = 290H;
CONST WM_IME_KEYLAST* = 10FH;
CONST WM_IME_KEYUP* = 291H;
CONST WM_IME_NOTIFY* = 282H;
CONST WM_IME_REQUEST* = 288H;
CONST WM_IME_SELECT* = 285H;
CONST WM_IME_SETCONTEXT* = 281H;
CONST WM_IME_STARTCOMPOSITION* = 10DH;
CONST WM_INITDIALOG* = 110H;
CONST WM_INITMENU* = 116H;
CONST WM_INITMENUPOPUP* = 117H;
CONST WM_INPUT* = 0FFH;
CONST WM_INPUTLANGCHANGE* = 51H;
CONST WM_INPUTLANGCHANGEREQUEST* = 50H;
CONST WM_KEYDOWN* = 100H;
CONST WM_KEYFIRST* = 100H;
CONST WM_KEYUP* = 101H;
CONST WM_KILLFOCUS* = 8H;
CONST WM_LBUTTONDBLCLK* = 203H;
CONST WM_LBUTTONDOWN* = 201H;
CONST WM_LBUTTONUP* = 202H;
CONST WM_MBUTTONDBLCLK* = 209H;
CONST WM_MBUTTONDOWN* = 207H;
CONST WM_MBUTTONUP* = 208H;
CONST WM_MDIACTIVATE* = 222H;
CONST WM_MDICASCADE* = 227H;
CONST WM_MDICREATE* = 220H;
CONST WM_MDIDESTROY* = 221H;
CONST WM_MDIGETACTIVE* = 229H;
CONST WM_MDIICONARRANGE* = 228H;
CONST WM_MDIMAXIMIZE* = 225H;
CONST WM_MDINEXT* = 224H;
CONST WM_MDIREFRESHMENU* = 234H;
CONST WM_MDIRESTORE* = 223H;
CONST WM_MDISETMENU* = 230H;
CONST WM_MDITILE* = 226H;
CONST WM_MEASUREITEM* = 2CH;
CONST WM_MENUCHAR* = 120H;
CONST WM_MENUCOMMAND* = 126H;
CONST WM_MENUDRAG* = 123H;
CONST WM_MENUGETOBJECT* = 124H;
CONST WM_MENURBUTTONUP* = 122H;
CONST WM_MENUSELECT* = 11FH;
CONST WM_MOUSEACTIVATE* = 21H;
CONST WM_MOUSEFIRST* = 200H;
CONST WM_MOUSEHOVER* = 2A1H;
CONST WM_MOUSELEAVE* = 2A3H;
CONST WM_MOUSEMOVE* = 200H;
CONST WM_MOUSEWHEEL* = 20AH;
CONST WM_MOVE* = 3H;
CONST WM_MOVING* = 216H;
CONST WM_NCACTIVATE* = 86H;
CONST WM_NCCALCSIZE* = 83H;
CONST WM_NCCREATE* = 81H;
CONST WM_NCDESTROY* = 82H;
CONST WM_NCHITTEST* = 84H;
CONST WM_NCLBUTTONDBLCLK* = 0A3H;
CONST WM_NCLBUTTONDOWN* = 0A1H;
CONST WM_NCLBUTTONUP* = 0A2H;
CONST WM_NCMBUTTONDBLCLK* = 0A9H;
CONST WM_NCMBUTTONDOWN* = 0A7H;
CONST WM_NCMBUTTONUP* = 0A8H;
CONST WM_NCMOUSEHOVER* = 2A0H;
CONST WM_NCMOUSELEAVE* = 2A2H;
CONST WM_NCMOUSEMOVE* = 0A0H;
CONST WM_NCPAINT* = 85H;
CONST WM_NCRBUTTONDBLCLK* = 0A6H;
CONST WM_NCRBUTTONDOWN* = 0A4H;
CONST WM_NCRBUTTONUP* = 0A5H;
CONST WM_NCXBUTTONDBLCLK* = 0ADH;
CONST WM_NCXBUTTONDOWN* = 0ABH;
CONST WM_NCXBUTTONUP* = 0ACH;
CONST WM_NEXTDLGCTL* = 28H;
CONST WM_NEXTMENU* = 213H;
CONST WM_NOTIFY* = 4EH;
CONST WM_NOTIFYFORMAT* = 55H;
CONST WM_NULL* = 0H;
CONST WM_PAINT* = 0FH;
CONST WM_PAINTCLIPBOARD* = 309H;
CONST WM_PAINTICON* = 26H;
CONST WM_PALETTECHANGED* = 311H;
CONST WM_PALETTEISCHANGING* = 310H;
CONST WM_PARENTNOTIFY* = 210H;
CONST WM_PASTE* = 302H;
CONST WM_PENWINFIRST* = 380H;
CONST WM_PENWINLAST* = 38FH;
CONST WM_POWER* = 48H;
CONST WM_POWERBROADCAST* = 218H;
CONST WM_PRINT* = 317H;
CONST WM_PRINTCLIENT* = 318H;
CONST WM_QUERYDRAGICON* = 37H;
CONST WM_QUERYENDSESSION* = 11H;
CONST WM_QUERYNEWPALETTE* = 30FH;
CONST WM_QUERYOPEN* = 13H;
CONST WM_QUERYUISTATE* = 129H;
CONST WM_QUEUESYNC* = 23H;
CONST WM_QUIT* = 12H;
CONST WM_RBUTTONDBLCLK* = 206H;
CONST WM_RBUTTONDOWN* = 204H;
CONST WM_RBUTTONUP* = 205H;
CONST WM_RENDERALLFORMATS* = 306H;
CONST WM_RENDERFORMAT* = 305H;
CONST WM_SETCURSOR* = 20H;
CONST WM_SETFOCUS* = 7H;
CONST WM_SETFONT* = 30H;
CONST WM_SETHOTKEY* = 32H;
CONST WM_SETICON* = 80H;
CONST WM_SETREDRAW* = 0BH;
CONST WM_SETTEXT* = 0CH;
CONST WM_WININICHANGE* = 1AH;
CONST WM_SETTINGCHANGE* = WM_WININICHANGE;
CONST WM_SHOWWINDOW* = 18H;
CONST WM_SIZE* = 5H;
CONST WM_SIZECLIPBOARD* = 30BH;
CONST WM_SIZING* = 214H;
CONST WM_SPOOLERSTATUS* = 2AH;
CONST WM_STYLECHANGED* = 7DH;
CONST WM_STYLECHANGING* = 7CH;
CONST WM_SYNCPAINT* = 88H;
CONST WM_SYSCHAR* = 106H;
CONST WM_SYSCOLORCHANGE* = 15H;
CONST WM_SYSCOMMAND* = 112H;
CONST WM_SYSDEADCHAR* = 107H;
CONST WM_SYSKEYDOWN* = 104H;
CONST WM_SYSKEYUP* = 105H;
CONST WM_TABLET_FIRST* = 2C0H;
CONST WM_TABLET_LAST* = 2DFH;
CONST WM_TCARD* = 52H;
CONST WM_THEMECHANGED* = 31AH;
CONST WM_TIMECHANGE* = 1EH;
CONST WM_TIMER* = 113H;
CONST WM_UNDO* = 304H;
CONST WM_UNINITMENUPOPUP* = 125H;
CONST WM_UPDATEUISTATE* = 128H;
CONST WM_USER* = 400H;
CONST WM_USERCHANGED* = 54H;
CONST WM_VKEYTOITEM* = 2EH;
CONST WM_VSCROLL* = 115H;
CONST WM_VSCROLLCLIPBOARD* = 30AH;
CONST WM_WINDOWPOSCHANGED* = 47H;
CONST WM_WINDOWPOSCHANGING* = 46H;
CONST WM_WTSSESSION_CHANGE* = 2B1H;
CONST WM_XBUTTONDBLCLK* = 20DH;
CONST WM_XBUTTONDOWN* = 20BH;
CONST WM_XBUTTONUP* = 20CH;
CONST WSADESCRIPTION_LEN* = 256;
CONST WSAEACCES* = 10013;
CONST WSAEADDRINUSE* = 10048;
CONST WSAEADDRNOTAVAIL* = 10049;
CONST WSAEAFNOSUPPORT* = 10047;
CONST WSAEALREADY* = 10037;
CONST WSAEBADF* = 10009;
CONST WSAECANCELLED* = 10103;
CONST WSAECONNABORTED* = 10053;
CONST WSAECONNREFUSED* = 10061;
CONST WSAECONNRESET* = 10054;
CONST WSAEDESTADDRREQ* = 10039;
CONST WSAEDISCON* = 10101;
CONST WSAEDQUOT* = 10069;
CONST WSAEFAULT* = 10014;
CONST WSAEHOSTDOWN* = 10064;
CONST WSAEHOSTUNREACH* = 10065;
CONST WSAEINPROGRESS* = 10036;
CONST WSAEINTR* = 10004;
CONST WSAEINVAL* = 10022;
CONST WSAEINVALIDPROCTABLE* = 10104;
CONST WSAEINVALIDPROVIDER* = 10105;
CONST WSAEISCONN* = 10056;
CONST WSAELOOP* = 10062;
CONST WSAEMFILE* = 10024;
CONST WSAEMSGSIZE* = 10040;
CONST WSAENAMETOOLONG* = 10063;
CONST WSAENETDOWN* = 10050;
CONST WSAENETRESET* = 10052;
CONST WSAENETUNREACH* = 10051;
CONST WSAENOBUFS* = 10055;
CONST WSAENOMORE* = 10102;
CONST WSAENOPROTOOPT* = 10042;
CONST WSAENOTCONN* = 10057;
CONST WSAENOTEMPTY* = 10066;
CONST WSAENOTSOCK* = 10038;
CONST WSAEOPNOTSUPP* = 10045;
CONST WSAEPFNOSUPPORT* = 10046;
CONST WSAEPROCLIM* = 10067;
CONST WSAEPROTONOSUPPORT* = 10043;
CONST WSAEPROTOTYPE* = 10041;
CONST WSAEPROVIDERFAILEDINIT* = 10106;
CONST WSAEREFUSED* = 10112;
CONST WSAEREMOTE* = 10071;
CONST WSAESHUTDOWN* = 10058;
CONST WSAESOCKTNOSUPPORT* = 10044;
CONST WSAESTALE* = 10070;
CONST WSAETIMEDOUT* = 10060;
CONST WSAETOOMANYREFS* = 10059;
CONST WSAEUSERS* = 10068;
CONST WSAEWOULDBLOCK* = 10035;
CONST WSAHOST_NOT_FOUND* = 11001;
CONST WSANOTINITIALISED* = 10093;
CONST WSANO_DATA* = 11004;
CONST WSANO_RECOVERY* = 11003;
CONST WSASERVICE_NOT_FOUND* = 10108;
CONST WSASYSCALLFAILURE* = 10107;
CONST WSASYSNOTREADY* = 10091;
CONST WSASYS_STATUS_LEN* = 128;
CONST WSATRY_AGAIN* = 11002;
CONST WSATYPE_NOT_FOUND* = 10109;
CONST WSAVERNOTSUPPORTED* = 10092;
CONST WSA_E_CANCELLED* = 10111;
CONST WSA_E_NO_MORE* = 10110;
CONST WSA_INVALID_HANDLE* = 6;
CONST WSA_INVALID_PARAMETER* = 87;
CONST WSA_IO_INCOMPLETE* = 996;
CONST WSA_IO_PENDING* = 997;
CONST WSA_NOT_ENOUGH_MEMORY* = 8;
CONST WSA_OPERATION_ABORTED* = 995;
CONST WSA_QOS_ADMISSION_FAILURE* = 11010;
CONST WSA_QOS_BAD_OBJECT* = 11013;
CONST WSA_QOS_BAD_STYLE* = 11012;
CONST WSA_QOS_EFILTERCOUNT* = 11021;
CONST WSA_QOS_EFILTERSTYLE* = 11019;
CONST WSA_QOS_EFILTERTYPE* = 11020;
CONST WSA_QOS_EFLOWCOUNT* = 11023;
CONST WSA_QOS_EFLOWDESC* = 11026;
CONST WSA_QOS_EFLOWSPEC* = 11017;
CONST WSA_QOS_EOBJLENGTH* = 11022;
CONST WSA_QOS_EPOLICYOBJ* = 11025;
CONST WSA_QOS_EPROVSPECBUF* = 11018;
CONST WSA_QOS_EPSFILTERSPEC* = 11028;
CONST WSA_QOS_EPSFLOWSPEC* = 11027;
CONST WSA_QOS_ESDMODEOBJ* = 11029;
CONST WSA_QOS_ESERVICETYPE* = 11016;
CONST WSA_QOS_ESHAPERATEOBJ* = 11030;
CONST WSA_QOS_EUNKOWNPSOBJ* = 11024;
CONST WSA_QOS_GENERIC_ERROR* = 11015;
CONST WSA_QOS_NO_RECEIVERS* = 11008;
CONST WSA_QOS_NO_SENDERS* = 11007;
CONST WSA_QOS_POLICY_FAILURE* = 11011;
CONST WSA_QOS_RECEIVERS* = 11005;
CONST WSA_QOS_REQUEST_CONFIRMED* = 11009;
CONST WSA_QOS_RESERVED_PETYPE* = 11031;
CONST WSA_QOS_SENDERS* = 11006;
CONST WSA_QOS_TRAFFIC_CTRL_ERROR* = 11014;
CONST WS_BORDER* = 800000H;
CONST WS_CAPTION* = 0C00000H;
CONST WS_CHILD* = 40000000H;
CONST WS_CHILDWINDOW* = WS_CHILD;
CONST WS_CLIPCHILDREN* = 2000000H;
CONST WS_CLIPSIBLINGS* = 4000000H;
CONST WS_DISABLED* = 8000000H;
CONST WS_DLGFRAME* = 400000H;
CONST WS_EX_ACCEPTFILES* = 10H;
CONST WS_EX_APPWINDOW* = 40000H;
CONST WS_EX_CLIENTEDGE* = 200H;
CONST WS_EX_COMPOSITED* = 2000000H;
CONST WS_EX_CONTEXTHELP* = 400H;
CONST WS_EX_CONTROLPARENT* = 10000H;
CONST WS_EX_DLGMODALFRAME* = 1H;
CONST WS_EX_LAYERED* = 80000H;
CONST WS_EX_LAYOUTRTL* = 400000H;
CONST WS_EX_LEFT* = 0H;
CONST WS_EX_LEFTSCROLLBAR* = 4000H;
CONST WS_EX_LTRREADING* = 0H;
CONST WS_EX_MDICHILD* = 40H;
CONST WS_EX_NOACTIVATE* = 8000000H;
CONST WS_EX_NOINHERITLAYOUT* = 100000H;
CONST WS_EX_NOPARENTNOTIFY* = 4H;
CONST WS_EX_WINDOWEDGE* = 100H;
CONST WS_EX_OVERLAPPEDWINDOW* = WS_EX_WINDOWEDGE + WS_EX_CLIENTEDGE;
CONST WS_EX_TOOLWINDOW* = 80H;
CONST WS_EX_TOPMOST* = 8H;
CONST WS_EX_PALETTEWINDOW* = WS_EX_WINDOWEDGE + WS_EX_TOOLWINDOW + WS_EX_TOPMOST;
CONST WS_EX_RIGHT* = 1000H;
CONST WS_EX_RIGHTSCROLLBAR* = 0H;
CONST WS_EX_RTLREADING* = 2000H;
CONST WS_EX_STATICEDGE* = 20000H;
CONST WS_EX_TRANSPARENT* = 20H;
CONST WS_GROUP* = 20000H;
CONST WS_HSCROLL* = 100000H;
CONST WS_MINIMIZE* = 20000000H;
CONST WS_ICONIC* = WS_MINIMIZE;
CONST WS_MAXIMIZE* = 1000000H;
CONST WS_MAXIMIZEBOX* = 10000H;
CONST WS_MINIMIZEBOX* = 20000H;
CONST WS_OVERLAPPED* = 0H;
CONST WS_SYSMENU* = 80000H;
CONST WS_THICKFRAME* = 40000H;
CONST WS_OVERLAPPEDWINDOW* = WS_OVERLAPPED + WS_CAPTION + WS_SYSMENU + WS_THICKFRAME + WS_MINIMIZEBOX + WS_MAXIMIZEBOX;
CONST WS_POPUP* = SHORT (80000000H);
CONST WS_POPUPWINDOW* = WS_POPUP + WS_BORDER + WS_SYSMENU;
CONST WS_SIZEBOX* = WS_THICKFRAME;
CONST WS_TABSTOP* = 10000H;
CONST WS_TILED* = WS_OVERLAPPED;
CONST WS_TILEDWINDOW* = WS_OVERLAPPEDWINDOW;
CONST WS_VISIBLE* = 10000000H;
CONST WS_VSCROLL* = 200000H;
CONST XBUTTON1* = 1H;
CONST XBUTTON2* = 2H;

TYPE ATOM* = INTEGER;
TYPE BOOL* = INTEGER;
TYPE BYTE* = SHORTINT;
TYPE USHORT* = UNSIGNED16;
TYPE COLOR16* = USHORT;
TYPE DWORD* = UNSIGNED32;
TYPE COLORREF* = DWORD;
TYPE HANDLE* = SYSTEM.ADDRESS;
TYPE HDC* = HANDLE;
TYPE LONG_PTR* = LENGTH;
TYPE LPARAM* = LONG_PTR;
TYPE UINT_PTR* = LENGTH;
TYPE WPARAM* = UINT_PTR;
TYPE DRAWSTATEPROC* = PROCEDURE (hdc: HDC; lData: LPARAM; wData: WPARAM; cx: INTEGER; cy: INTEGER): BOOL;
TYPE ULONG_PTR* = SYSTEM.ADDRESS;
TYPE DWORD_PTR* = ULONG_PTR;
TYPE FARPROC* = PROCEDURE;
TYPE FLOAT* = REAL;
TYPE PLOGFONTA* = POINTER TO LOGFONTA;
TYPE PTEXTMETRICA* = POINTER TO TEXTMETRICA;
TYPE FONTENUMPROCA* = PROCEDURE (lpelfe: PLOGFONTA; lpntme: PTEXTMETRICA; FontType: DWORD; lParam: LPARAM): INTEGER;
TYPE PLOGFONTW* = POINTER TO LOGFONTW;
TYPE PTEXTMETRICW* = POINTER TO TEXTMETRICW;
TYPE FONTENUMPROCW* = PROCEDURE (lpelfe: PLOGFONTW; lpntme: PTEXTMETRICW; FontType: DWORD; lParam: LPARAM): INTEGER;
TYPE LPVOID* = SYSTEM.ADDRESS;
TYPE GOBJENUMPROC* = PROCEDURE (lpLogObject: LPVOID; lpData: LPARAM): INTEGER;
TYPE GRAYSTRINGPROC* = PROCEDURE (hdc: HDC; lpData: LPARAM; nCount: INTEGER): BOOL;
TYPE HBITMAP* = HANDLE;
TYPE HBRUSH* = HANDLE;
TYPE HCURSOR* = HANDLE;
TYPE HFONT* = HANDLE;
TYPE HGDIOBJ* = HANDLE;
TYPE HGLOBAL* = HANDLE;
TYPE HICON* = HANDLE;
TYPE HINSTANCE* = HANDLE;
TYPE HKEY* = HANDLE;
TYPE HMENU* = HANDLE;
TYPE HMODULE* = HANDLE;
TYPE HMONITOR* = HANDLE;
TYPE HPALETTE* = HANDLE;
TYPE HPEN* = HANDLE;
TYPE LONG* = SIGNED32;
TYPE HRESULT* = LONG;
TYPE HRGN* = HANDLE;
TYPE HWND* = HANDLE;
TYPE INT* = INTEGER;
TYPE INT_PTR* = SYSTEM.ADDRESS;
TYPE LPRECT* = POINTER TO RECT;
TYPE MONITORENUMPROC* = PROCEDURE (Arg1: HMONITOR; Arg2: HDC; Arg3: LPRECT; Arg4: LPARAM): BOOL;
TYPE LARGE_INTEGER* = SIGNED64;
TYPE LCID* = DWORD;
TYPE LINEDDAPROC* = PROCEDURE (Arg1: INTEGER; Arg2: INTEGER; Arg3: LPARAM);
TYPE LONGLONG* = HUGEINT;
TYPE LPBYTE* = SYSTEM.ADDRESS;
TYPE LPCBYTE* = SYSTEM.ADDRESS;
TYPE LPCSTR* = SYSTEM.ADDRESS;
TYPE LPCTSTR* = LPCSTR;
TYPE LPCVOID* = SYSTEM.ADDRESS;
TYPE LPCWSTR* = SYSTEM.ADDRESS;
TYPE LPDWORD* = SYSTEM.ADDRESS;
TYPE PVOID* = SYSTEM.ADDRESS;
TYPE LPFIBER_START_ROUTINE* = PROCEDURE (lpParameter: PVOID);
TYPE LPINT* = SYSTEM.ADDRESS;
TYPE LPLONG* = SYSTEM.ADDRESS;
TYPE LPSTR* = SYSTEM.ADDRESS;
TYPE LPTHREAD_START_ROUTINE* = PROCEDURE (lpParameter: LPVOID);
TYPE LPTSTR* = LPSTR;
TYPE LPWORD* = SYSTEM.ADDRESS;
TYPE LPWSTR* = SYSTEM.ADDRESS;
TYPE LRESULT* = LONG_PTR;
TYPE ORIENTATION_PREFERENCE* = INTEGER;
TYPE PBOOL* = SYSTEM.ADDRESS;
TYPE PCHAR* = SYSTEM.ADDRESS;
TYPE PCSTR* = SYSTEM.ADDRESS;
TYPE PDWORD* = SYSTEM.ADDRESS;
TYPE PFLOAT* = SYSTEM.ADDRESS;
TYPE PHANDLE* = SYSTEM.ADDRESS;
TYPE PHKEY* = SYSTEM.ADDRESS;
TYPE PINT* = SYSTEM.ADDRESS;
TYPE PLONG* = SYSTEM.ADDRESS;
TYPE PSTR* = SYSTEM.ADDRESS;
TYPE PUINT* = SYSTEM.ADDRESS;
TYPE PULONG* = SYSTEM.ADDRESS;
TYPE PULONGLONG* = SYSTEM.ADDRESS;
TYPE REGSAM* = LONGINT;
TYPE SHORT* = SIGNED16;
TYPE SIZE_T* = LENGTH;
TYPE SOCKET* = UINT_PTR;
TYPE TBYTE* = BYTE;
TYPE TCHAR* = CHAR;
TYPE UINT* = INTEGER;
TYPE TIMERPROC* = PROCEDURE (hwnd: HWND; uMsg: UINT; idEvent: UINT_PTR; dwTime: DWORD);
TYPE ULONG* = UNSIGNED32;
TYPE ULONGLONG* = HUGEINT;
TYPE WCHAR* = INTEGER;
TYPE WNDPROC* = PROCEDURE (hwnd: HWND; uMsg: UINT; wParam: WPARAM; lParam: LPARAM): LRESULT;
TYPE WORD* = UNSIGNED16;

TYPE ABC* = RECORD-
	abcA*: INTEGER;
	abcB*: UINT;
	abcC*: INTEGER;
END; PABC* = POINTER TO ABC; NPABC* = POINTER TO ABC; LPABC* = POINTER TO ABC;

TYPE ABCFLOAT* = RECORD-
	abcfA*: FLOAT;
	abcfB*: FLOAT;
	abcfC*: FLOAT;
END; PABCFLOAT* = POINTER TO ABCFLOAT; NPABCFLOAT* = POINTER TO ABCFLOAT; LPABCFLOAT* = POINTER TO ABCFLOAT;

TYPE addrinfo* = RECORD-
	ai_flags*: INT;
	ai_family*: INT;
	ai_socktype*: INT;
	ai_protocol*: INT;
	ai_addrlen*: SIZE_T;
	ai_canonname*: PCHAR;
	ai_addr*: POINTER TO sockaddr;
	ai_next*: POINTER TO addrinfo;
END; ADDRINFOA* = addrinfo; PADDRINFOA* = POINTER TO ADDRINFOA;

TYPE BITMAP* = RECORD-
	bmType*: LONG;
	bmWidth*: LONG;
	bmHeight*: LONG;
	bmWidthBytes*: LONG;
	bmPlanes*: WORD;
	bmBitsPixel*: WORD;
	bmBits*: LPVOID;
END; PBITMAP* = POINTER TO BITMAP;

TYPE BITMAPINFOHEADER* = RECORD-
	biSize*: DWORD;
	biWidth*: LONG;
	biHeight*: LONG;
	biPlanes*: WORD;
	biBitCount*: WORD;
	biCompression*: DWORD;
	biSizeImage*: DWORD;
	biXPelsPerMeter*: LONG;
	biYPelsPerMeter*: LONG;
	biClrUsed*: DWORD;
	biClrImportant*: DWORD;
END; PBITMAPINFOHEADER* = POINTER TO BITMAPINFOHEADER;

TYPE RGBQUAD* = RECORD-
	rgbBlue*: BYTE;
	rgbGreen*: BYTE;
	rgbRed*: BYTE;
	rgbReserved*: BYTE;
END; PRGBQUAD* = POINTER TO RGBQUAD;

TYPE BITMAPINFO* = RECORD-
	bmiHeader*: BITMAPINFOHEADER;
	bmiColors*: ARRAY 1 OF RGBQUAD;
END; LPBITMAPINFO* = POINTER TO BITMAPINFO; PBITMAPINFO* = POINTER TO BITMAPINFO;

TYPE BLENDFUNCTION* = RECORD-
	BlendOp*: BYTE;
	BlendFlags*: BYTE;
	SourceConstantAlpha*: BYTE;
	AlphaFormat* :BYTE;
END; PBLENDFUNCTION* = POINTER TO BLENDFUNCTION;

TYPE COLORADJUSTMENT* = RECORD-
	caSize*: WORD;
	caFlags*: WORD;
	caIlluminantIndex*: WORD;
	caRedGamma*: WORD;
	caGreenGamma*: WORD;
	caBlueGamma*: WORD;
	caReferenceBlack*: WORD;
	caReferenceWhite*: WORD;
	caContrast*: SHORT;
	caBrightness*: SHORT;
	caColorfulness*: SHORT;
	caRedGreenTint*: SHORT;
END; PCOLORADJUSTMENT* = POINTER TO COLORADJUSTMENT; LPCOLORADJUSTMENT* = POINTER TO COLORADJUSTMENT;

TYPE DCB* = RECORD-
	DCBlength*: DWORD;
	BaudRate*: DWORD;
	flags*: DWORD;
	wReserved*: WORD;
	XonLim*: WORD;
	XoffLim*: WORD;
	ByteSize*: BYTE;
	Parity*: BYTE;
	StopBits*: BYTE;
	XonChar*: CHAR;
	XoffChar*: CHAR;
	ErrorChar*: CHAR;
	EofChar*: CHAR;
	EvtChar*: CHAR;
	wReserved1*: WORD;
END; LPDCB* = POINTER TO DCB;

TYPE COMMCONFIG* = RECORD-
	dwSize*: DWORD;
	wVersion*: WORD;
	wReserved*: WORD;
	dcb*: DCB;
	dwProviderSubType*: DWORD;
	dwProviderOffset*: DWORD;
	dwProviderSize*: DWORD;
	wcProviderData*: WCHAR;
END; LPCOMMCONFIG* = POINTER TO COMMCONFIG;

TYPE COMMPROP* = RECORD-
	wPacketLength*: WORD;
	wPacketVersion*: WORD;
	dwServiceMask*: DWORD;
	dwReserved1*: DWORD;
	dwMaxTxQueue*: DWORD;
	dwMaxRxQueue*: DWORD;
	dwMaxBaud*: DWORD;
	dwProvSubType*: DWORD;
	dwProvCapabilities*: DWORD;
	dwSettableParams*: DWORD;
	dwSettableBaud*: DWORD;
	wSettableData*: WORD;
	wSettableStopParity*: WORD;
	dwCurrentTxQueue*: DWORD;
	dwCurrentRxQueue*: DWORD;
	dwProvSpec1*: DWORD;
	dwProvSpec2*: DWORD;
	wcProvChar*: WCHAR;
END; LPCOMMPROP* = POINTER TO COMMPROP;

TYPE COMMTIMEOUTS* = RECORD-
	ReadIntervalTimeout*: DWORD;
	ReadTotalTimeoutMultiplier*: DWORD;
	ReadTotalTimeoutConstant*: DWORD;
	WriteTotalTimeoutMultiplier*: DWORD;
	WriteTotalTimeoutConstant*: DWORD;
END; LPCOMMTIMEOUTS* = POINTER TO COMMTIMEOUTS;

TYPE COMSTAT* = RECORD-
	flags*: DWORD;
	cbInQue*: DWORD;
	cbOutQue*: DWORD;
END; LPCOMSTAT* = POINTER TO COMSTAT;

TYPE CONDITION_VARIABLE* = RECORD-
	Ptr-: PVOID;
END; PCONDITION_VARIABLE* = POINTER TO CONDITION_VARIABLE;

TYPE CONSOLE_CURSOR_INFO* = RECORD-
	dwSize*: DWORD;
	bVisible*: BOOL;
END; PCONSOLE_CURSOR_INFO* = POINTER TO CONSOLE_CURSOR_INFO;

TYPE COORD* = RECORD-
	X*: SHORT;
	Y*: SHORT;
END; PCOORD* = POINTER TO COORD; COORD_RETURN* = LONG;

TYPE CONSOLE_FONT_INFO* = RECORD-
	nFont*: DWORD;
	dwFontSize*: COORD;
END; PCONSOLE_FONT_INFO* = POINTER TO CONSOLE_FONT_INFO;

TYPE CONSOLE_FONT_INFOEX* = RECORD-
	cbSize*: ULONG;
	nFont*: DWORD;
	dwFontSize*: COORD;
	FontFamily*: UINT;
	FontWeight*: UINT;
	FaceName*: ARRAY LF_FACESIZE OF WCHAR;
END; PCONSOLE_FONT_INFOEX* = POINTER TO CONSOLE_FONT_INFOEX;

TYPE CONSOLE_HISTORY_INFO* = RECORD-
	cbSize*: UINT;
	HistoryBufferSize*: UINT;
	NumberOfHistoryBuffers*: UINT;
	dwFlags*: DWORD;
END; PCONSOLE_HISTORY_INFO* = POINTER TO CONSOLE_HISTORY_INFO;

TYPE SMALL_RECT* = RECORD-
	Left*: SHORT;
	Top*: SHORT;
	Right*: SHORT;
	Bottom*: SHORT;
END; PSMALL_RECT* = POINTER TO SMALL_RECT;

TYPE CONSOLE_SCREEN_BUFFER_INFO* = RECORD-
	dwSize*: COORD;
	dwCursorPosition*: COORD;
	wAttributes*: WORD;
	srWindow*: SMALL_RECT;
	dwMaximumWindowSize*: COORD;
END; PCONSOLE_SCREEN_BUFFER_INFO* = POINTER TO CONSOLE_SCREEN_BUFFER_INFO;

TYPE CONSOLE_SCREEN_BUFFER_INFOEX* = RECORD-
	cbSize*: ULONG;
	dwSize*: COORD;
	dwCursorPosition*: COORD;
	wAttributes*: WORD;
	srWindow*: SMALL_RECT;
	dwMaximumWindowSize*: COORD;
	wPopupAttributes*: WORD;
	bFullscreenSupported*: BOOL;
	ColorTable*: ARRAY 16 OF COLORREF;
END; PCONSOLE_SCREEN_BUFFER_INFOEX* = POINTER TO CONSOLE_SCREEN_BUFFER_INFOEX;

TYPE CONSOLE_SELECTION_INFO* = RECORD-
	dwFlags*: DWORD;
	dwSelectionAnchor*: COORD;
	srSelection*: SMALL_RECT;
END; PCONSOLE_SELECTION_INFO* = POINTER TO CONSOLE_SELECTION_INFO;

TYPE CONTEXT* = RECORD-
END; PCONTEXT* = POINTER TO CONTEXT;

TYPE COPYDATASTRUCT* = RECORD-
	dwData*: ULONG_PTR;
	cbData*: DWORD;
	lpData*: PVOID;
END; LPCOPYDATASTRUCT* = POINTER TO COPYDATASTRUCT;

TYPE CRITICAL_SECTION* = RECORD-
	DebugInfo-: SYSTEM.ADDRESS;
	LockCount-: LONG;
	RecursionCount-: LONG;
	OwningThread-: HANDLE;
	LockSemaphore-: HANDLE;
	SpinCount-: ULONG_PTR;
END; LPCRITICAL_SECTION* = POINTER TO CRITICAL_SECTION;

TYPE DESIGNVECTOR* = RECORD-
	dvReserved*: DWORD;
	dvNumAxes*: DWORD;
	dvValues*: ARRAY MM_MAX_NUMAXES OF LONG;
END; PDESIGNVECTOR* = POINTER TO DESIGNVECTOR; LPDESIGNVECTOR* = POINTER TO DESIGNVECTOR;

TYPE POINTL* = RECORD-
	x*: LONG;
	y*: LONG;
END; PPOINTL* = POINTER TO POINTL;

TYPE DEVMODEA* = RECORD-
	dmDeviceName* : ARRAY CCHDEVICENAME OF BYTE;
	dmSpecVersion*: WORD;
	dmDriverVersion*: WORD;
	dmSize*: WORD;
	dmDriverExtra*: WORD;
	dmFields*: DWORD;
	dmOrientation*: SHORTINT;
	dmPaperSize*: SHORTINT;
	dmPaperLength*: SHORTINT;
	dmPaperWidth*: SHORTINT;
	dmScale*: SHORTINT;
	dmCopies*: SHORTINT;
	dmDefaultSource*: SHORTINT;
	dmPrintQuality*: SHORTINT;
	dmColor*: SHORTINT;
	dmDuplex*: SHORTINT;
	dmYResolution*: SHORTINT;
	dmTTOption*: SHORTINT;
	dmCollate*: SHORTINT;
	dmFormName*: ARRAY CCHFORMNAME OF BYTE;
	dmLogPixels*: WORD;
	dmBitsPerPel*: DWORD;
	dmPelsWidth*: DWORD;
	dmPelsHeight*: DWORD;
	dmDisplayFlags*: DWORD;
	dmDisplayFrequency*: DWORD;
	dmICMMethod*: DWORD;
	dmICMIntent*: DWORD;
	dmMediaType*: DWORD;
	dmDitherType*: DWORD;
	dmReserved1*: DWORD;
	dmReserved2*: DWORD;
	dmPanningWidth*: DWORD;
	dmPanningHeight*: DWORD;
END; PDEVMODEA* = POINTER TO DEVMODEA; NPDEVMODEA* = POINTER TO DEVMODEA; LPDEVMODEA* = POINTER TO DEVMODEA;

TYPE DEVMODEW* = RECORD-
	dmDeviceName*: ARRAY CCHDEVICENAME OF WCHAR;
	dmSpecVersion*: WORD;
	dmDriverVersion*: WORD;
	dmSize*: WORD;
	dmDriverExtra*: WORD;
	dmFields*: DWORD;
	dmOrientation*: SHORTINT;
	dmPaperSize*: SHORTINT;
	dmPaperLength*: SHORTINT;
	dmPaperWidth*: SHORTINT;
	dmScale*: SHORTINT;
	dmCopies*: SHORTINT;
	dmDefaultSource*: SHORTINT;
	dmPrintQuality*: SHORTINT;
	dmColor*: SHORTINT;
	dmDuplex*: SHORTINT;
	dmYResolution*: SHORTINT;
	dmTTOption*: SHORTINT;
	dmCollate*: SHORTINT;
	dmFormName*: ARRAY CCHFORMNAME OF WCHAR;
	dmLogPixels*: WORD;
	dmBitsPerPel*: DWORD;
	dmPelsWidth*: DWORD;
	dmPelsHeight*: DWORD;
	dmDisplayFlags*: DWORD;
	dmDisplayFrequency*: DWORD;
	dmICMMethod*: DWORD;
	dmICMIntent*: DWORD;
	dmMediaType*: DWORD;
	dmDitherType*: DWORD;
	dmReserved1*: DWORD;
	dmReserved2*: DWORD;
	dmPanningWidth*: DWORD;
	dmPanningHeight*: DWORD;
END; PDEVMODEW* = POINTER TO DEVMODEW; NPDEVMODEW* = POINTER TO DEVMODEW; LPDEVMODEW* = POINTER TO DEVMODEW;

TYPE DISPLAY_DEVICEA* = RECORD-
	cb*: DWORD;
	DeviceName*: ARRAY 32 OF CHAR;
	DeviceString*: ARRAY 128 OF CHAR;
	StateFlags*: DWORD;
	DeviceID*: ARRAY 128 OF CHAR;
	DeviceKey*: ARRAY 128 OF CHAR;
END; PDISPLAY_DEVICEA* = POINTER TO DISPLAY_DEVICEA; LPDISPLAY_DEVICEA* = POINTER TO DISPLAY_DEVICEA;

TYPE DISPLAY_DEVICEW* = RECORD-
	cb*: DWORD;
	DeviceName*: ARRAY 32 OF WCHAR;
	DeviceString*: ARRAY 128 OF WCHAR;
	StateFlags*: DWORD;
	DeviceID*: ARRAY 128 OF WCHAR;
	DeviceKey*: ARRAY 128 OF WCHAR;
END; PDISPLAY_DEVICEW* = POINTER TO DISPLAY_DEVICEW; LPDISPLAY_DEVICEW* = POINTER TO DISPLAY_DEVICEW;

TYPE DRAWTEXTPARAMS* = RECORD-
	cbSize*: UINT;
	iTabLength*: INTEGER;
	iLeftMargin*: INTEGER;
	iRightMargin*: INTEGER;
	uiLengthDrawn*: UINT;
END; LPDRAWTEXTPARAMS* = POINTER TO DRAWTEXTPARAMS;

TYPE SYSTEMTIME* = RECORD-
	wYear*: WORD;
	wMonth*: WORD;
	wDayOfWeek*: WORD;
	wDay*: WORD;
	wHour*: WORD;
	wMinute*: WORD;
	wSecond*: WORD;
	wMilliseconds*: WORD;
END; LPSYSTEMTIME* = POINTER TO SYSTEMTIME;

TYPE DYNAMIC_TIME_ZONE_INFORMATION* = RECORD-
	Bias*: LONG;
	StandardName*: ARRAY 32 OF WCHAR;
	StandardDate*: SYSTEMTIME;
	StandardBias*: LONG;
	DaylightName*: ARRAY 32 OF WCHAR;
	DaylightDate*: SYSTEMTIME;
	DaylightBias*: LONG;
	TimeZoneKeyName*: ARRAY 128 OF WCHAR;
	DynamicDaylightTimeDisabled*: BOOL;
END; PDYNAMIC_TIME_ZONE_INFORMATION* = POINTER TO DYNAMIC_TIME_ZONE_INFORMATION;

TYPE LOGFONTA* = RECORD-
	lfHeight*: LONG;
	lfWidth*: LONG;
	lfEscapement*: LONG;
	lfOrientation*: LONG;
	lfWeight*: LONG;
	lfItalic*: BYTE;
	lfUnderline*: BYTE;
	lfStrikeOut*: BYTE;
	lfCharSet*: BYTE;
	lfOutPrecision*: BYTE;
	lfClipPrecision*: BYTE;
	lfQuality*: BYTE;
	lfPitchAndFamily*: BYTE;
	lfFaceName*: ARRAY LF_FACESIZE OF CHAR;
END; NPLOGFONTA* = POINTER TO LOGFONTA; LPLOGFONTA* = POINTER TO LOGFONTA;

TYPE ENUMLOGFONTEXA* = RECORD-
	elfLogFont*: LOGFONTA;
	elfFullName*: ARRAY LF_FULLFACESIZE OF BYTE;
	elfStyle*: ARRAY LF_FACESIZE OF BYTE;
	elfScript*: ARRAY LF_FACESIZE OF BYTE;
END; LPENUMLOGFONTEXA* = POINTER TO ENUMLOGFONTEXA;

TYPE ENUMLOGFONTEXDVA* = RECORD-
	elfEnumLogfontEx*: ENUMLOGFONTEXA;
	elfDesignVector*: DESIGNVECTOR;
END; PENUMLOGFONTEXDVA* = POINTER TO ENUMLOGFONTEXDVA; LPENUMLOGFONTEXDVA* = POINTER TO ENUMLOGFONTEXDVA;

TYPE LOGFONTW* = RECORD-
	lfHeight*: LONG;
	lfWidth*: LONG;
	lfEscapement*: LONG;
	lfOrientation*: LONG;
	lfWeight*: LONG;
	lfItalic*: BYTE;
	lfUnderline*: BYTE;
	lfStrikeOut*: BYTE;
	lfCharSet*: BYTE;
	lfOutPrecision*: BYTE;
	lfClipPrecision*: BYTE;
	lfQuality*: BYTE;
	lfPitchAndFamily*: BYTE;
	lfFaceName*: ARRAY LF_FACESIZE OF WCHAR;
END; NPLOGFONTW* = POINTER TO LOGFONTW; LPLOGFONTW* = POINTER TO LOGFONTW;

TYPE ENUMLOGFONTEXW* = RECORD-
	elfLogFont*: LOGFONTW;
	elfFullName*: ARRAY LF_FULLFACESIZE OF WCHAR;
	elfStyle*: ARRAY LF_FACESIZE OF WCHAR;
	elfScript*: ARRAY LF_FACESIZE OF WCHAR;
END; LPENUMLOGFONTEXW* = POINTER TO ENUMLOGFONTEXW;

TYPE ENUMLOGFONTEXDVW* = RECORD-
	elfEnumLogfontEx*: ENUMLOGFONTEXW;
	elfDesignVector*: DESIGNVECTOR;
END; PENUMLOGFONTEXDVW* = POINTER TO ENUMLOGFONTEXDVW; LPENUMLOGFONTEXDVW* = POINTER TO ENUMLOGFONTEXDVW;

TYPE PEXCEPTION_RECORD* = POINTER TO EXCEPTION_RECORD;

TYPE EXCEPTION_RECORD* = RECORD-
	ExceptionCode*: DWORD;
	ExceptionFlags*: DWORD;
	ExceptionRecord*: PEXCEPTION_RECORD;
	ExceptionAddress*: PVOID;
	NumberParameters*: DWORD;
	ExceptionInformation*: ARRAY EXCEPTION_MAXIMUM_PARAMETERS OF ULONG_PTR;
END;

TYPE EXCEPTION_POINTERS* = RECORD-
	ExceptionRecord*: PEXCEPTION_RECORD;
	ContextRecord*: PCONTEXT;
END; PEXCEPTION_POINTERS* = POINTER TO EXCEPTION_POINTERS;

TYPE PVECTORED_EXCEPTION_HANDLER* = PROCEDURE (ExceptionInfo: PEXCEPTION_POINTERS): ULONG;

TYPE FILETIME* = RECORD-
	dwLowDateTime*: DWORD;
	dwHighDateTime*: DWORD;
END; PFILETIME* = POINTER TO FILETIME; LPFILETIME* = POINTER TO FILETIME;

TYPE FIXED* = RECORD-
	fract*: WORD;
	value*: SHORTINT;
END; LPFIXED* = POINTER TO FIXED;

TYPE GCP_RESULTSA* = RECORD-
	lStructSize*: DWORD;
	lpOutString*: LPSTR;
	lpOrder*: PUINT;
	lpDx*: LPINT;
	lpCaretPos*: LPINT;
	lpClass*: LPSTR;
	lpGlyphs*: LPWSTR;
	nGlyphs*: UINT;
	nMaxFit*: INTEGER;
END; LPGCP_RESULTSA* = POINTER TO GCP_RESULTSA;

TYPE GCP_RESULTSW* = RECORD-
	lStructSize*: DWORD;
	lpOutString*: LPWSTR;
	lpOrder*: PUINT;
	lpDx*: LPINT;
	lpCaretPos*: LPINT;
	lpClass*: LPSTR;
	lpGlyphs*: LPWSTR;
	nGlyphs*: UINT;
	nMaxFit*: INTEGER;
END; LPGCP_RESULTSW* = POINTER TO GCP_RESULTSW;

TYPE POINT* = RECORD-
	x*: LONG;
	y*: LONG;
END; LPPOINT* = POINTER TO POINT;

TYPE GLYPHMETRICS* = RECORD-
	gmBlackBoxX*: UINT;
	gmBlackBoxY*: UINT;
	gmptGlyphOrigin*: POINT;
	gmCellIncX*: SHORTINT;
	gmCellIncY*: SHORTINT;
END; LPGLYPHMETRICS* = POINTER TO GLYPHMETRICS;

TYPE WCRANGE* = RECORD-;
	wcLow*: WCHAR;
	cGlyphs*: USHORT;
END; PWCRANGE* = POINTER TO WCRANGE; LPWCRANGE* = POINTER TO WCRANGE;

TYPE GLYPHSET* = RECORD-
	cbThis*: DWORD;
	flAccel*: DWORD;
	cGlyphsSupported*: DWORD;
	cRanges*: DWORD;
	ranges*: ARRAY 1 OF WCRANGE;
END; PGLYPHSET* = POINTER TO GLYPHSET; LPGLYPHSET* = POINTER TO GLYPHSET;

TYPE INIT_ONCE* = RECORD-
	Ptr*: PVOID;
END; LPINIT_ONCE* = POINTER TO INIT_ONCE;

TYPE KERNINGPAIR* = RECORD-
	wFirst*: WORD;
	wSecond*: WORD;
	iKernAmount*: INTEGER;
END; LPKERNINGPAIR* = POINTER TO KERNINGPAIR;

TYPE LOGBRUSH* = RECORD-
	lbStyle*: UINT;
	lbColor*: COLORREF;
	lbHatch*: ULONG_PTR;
END; PLOGBRUSH* = POINTER TO LOGBRUSH; NPLOGBRUSH* = POINTER TO LOGBRUSH; LPLOGBRUSH* = POINTER TO LOGBRUSH;

TYPE PALETTEENTRY* = RECORD-
	peRed*: BYTE;
	peGreen*: BYTE;
	peBlue*: BYTE;
	peFlags*: BYTE;
END; PPALETTEENTRY* = POINTER TO PALETTEENTRY; LPPALETTEENTRY* = POINTER TO PALETTEENTRY;

TYPE LOGPALETTE* = RECORD-
	palVersion*: WORD;
	palNumEntries*: WORD;
	palPalEntry*: ARRAY 1 OF PALETTEENTRY;
END; PLOGPALETTE* = POINTER TO LOGPALETTE; NPLOGPALETTE* = POINTER TO LOGPALETTE; LPLOGPALETTE* = POINTER TO LOGPALETTE;

TYPE LOGPEN* = RECORD-
	lopnStyle*: UINT;
	lopnWidth*: POINT;
	lopnColor*: COLORREF;
END; PLOGPEN* = POINTER TO LOGPEN; NPLOGPEN* = POINTER TO LOGPEN; LPLOGPEN* = POINTER TO LOGPEN;

TYPE MAT2* = RECORD-
	eM11*: FIXED;
	eM12*: FIXED;
	eM21*: FIXED;
	eM22*: FIXED;
END; LPMAT2* = POINTER TO MAT2;

TYPE MDINEXTMENU* = RECORD-
	hmenuIn*: HMENU;
	hmenuNext*: HMENU;
	hwndNext*: HWND;
END; LPMDINEXTMENU* = POINTER TO MDINEXTMENU;

TYPE MINMAXINFO* = RECORD-
	ptReserved*: POINT;
	ptMaxSize*: POINT;
	ptMaxPosition*: POINT;
	ptMinTrackSize*: POINT;
	ptMaxTrackSize*: POINT;
END; LPMINMAXINFO* = POINTER TO MINMAXINFO;

TYPE MENUITEMINFO* = RECORD-
	cbSize*: UINT;
	fMask*: UINT;
	fType*: UINT;
	fState*: UINT;
	wID*: UINT;
	hSubMenu*: HMENU;
	hbmpChecked*: HBITMAP;
	hbmpUnchecked*: HBITMAP;
	dwItemData*: ULONG_PTR;
	dwTypeData*: LPTSTR;
	cch*: UINT;
	hbmpItem*: HBITMAP;
END; LPMENUITEMINFO* = POINTER TO MENUITEMINFO;

TYPE RECT* = RECORD-
	left*: LONG;
	top*: LONG;
	right*: LONG;
	bottom*: LONG;
END; LPCRECT* = POINTER TO RECT;

TYPE MONITORINFO* = RECORD-
	cbSize*: DWORD;
	rcMonitor*: RECT;
	rcWork*: RECT;
	dwFlags*: DWORD;
END; LPMONITORINFO* = POINTER TO MONITORINFO;

TYPE MONITORINFOEXA* = RECORD-
	cbSize*: DWORD;
	rcMonitor*: RECT;
	rcWork*: RECT;
	dwFlags*: DWORD;
	szDevice*: ARRAY CCHDEVICENAME OF CHAR;
END; LPMONITORINFOEXA* = POINTER TO MONITORINFOEXA;

TYPE MONITORINFOEXW* = RECORD-
	cbSize*: DWORD;
	rcMonitor*: RECT;
	rcWork*: RECT;
	dwFlags*: DWORD;
	szDevice*: ARRAY CCHDEVICENAME OF WCHAR;
END; LPMONITORINFOEXW* = POINTER TO MONITORINFOEXW;

TYPE MSG* = RECORD-
	hwnd*: HWND;
	message*: UINT;
	wParam*: WPARAM;
	lParam*: LPARAM;
	time*: DWORD;
	pt*: POINT;
END; LPMSG* = POINTER TO MSG;

TYPE TEXTMETRICA* = RECORD-
	tmHeight*: LONG;
	tmAscent*: LONG;
	tmDescent*: LONG;
	tmInternalLeading*: LONG;
	tmExternalLeading*: LONG;
	tmAveCharWidth*: LONG;
	tmMaxCharWidth*: LONG;
	tmWeight*: LONG;
	tmOverhang*: LONG;
	tmDigitizedAspectX*: LONG;
	tmDigitizedAspectY*: LONG;
	tmFirstChar*: BYTE;
	tmLastChar*: BYTE;
	tmDefaultChar*: BYTE;
	tmBreakChar*: BYTE;
	tmItalic*: BYTE;
	tmUnderlined*: BYTE;
	tmStruckOut*: BYTE;
	tmPitchAndFamily*: BYTE;
	tmCharSet*: BYTE;
END; NPTEXTMETRICA* = POINTER TO TEXTMETRICA; LPTEXTMETRICA* = POINTER TO TEXTMETRICA;

TYPE PANOSE* = RECORD-
	bFamilyType*: BYTE;
	bSerifStyle*: BYTE;
	bWeight*: BYTE;
	bProportion*: BYTE;
	bContrast*: BYTE;
	bStrokeVariation*: BYTE;
	bArmStyle*: BYTE;
	bLetterform*: BYTE;
	bMidline*: BYTE;
	bXHeight*: BYTE;
END; LPPANOSE* = POINTER TO PANOSE;

TYPE OUTLINETEXTMETRICA* = RECORD-
	otmSize*: UINT;
	otmTextMetrics*: TEXTMETRICA;
	otmFiller*: BYTE;
	otmPanoseNumber*: PANOSE;
	otmfsSelection*: UINT;
	otmfsType*: UINT;
	otmsCharSlopeRise*: INTEGER;
	otmsCharSlopeRun*: INTEGER;
	otmItalicAngle*: INTEGER;
	otmEMSquare*: UINT;
	otmAscent*: INTEGER;
	otmDescent*: INTEGER;
	otmLineGap*: UINT;
	otmsCapEmHeight*: UINT;
	otmsXHeight*: UINT;
	otmrcFontBox*: RECT;
	otmMacAscent*: INTEGER;
	otmMacDescent*: INTEGER;
	otmMacLineGap*: UINT;
	otmusMinimumPPEM*: UINT;
	otmptSubscriptSize*: POINT;
	otmptSubscriptOffset*: POINT;
	otmptSuperscriptSize*: POINT;
	otmptSuperscriptOffset*: POINT;
	otmsStrikeoutSize*: UINT;
	otmsStrikeoutPosition*: INTEGER;
	otmsUnderscoreSize*: INTEGER;
	otmsUnderscorePosition*: INTEGER;
	otmpFamilyName*: PSTR;
	otmpFaceName*: PSTR;
	otmpStyleName*: PSTR;
	otmpFullName*: PSTR;
END; POUTLINETEXTMETRICA* = POINTER TO OUTLINETEXTMETRICA; NPOUTLINETEXTMETRICA* = POINTER TO OUTLINETEXTMETRICA; LPOUTLINETEXTMETRICA* = POINTER TO OUTLINETEXTMETRICA;

TYPE TEXTMETRICW* = RECORD-
	tmHeight*: LONG;
	tmAscent*: LONG;
	tmDescent*: LONG;
	tmInternalLeading*: LONG;
	tmExternalLeading*: LONG;
	tmAveCharWidth*: LONG;
	tmMaxCharWidth*: LONG;
	tmWeight*: LONG;
	tmOverhang*: LONG;
	tmDigitizedAspectX*: LONG;
	tmDigitizedAspectY*: LONG;
	tmFirstChar*: WCHAR;
	tmLastChar*: WCHAR;
	tmDefaultChar*: WCHAR;
	tmBreakChar*: WCHAR;
	tmItalic*: BYTE;
	tmUnderlined*: BYTE;
	tmStruckOut*: BYTE;
	tmPitchAndFamily*: BYTE;
	tmCharSet*: BYTE;
END; NPTEXTMETRICW* = POINTER TO TEXTMETRICW; LPTEXTMETRICW* = POINTER TO TEXTMETRICW;

TYPE OUTLINETEXTMETRICW* = RECORD-
	otmSize*: UINT;
	otmTextMetrics*: TEXTMETRICW;
	otmFiller*: BYTE;
	otmPanoseNumber*: PANOSE;
	otmfsSelection*: UINT;
	otmfsType*: UINT;
	otmsCharSlopeRise*: INTEGER;
	otmsCharSlopeRun*: INTEGER;
	otmItalicAngle*: INTEGER;
	otmEMSquare*: UINT;
	otmAscent*: INTEGER;
	otmDescent*: INTEGER;
	otmLineGap*: UINT;
	otmsCapEmHeight*: UINT;
	otmsXHeight*: UINT;
	otmrcFontBox*: RECT;
	otmMacAscent*: INTEGER;
	otmMacDescent*: INTEGER;
	otmMacLineGap*: UINT;
	otmusMinimumPPEM*: UINT;
	otmptSubscriptSize*: POINT;
	otmptSubscriptOffset*: POINT;
	otmptSuperscriptSize*: POINT;
	otmptSuperscriptOffset*: POINT;
	otmsStrikeoutSize*: UINT;
	otmsStrikeoutPosition*: INTEGER;
	otmsUnderscoreSize*: INTEGER;
	otmsUnderscorePosition*: INTEGER;
	otmpFamilyName*: PSTR;
	otmpFaceName*: PSTR;
	otmpStyleName*: PSTR;
	otmpFullName*: PSTR;
END; NPOUTLINETEXTMETRICW* = POINTER TO OUTLINETEXTMETRICW; LPOUTLINETEXTMETRICW* = POINTER TO OUTLINETEXTMETRICW;

TYPE OVERLAPPED* = RECORD-
	Internal*: ULONG_PTR;
	InternalHigh*: ULONG_PTR;
	Pointer*: PVOID;
	hEvent*: HANDLE;
END; LPOVERLAPPED* = POINTER TO OVERLAPPED;

TYPE PAINTSTRUCT* = RECORD-
	hdc*: HDC;
	fErase*: BOOL;
	rcPaint*: RECT;
	fRestore*: BOOL;
	fIncUpdate*: BOOL;
	rgbReserved*: ARRAY 32 OF BYTE;
END; LPPAINTSTRUCT* = POINTER TO PAINTSTRUCT;

TYPE POLYTEXTA* = RECORD-
	x*: INTEGER;
	y*: INTEGER;
	n*: UINT;
	lpstr*: LPCSTR;
	uiFlags*: UINT;
	rcl*: RECT;
	pdx*: PINT;
END; PPOLYTEXTA* = POINTER TO POLYTEXTA; NPPOLYTEXTA* = POINTER TO POLYTEXTA; LPPOLYTEXTA* = POINTER TO POLYTEXTA;

TYPE POLYTEXTW* = RECORD-
	x*: INTEGER;
	y*: INTEGER;
	n*: UINT;
	lpstr*: LPCWSTR;
	uiFlags*: UINT;
	rcl*: RECT;
	pdx*: PINT;
END; PPOLYTEXTW* = POINTER TO POLYTEXTW; NPPOLYTEXTW* = POINTER TO POLYTEXTW; LPPOLYTEXTW* = POINTER TO POLYTEXTW;

TYPE PROCESS_HEAP_ENTRY* = RECORD-
	lpData*: PVOID;
	cbData*: DWORD;
	cbOverhead*: BYTE;
	iRegionIndex*: BYTE;
	wFlags*: WORD;
	dwCommittedSize*: DWORD;
	dwUnCommittedSize*: DWORD;
	lpFirstBlock*: LPVOID;
	lpLastBlock*: LPVOID;
END; LPPROCESS_HEAP_ENTRY* = POINTER TO PROCESS_HEAP_ENTRY;

TYPE PROCESS_INFORMATION* = RECORD-
	hProcess*: HANDLE;
	hThread*: HANDLE;
	dwProcessId*: DWORD;
	dwThreadId*: DWORD;
END; LPPROCESS_INFORMATION* = POINTER TO PROCESS_INFORMATION;

TYPE RASTERIZER_STATUS* = RECORD-
	nSize*: SHORTINT;
	wFlags*: SHORTINT;
	nLanguageID*: SHORTINT;
END; LPRASTERIZER_STATUS* = POINTER TO RASTERIZER_STATUS;

TYPE RGNDATAHEADER* = RECORD-
	dwSize*: DWORD;
	iType*: DWORD;
	nCount*: DWORD;
	nRgnSize*: DWORD;
	rcBound*: RECT;
END; LPRGNDATAHEADER* = POINTER TO RGNDATAHEADER;

TYPE RGNDATA* = RECORD-
	rdh*: RGNDATAHEADER;
	Buffer*: CHAR;
END; LPRGNDATA* = POINTER TO RGNDATA;

TYPE SECURITY_ATTRIBUTES* = RECORD-
	nLength*: DWORD;
	lpSecurityDescriptor*: LPVOID;
	bInheritHandle*: BOOL;
END; LPSECURITY_ATTRIBUTES* = POINTER TO SECURITY_ATTRIBUTES;

TYPE SIZE* = RECORD-
	cx*: LONG;
	cy*: LONG;
END; LPSIZE* = POINTER TO SIZE; PSIZE* = POINTER TO SIZE;

TYPE sockaddr* = RECORD-
	sa_family*: USHORT;
	sa_data*: ARRAY 14 OF CHAR;
END;

TYPE STARTUPINFO* = RECORD-
	cb*: DWORD;
	lpReserved*: LPTSTR;
	lpDesktop*: LPTSTR;
	lpTitle*: LPTSTR;
	dwX*: DWORD;
	dwY*: DWORD;
	dwXSize*: DWORD;
	dwYSize*: DWORD;
	dwXCountChars*: DWORD;
	dwYCountChars*: DWORD;
	dwFillAttribute*: DWORD;
	dwFlags*: DWORD;
	wShowWindow*: WORD;
	cbReserved2*: WORD;
	pReserved2*: LPBYTE;
	hStdInput*: HANDLE;
	hStdOutput*: HANDLE;
	hStdError*: HANDLE;
END; LPSTARTUPINFO* = POINTER TO STARTUPINFO;

TYPE SYSTEM_INFO* = RECORD-
	wProcessorArchitecture*: WORD;
	wReserved*: WORD;
	dwPageSize*: DWORD;
	lpMinimumApplicationAddress*: LPVOID;
	lpMaximumApplicationAddress*: LPVOID;
	dwActiveProcessorMask*: DWORD_PTR;
	dwNumberOfProcessors*: DWORD;
	dwProcessorType*: DWORD;
	dwAllocationGranularity*: DWORD;
	wProcessorLevel*: WORD;
	wProcessorRevision*: WORD;
END; LPSYSTEM_INFO* = POINTER TO SYSTEM_INFO;

TYPE TIME_ZONE_INFORMATION* = RECORD-
	Bias*: ULONG;
	StandardName*: ARRAY 32 OF WCHAR;
	StandardDate*: SYSTEMTIME;
	StandardBias*: ULONG;
	DaylightName*: ARRAY 32 OF WCHAR;
	DaylightDate*: SYSTEMTIME;
	DaylightBias*: ULONG;
END; LPTIME_ZONE_INFORMATION* = POINTER TO TIME_ZONE_INFORMATION;

TYPE TRIVERTEX* = RECORD-
	x*: LONG;
	y*: LONG;
	Red*: COLOR16;
	Green*: COLOR16;
	Blue*: COLOR16;
	Alpha*: COLOR16;
END; PTRIVERTEX* = POINTER TO TRIVERTEX; LPTRIVERTEX* = POINTER TO TRIVERTEX;

TYPE WNDCLASSA* = RECORD-
	cbSize*: UINT;
	style*: UINT;
	lpfnWndProc*: WNDPROC;
	cbClsExtra*: INTEGER;
	cbWndExtra*: INTEGER;
	hInstance*: HINSTANCE;
	hIcon*: HICON;
	hCursor*: HCURSOR;
	hbrBackground*: HBRUSH;
	lpszMenuName*: LPCSTR;
	lpszClassName*: LPCSTR;
END; LPWNDCLASSA* = POINTER TO WNDCLASSA;

TYPE WNDCLASSW* = RECORD-
	cbSize*: UINT;
	style*: UINT;
	lpfnWndProc*: WNDPROC;
	cbClsExtra*: INTEGER;
	cbWndExtra*: INTEGER;
	hInstance*: HINSTANCE;
	hIcon*: HICON;
	hCursor*: HCURSOR;
	hbrBackground*: HBRUSH;
	lpszMenuName*: LPCWSTR;
	lpszClassName*: LPCWSTR;
END; LPWNDCLASSW* = POINTER TO WNDCLASSW;

TYPE WNDCLASSEXA* = RECORD-
	cbSize*: UINT;
	style*: UINT;
	lpfnWndProc*: WNDPROC;
	cbClsExtra*: INTEGER;
	cbWndExtra*: INTEGER;
	hInstance*: HINSTANCE;
	hIcon*: HICON;
	hCursor*: HCURSOR;
	hbrBackground*: HBRUSH;
	lpszMenuName*: LPCSTR;
	lpszClassName*: LPCSTR;
	hIconSm*: HICON;
END; LPWNDCLASSEXA* = POINTER TO WNDCLASSEXA;

TYPE WNDCLASSEXW* = RECORD-
	cbSize*: UINT;
	style*: UINT;
	lpfnWndProc*: WNDPROC;
	cbClsExtra*: INTEGER;
	cbWndExtra*: INTEGER;
	hInstance*: HINSTANCE;
	hIcon*: HICON;
	hCursor*: HCURSOR;
	hbrBackground*: HBRUSH;
	lpszMenuName*: LPCWSTR;
	lpszClassName*: LPCWSTR;
	hIconSm*: HICON;
END; LPWNDCLASSEXW* = POINTER TO WNDCLASSEXW;

TYPE WSADATA* = RECORD-
	wVersion*: WORD;
	wHighVersion*: WORD;
	reserved*: ARRAY Size (USHORT) + Size (USHORT) + WSADESCRIPTION_LEN + 1 + WSASYS_STATUS_LEN + 1 + Size (SYSTEM.ADDRESS) OF CHAR;
END; LPWSADATA* = POINTER TO WSADATA;

TYPE XFORM* = RECORD-
	eM11*: FLOAT;
	eM12*: FLOAT;
	eM21*: FLOAT;
	eM22*: FLOAT;
	eDx*: FLOAT;
	eDy*: FLOAT;
END; LPXFORM* = POINTER TO XFORM; PXFORM* = POINTER TO XFORM;

PROCEDURE ^ AbortPath* ["AbortPath"] (hdc: HDC): BOOL;
PROCEDURE ^ accept* ["accept"] (s: SOCKET; addr: POINTER TO sockaddr; addrlen: SYSTEM.ADDRESS): SOCKET;
PROCEDURE ^ AddAtomA* ["AddAtomA"] (lpString: LPCSTR): ATOM;
PROCEDURE ^ AddAtomW* ["AddAtomW"] (lpString: LPCSTR): ATOM;
PROCEDURE ^ AddConsoleAliasA* ["AddConsoleAliasA"] (Source: LPCSTR; Target: LPCSTR; ExeName: LPCSTR): BOOL;
PROCEDURE ^ AddConsoleAliasW* ["AddConsoleAliasW"] (Source: LPCWSTR; Target: LPCWSTR; ExeName: LPCWSTR): BOOL;
PROCEDURE ^ AddFontMemResourceEx* ["AddFontMemResourceEx"] (pFileView: PVOID; cjSize: DWORD; pvResrved: PVOID; pNumFonts: PDWORD): HANDLE;
PROCEDURE ^ AddFontResourceA* ["AddFontResourceA"] (Arg1: LPCSTR): INTEGER;
PROCEDURE ^ AddFontResourceExA* ["AddFontResourceExA"] (name: LPCSTR; fl: DWORD; res: PVOID): INTEGER;
PROCEDURE ^ AddFontResourceExW* ["AddFontResourceExW"] (name: LPCWSTR; fl: DWORD; res: PVOID): INTEGER;
PROCEDURE ^ AddFontResourceW* ["AddFontResourceW"] (Arg1: LPCWSTR): INTEGER;
PROCEDURE ^ AddVectoredContinueHandler* ["AddVectoredContinueHandler"] (FirstHandler: ULONG; VectoredHandler: PVECTORED_EXCEPTION_HANDLER): PVOID;
PROCEDURE ^ AddVectoredExceptionHandler* ["AddVectoredExceptionHandler"] (FirstHandler: ULONG; VectoredHandler: PVECTORED_EXCEPTION_HANDLER): PVOID;
PROCEDURE ^ AdjustWindowRect* ["AdjustWindowRect"] (lpRect: LPRECT; dwStyle: DWORD; bMenu: BOOL): BOOL;
PROCEDURE ^ AllocConsole* ["AllocConsole"] (): BOOL;
PROCEDURE ^ AlphaBlend* ["AlphaBlend"] (hdcDest: HDC; xoriginDest: INTEGER; yoriginDest: INTEGER; wDest: INTEGER; hDest: INTEGER; hdcSrc: HDC; xoriginSrc: INTEGER; yoriginSrc: INTEGER; wSrc: INTEGER; hSrc: INTEGER; ftn: BLENDFUNCTION): BOOL;
PROCEDURE ^ AngleArc* ["AngleArc"] (hdc: HDC; x: INTEGER; y: INTEGER; r: DWORD; StartAngle: FLOAT; SweepAngle: FLOAT): BOOL;
PROCEDURE ^ AnimatePalette* ["AnimatePalette"] (hPal: HPALETTE; iStartIndex: UINT; cEntries: UINT; ppe: PPALETTEENTRY): BOOL;
PROCEDURE ^ Arc* ["Arc"] (hdc: HDC; x1: INTEGER; y1: INTEGER; x2: INTEGER; y2: INTEGER; x3: INTEGER; y3: INTEGER; x4: INTEGER; y4: INTEGER): BOOL;
PROCEDURE ^ ArcTo* ["ArcTo"] (hdc: HDC; left: INTEGER; top: INTEGER; right: INTEGER; bottom: INTEGER; xr1: INTEGER; yr1: INTEGER; xr2: INTEGER; yr2: INTEGER): BOOL;
PROCEDURE ^ AttachConsole* ["AttachConsole"] (dwProcessId: DWORD): BOOL;
PROCEDURE ^ Beep* ["Beep"] (dwFreq: DWORD; dwDuration: DWORD): BOOL;
PROCEDURE ^ BeginPaint* ["BeginPaint"] (hwnd: HWND; VAR lpPaint: PAINTSTRUCT): HDC;
PROCEDURE ^ BeginPath* ["BeginPath"] (hdc: HDC): BOOL;
PROCEDURE ^ bind* ["bind"] (s: SOCKET; addr: POINTER TO sockaddr; namelen: INTEGER): INTEGER;
PROCEDURE ^ BitBlt* ["BitBlt"] (hdcDest: HDC; nXDest: INTEGER; nYDest: INTEGER; nWidth: INTEGER; nHeight: INTEGER; hdcSrc: HDC; nXSrc: INTEGER; nYSrc: INTEGER; dwRop: DWORD): BOOL;
PROCEDURE ^ BuildCommDCBA* ["BuildCommDCBA"] (lpDef: LPCSTR; lpDBC: LPDCB): BOOL;
PROCEDURE ^ BuildCommDCBAndTimeoutsA* ["BuildCommDCBAndTimeoutsA"] (lpDef: LPCSTR; lpDCB: LPDCB; lpCommTimeouts: LPCOMMTIMEOUTS): BOOL;
PROCEDURE ^ BuildCommDCBAndTimeoutsW* ["BuildCommDCBAndTimeoutsW"] (lpDef: LPCWSTR; lpDCB: LPDCB; lpCommTimeouts: LPCOMMTIMEOUTS): BOOL;
PROCEDURE ^ BuildCommDCBW* ["BuildCommDCBW"] (lpDef: LPCWSTR; lpDBC: LPDCB): BOOL;
PROCEDURE ^ CallNamedPipeA* ["CallNamedPipeA"] (lpNamedPipeName: LPCSTR; lpInBuffer: LPVOID; nInBufferSize: DWORD; lpOutBuffer: LPVOID; nOutBufferSize: DWORD; lpBytesRead: LPDWORD; nTimeOut: DWORD): BOOL;
PROCEDURE ^ CallNamedPipeW* ["CallNamedPipeW"] (lpNamedPipeName: LPCWSTR; lpInBuffer: LPVOID; nInBufferSize: DWORD; lpOutBuffer: LPVOID; nOutBufferSize: DWORD; lpBytesRead: LPDWORD; nTimeOut: DWORD): BOOL;
PROCEDURE ^ CancelDC* ["CancelDC"] (hdc: HDC): BOOL;
PROCEDURE ^ ChangeDisplaySettingsA* ["ChangeDisplaySettingsA"] (lpDevMode: PDEVMODEA; dwFlags: DWORD): LONG;
PROCEDURE ^ ChangeDisplaySettingsExA* ["ChangeDisplaySettingsExA"] (lpszDeviceName: LPCSTR; lpDevMode: PDEVMODEA; hwnd: HWND; dwflags: DWORD; lParam: LPVOID): LONG;
PROCEDURE ^ ChangeDisplaySettingsExW* ["ChangeDisplaySettingsExW"] (lpszDeviceName: LPCWSTR; lpDevMode: PDEVMODEW; hwnd: HWND; dwflags: DWORD; lParam: LPVOID): LONG;
PROCEDURE ^ ChangeDisplaySettingsW* ["ChangeDisplaySettingsW"] (lpDevMode: PDEVMODEW; dwFlags: DWORD): LONG;
PROCEDURE ^ CheckMenuItem* ["CheckMenuItem"] (hmenu: HMENU; uIDCheckItem: UINT; uCheck: UINT): BOOL;
PROCEDURE ^ CheckMenuRadioItem* ["CheckMenuRadioItem"] (hmenu: HMENU; idFirst: UINT; idLast: UINT; idCheck: UINT; uFlags: UINT): BOOL;
PROCEDURE ^ Chord* ["Chord"] (hdc: HDC; x1: INTEGER; y1: INTEGER; x2: INTEGER; y2: INTEGER; x3: INTEGER; y3: INTEGER; x4: INTEGER; y4: INTEGER): BOOL;
PROCEDURE ^ ClearCommBreak* ["ClearCommBreak"] (hFile: HANDLE): BOOL;
PROCEDURE ^ ClearCommError* ["ClearCommError"] (hFile: HANDLE; lpErrors: LPDWORD; lpStat: LPCOMSTAT): BOOL;
PROCEDURE ^ ClientToScreen* ["ClientToScreen"] (hWnd: HWND; lpPoint: LPPOINT): BOOL;
PROCEDURE ^ CloseClipboard* ["CloseClipboard"] (): BOOL;
PROCEDURE ^ CloseFigure* ["CloseFigure"] (hdc: HDC): BOOL;
PROCEDURE ^ CloseHandle* ["CloseHandle"] (hObject: HANDLE): BOOL;
PROCEDURE ^ closesocket* ["closesocket"] (s: SOCKET): INTEGER;
PROCEDURE ^ CombineRgn* ["CombineRgn"] (hrgnDest: HRGN; hrgnSrc1: HRGN; hrgnSrc2: HRGN; fnCombineMode: INTEGER): INTEGER;
PROCEDURE ^ CombineTransform* ["CombineTransform"] (lpxfOut: LPXFORM; lpxf1: PXFORM; lpxf2: PXFORM): BOOL;
PROCEDURE ^ CommConfigDialogA* ["CommConfigDialogA"] (lpszName: LPCSTR; hWnd: HWND; lpCC: LPCOMMCONFIG): BOOL;
PROCEDURE ^ CommConfigDialogW* ["CommConfigDialogW"] (lpszName: LPCWSTR; hWnd: HWND; lpCC: LPCOMMCONFIG): BOOL;
PROCEDURE ^ CompareFileTime* ["CompareFileTime"] (VAR lpFileTime1-: FILETIME; VAR lpFileTime2-: FILETIME): LONG;
PROCEDURE ^ connect* ["connect"] (s: SOCKET; name: POINTER TO sockaddr; namelen: INTEGER): INTEGER;
PROCEDURE ^ ConnectNamedPipe* ["ConnectNamedPipe"] (hNamedPipe: HANDLE; lpOverlapped: LPOVERLAPPED): BOOL;
PROCEDURE ^ ConvertAuxiliaryCounterToPerformanceCounter* ["ConvertAuxiliaryCounterToPerformanceCounter"] (ullAuxiliaryCounterValue: ULONGLONG; VAR lpPerformanceCounterValue: ULONGLONG; VAR lpConversionError: ULONGLONG): HRESULT;
PROCEDURE ^ ConvertFiberToThread* ["ConvertFiberToThread"] (): BOOL;
PROCEDURE ^ ConvertPerformanceCounterToAuxiliaryCounter* ["ConvertPerformanceCounterToAuxiliaryCounter"] (ullPerformanceCounterValue: ULONGLONG; VAR lpAuxiliaryCounterValue: ULONGLONG; VAR lpConversionError: ULONGLONG): HRESULT;
PROCEDURE ^ ConvertThreadToFiber* ["ConvertThreadToFiber"] (lpParameter: LPVOID): LPVOID;
PROCEDURE ^ ConvertThreadToFiberEx* ["ConvertThreadToFiberEx"] (lpParameter: LPVOID; dwFlags: DWORD): LPVOID;
PROCEDURE ^ CopyRect* ["CopyRect"] (VAR lprcDst: RECT; VAR lprcSrc-: RECT): BOOL;
PROCEDURE ^ CreateBitmap* ["CreateBitmap"] (nWidth: INTEGER; nHeight: INTEGER; cPlanes: UINT; cBitsPerPel: UINT; lpvBits: PVOID): HBITMAP;
PROCEDURE ^ CreateBitmapIndirect* ["CreateBitmapIndirect"] (lpbm: PBITMAP): HBITMAP;
PROCEDURE ^ CreateBrushIndirect* ["CreateBrushIndirect"] (plbrush: PLOGBRUSH): HBRUSH;
PROCEDURE ^ CreateCompatibleBitmap* ["CreateCompatibleBitmap"] (hdc: HDC; nWidth: INTEGER; nHeight: INTEGER): HBITMAP;
PROCEDURE ^ CreateCompatibleDC* ["CreateCompatibleDC"] (hdc: HDC): HDC;
PROCEDURE ^ CreateConsoleScreenBuffer* ["CreateConsoleScreenBuffer"] (dwDesiredAccess: DWORD; dwShareMode: DWORD; lpSecurityAttributes: LPSECURITY_ATTRIBUTES; dwFlags: DWORD; lpScreenBufferData: LPVOID): HANDLE;
PROCEDURE ^ CreateDCA* ["CreateDCA"] (pwszDriver: LPCSTR; pwszDevice: LPCSTR; pszPort: LPCSTR; pdm: PDEVMODEA): HDC;
PROCEDURE ^ CreateDCW* ["CreateDCW"] (pwszDriver: LPCWSTR; pwszDevice: LPCWSTR; pszPort: LPCWSTR; pdm: PDEVMODEW): HDC;
PROCEDURE ^ CreateDIBitmap* ["CreateDIBitmap"] (hdc: HDC; pbmih: PBITMAPINFOHEADER; flInit: DWORD; pjBits: PVOID; pbmi: PBITMAPINFO; iUsage: UINT): HBITMAP;
PROCEDURE ^ CreateDIBPatternBrushPt* ["CreateDIBPatternBrushPt"] (lpPackedDIB: PVOID; iUsage: UINT): HBRUSH;
PROCEDURE ^ CreateDIBSection* ["CreateDIBSection"] (hdc: HDC; pbmi: PBITMAPINFO; usage: UINT; ppvBits: PVOID; hSection: HANDLE; offset: DWORD): HBITMAP;
PROCEDURE ^ CreateEllipticRgn* ["CreateEllipticRgn"] (nLeftRect: INTEGER; nTopRect: INTEGER; nRightRect: INTEGER; nBottomRect: INTEGER): HRGN;
PROCEDURE ^ CreateEllipticRgnIndirect* ["CreateEllipticRgnIndirect"] (lprc: LPRECT): HRGN;
PROCEDURE ^ CreateEventA* ["CreateEventA"] (lpEventAttributes: LPSECURITY_ATTRIBUTES; bManualReset: BOOL; bInitialState: BOOL; lpName: LPCSTR): HANDLE;
PROCEDURE ^ CreateEventW* ["CreateEventW"] (lpEventAttributes: LPSECURITY_ATTRIBUTES; bManualReset: BOOL; bInitialState: BOOL; lpName: LPCWSTR): HANDLE;
PROCEDURE ^ CreateFiber* ["CreateFiber"] (dwStackSize: SIZE_T; lpStartAddress: LPFIBER_START_ROUTINE; lpParameter: LPVOID): LPVOID;
PROCEDURE ^ CreateFiberEx* ["CreateFiberEx"] (dwStackCommitSize: SIZE_T; dwStackReserveSize: SIZE_T; dwFlags: DWORD; lpStartAddress: LPFIBER_START_ROUTINE; lpParameter: LPVOID): LPVOID;
PROCEDURE ^ CreateFileA* ["CreateFileA"] (lpFileName: LPCSTR; dwDesiredAccess: DWORD; dwShareMode: DWORD; lpSecurityAttributes: LPSECURITY_ATTRIBUTES; dwCreationDisposition: DWORD; dwFlagsAndAttributes: DWORD; hTemplateFile: HANDLE): HANDLE;
PROCEDURE ^ CreateFileW* ["CreateFileW"] (lpFileName: LPCWSTR; dwDesiredAccess: DWORD; dwShareMode: DWORD; lpSecurityAttributes: LPSECURITY_ATTRIBUTES; dwCreationDisposition: DWORD; dwFlagsAndAttributes: DWORD; hTemplateFile: HANDLE): HANDLE;
PROCEDURE ^ CreateFontA* ["CreateFontA"] (cHeight: INTEGER; cWidth: INTEGER; cEscapement: INTEGER; cOrientation: INTEGER; cWeight: INTEGER; bItalic: DWORD; bUnderline: DWORD; bStrikeOut: DWORD; iCharSet: DWORD; iOutPrecision: DWORD; iClipPrecision: DWORD; iQuality: DWORD; iPitchAndFamily: DWORD; pszFaceName: LPCSTR): HFONT;
PROCEDURE ^ CreateFontIndirectA* ["CreateFontIndirectA"] (lplf: PLOGFONTA): HFONT;
PROCEDURE ^ CreateFontIndirectExA* ["CreateFontIndirectExA"] (Arg1: PENUMLOGFONTEXDVA): HFONT;
PROCEDURE ^ CreateFontIndirectExW* ["CreateFontIndirectExW"] (Arg1: PENUMLOGFONTEXDVW): HFONT;
PROCEDURE ^ CreateFontIndirectW* ["CreateFontIndirectW"] (lplf: PLOGFONTW): HFONT;
PROCEDURE ^ CreateFontW* ["CreateFontW"] (cHeight: INTEGER; cWidth: INTEGER; cEscapement: INTEGER; cOrientation: INTEGER; cWeight: INTEGER; bItalic: DWORD; bUnderline: DWORD; bStrikeOut: DWORD; iCharSet: DWORD; iOutPrecision: DWORD; iClipPrecision: DWORD; iQuality: DWORD; iPitchAndFamily: DWORD; pszFaceName: LPCWSTR): HFONT;
PROCEDURE ^ CreateHalftonePalette* ["CreateHalftonePalette"] (hdc: HDC): HPALETTE;
PROCEDURE ^ CreateHatchBrush* ["CreateHatchBrush"] (iHatch: INTEGER; color: COLORREF): HBRUSH;
PROCEDURE ^ CreateICA* ["CreateICA"] (pszDriver: LPCSTR; pszDevice: LPCSTR; pszPort: LPCSTR; pdm: PDEVMODEA): HDC;
PROCEDURE ^ CreateICW* ["CreateICW"] (pszDriver: LPCWSTR; pszDevice: LPCWSTR; pszPort: LPCWSTR; pdm: PDEVMODEW): HDC;
PROCEDURE ^ CreateMailslotA* ["CreateMailslotA"] (lpName: LPCSTR; nMaxMessageSize: DWORD; lReadTimeout: DWORD; lpSecurityAttributes: LPSECURITY_ATTRIBUTES): HANDLE;
PROCEDURE ^ CreateMailslotW* ["CreateMailslotW"] (lpName: LPCWSTR; nMaxMessageSize: DWORD; lReadTimeout: DWORD; lpSecurityAttributes: LPSECURITY_ATTRIBUTES): HANDLE;
PROCEDURE ^ CreateMutexA* ["CreateMutexA"] (lpMutexAttributes: LPSECURITY_ATTRIBUTES; bInitialOwner: BOOL; lpName: LPCSTR): HANDLE;
PROCEDURE ^ CreateMutexW* ["CreateMutexW"] (lpMutexAttributes: LPSECURITY_ATTRIBUTES; bInitialOwner: BOOL; lpName: LPCWSTR): HANDLE;
PROCEDURE ^ CreateNamedPipeA* ["CreateNamedPipeA"] (lpName: LPCSTR; dwOpenMode: DWORD; dwPipeMode: DWORD; nMaxInstances: DWORD; nOutBufferSize: DWORD; nInBufferSize: DWORD; nDefaultTimeOut: DWORD; lpSecurityAttributes: LPSECURITY_ATTRIBUTES): HANDLE;
PROCEDURE ^ CreateNamedPipeW* ["CreateNamedPipeW"] (lpName: LPCWSTR; dwOpenMode: DWORD; dwPipeMode: DWORD; nMaxInstances: DWORD; nOutBufferSize: DWORD; nInBufferSize: DWORD; nDefaultTimeOut: DWORD; lpSecurityAttributes: LPSECURITY_ATTRIBUTES): HANDLE;
PROCEDURE ^ CreatePalette* ["CreatePalette"] (plpal: PLOGPALETTE): HPALETTE;
PROCEDURE ^ CreatePatternBrush* ["CreatePatternBrush"] (hbm: HBITMAP): HBRUSH;
PROCEDURE ^ CreatePen* ["CreatePen"] (fnPenStyle: INTEGER; nWidth: INTEGER; crColor: COLORREF): HPEN;
PROCEDURE ^ CreatePenIndirect* ["CreatePenIndirect"] (plpen: PLOGPEN): HPEN;
PROCEDURE ^ CreatePipe* ["CreatePipe"] (hReadPipe: HANDLE; hWritePipe: PHANDLE; lpPipeAttributes: LPSECURITY_ATTRIBUTES; nSize: DWORD): BOOL;
PROCEDURE ^ CreatePolygonRgn* ["CreatePolygonRgn"] (lppt: LPPOINT; cPoints: INTEGER; fnPolyFillMode: INTEGER): HRGN;
PROCEDURE ^ CreatePolyPolygonRgn* ["CreatePolyPolygonRgn"] (lppt: LPPOINT; lpPolyCounts: LPINT; nCount: INTEGER; fnPolyFillMode: INTEGER): HRGN;
PROCEDURE ^ CreateProcessA* ["CreateProcessA"] (lpApplicationName: LPCSTR; lpCommandLine: LPSTR; lpProcessAttributes: LPSECURITY_ATTRIBUTES; lpThreadAttributes: LPSECURITY_ATTRIBUTES; bInheritHandles: BOOL; dwCreationFlags: DWORD; lpEnvironment: LPVOID; lpCurrentDirectory: LPCSTR; lpStartupInfo: LPSTARTUPINFO; lpProcessInformation: LPPROCESS_INFORMATION);
PROCEDURE ^ CreateProcessW* ["CreateProcessW"] (lpApplicationName: LPCWSTR; lpCommandLine: LPWSTR; lpProcessAttributes: LPSECURITY_ATTRIBUTES; lpThreadAttributes: LPSECURITY_ATTRIBUTES; bInheritHandles: BOOL; dwCreationFlags: DWORD; lpEnvironment: LPVOID; lpCurrentDirectory: LPCWSTR; lpStartupInfo: LPSTARTUPINFO; lpProcessInformation: LPPROCESS_INFORMATION);
PROCEDURE ^ CreateRectRgn* ["CreateRectRgn"] (nLeftRect: INTEGER; nTopRect: INTEGER; nRightRect: INTEGER; nBottomRect: INTEGER): HRGN;
PROCEDURE ^ CreateRectRgnIndirect* ["CreateRectRgnIndirect"] (lprc: LPRECT): HRGN;
PROCEDURE ^ CreateRoundRectRgn* ["CreateRoundRectRgn"] (nLeftRect: INTEGER; nTopRect: INTEGER; nRightRect: INTEGER; nBottomRect: INTEGER; nWidthEllipse: INTEGER; nHeightEllipse: INTEGER): HRGN;
PROCEDURE ^ CreateSemaphoreA* ["CreateSemaphoreA"] (lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES; lInitialCount: ULONG; lMaximumCount: ULONG; lpName: LPCSTR): HANDLE;
PROCEDURE ^ CreateSemaphoreW* ["CreateSemaphoreW"] (lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES; lInitialCount: ULONG; lMaximumCount: ULONG; lpName: LPCWSTR): HANDLE;
PROCEDURE ^ CreateSolidBrush* ["CreateSolidBrush"] (crColor: COLORREF): HBRUSH;
PROCEDURE ^ CreateThread* ["CreateThread"] (lpThreadAttributes: LPSECURITY_ATTRIBUTES; dwStackSize: SIZE_T; lpStartAddress: LPTHREAD_START_ROUTINE; lpParameter: LPVOID; dwCreationFlags: DWORD; lpThreadId: LPDWORD): HANDLE;
PROCEDURE ^ CreateWindowExA* ["CreateWindowExA"] (dwExStyle: DWORD; lpClassName: LPCSTR; lpWindowName: LPCSTR; dwStyle: DWORD; x: INTEGER; y: INTEGER; nWidth: INTEGER; nHeight: INTEGER; hWndParent: HWND; hMenu: HMENU; hInstace: HINSTANCE; lParam: LPVOID): HWND;
PROCEDURE ^ CreateWindowExW* ["CreateWindowExW"] (dwExStyle: DWORD; lpClassName: LPCWSTR; lpWindowName: LPCWSTR; dwStyle: DWORD; x: INTEGER; y: INTEGER; nWidth: INTEGER; nHeight: INTEGER; hWndParent: HWND; hMenu: HMENU; hInstace: HINSTANCE; lParam: LPVOID): HWND;
PROCEDURE ^ DefWindowProcA* ["DefWindowProcA"] (hWnd: HWND; Msg: UINT; wParam: WPARAM; lParam: LPARAM): LRESULT;
PROCEDURE ^ DefWindowProcW* ["DefWindowProcW"] (hWnd: HWND; Msg: UINT; wParam: WPARAM; lParam: LPARAM): LRESULT;
PROCEDURE ^ DeleteAtom* ["DeleteAtom"] (nAtom: ATOM): ATOM;
PROCEDURE ^ DeleteCriticalSection* ["DeleteCriticalSection"] (lpCriticalSection: LPCRITICAL_SECTION);
PROCEDURE ^ DeleteDC* ["DeleteDC"] (hdc: HDC): BOOL;
PROCEDURE ^ DeleteFiber* ["DeleteFiber"] (lpFiber: LPVOID);
PROCEDURE ^ DeleteFileA* ["DeleteFileA"] (lpFileName: LPCSTR): BOOL;
PROCEDURE ^ DeleteFileW* ["DeleteFileW"] (lpFileName: LPCWSTR): BOOL;
PROCEDURE ^ DeleteObject* ["DeleteObject"] (hObject: HGDIOBJ): BOOL;
PROCEDURE ^ DeviceCapabilitiesA* ["DeviceCapabilitiesA"] (pDevice: LPCSTR; pPort: LPCSTR; fwCapability: WORD; pOutput: LPSTR; pDevMode: PDEVMODEA): INTEGER;
PROCEDURE ^ DeviceCapabilitiesW* ["DeviceCapabilitiesW"] (pDevice: LPCWSTR; pPort: LPCWSTR; fwCapability: WORD; pOutput: LPWSTR; pDevMode: PDEVMODEW): INTEGER;
PROCEDURE ^ DisconnectNamedPipe* ["DisconnectNamedPipe"] (hNamedPipe: HANDLE): BOOL;
PROCEDURE ^ DispatchMessageA* ["DispatchMessageA"] (VAR lpmsg-: MSG): LRESULT;
PROCEDURE ^ DispatchMessageW* ["DispatchMessageW"] (VAR lpmsg-: MSG): LRESULT;
PROCEDURE ^ DosDateTimeToFileTime* ["DosDateTimeToFileTime"] (wFatDate: WORD; wFatTime: WORD; VAR lpFileTime: FILETIME): BOOL;
PROCEDURE ^ DPtoLP* ["DPtoLP"] (hdc: HDC; lppt: LPPOINT; c: INTEGER): BOOL;
PROCEDURE ^ DrawAnimatedRects* ["DrawAnimatedRects"] (hwnd: HWND; idAni: INTEGER; lprcFrom: LPRECT; lprcTo: LPRECT): BOOL;
PROCEDURE ^ DrawCaption* ["DrawCaption"] (hwnd: HWND; hdc: HDC; lprect: LPRECT; flags: UINT): BOOL;
PROCEDURE ^ DrawEdge* ["DrawEdge"] (hdc: HDC; qrc: LPRECT; edge: UINT; grfFlags: UINT): BOOL;
PROCEDURE ^ DrawEscape* ["DrawEscape"] (hdc: HDC; iEscape: INTEGER; cjIn: INTEGER; lpIn: LPCSTR): INTEGER;
PROCEDURE ^ DrawFocusRect* ["DrawFocusRect"] (hDC: HDC; lprc: LPRECT): BOOL;
PROCEDURE ^ DrawFrameControl* ["DrawFrameControl"] (hdc: HDC; lpRect: LPRECT; uType: UINT; uState: UINT): BOOL;
PROCEDURE ^ DrawMenuBar* ["DrawMenuBar"] (hWnd: HWND): BOOL;
PROCEDURE ^ DrawStateA* ["DrawStateA"] (hdc: HDC; hbrFore: HBRUSH; qfnCallBack: DRAWSTATEPROC; lData: LPARAM; wData: WPARAM; x: INTEGER; y: INTEGER; cx: INTEGER; cy: INTEGER; uFlags: UINT): BOOL;
PROCEDURE ^ DrawStateW* ["DrawStateW"] (hdc: HDC; hbrFore: HBRUSH; qfnCallBack: DRAWSTATEPROC; lData: LPARAM; wData: WPARAM; x: INTEGER; y: INTEGER; cx: INTEGER; cy: INTEGER; uFlags: UINT): BOOL;
PROCEDURE ^ DrawTextA* ["DrawTextA"] (hdc: HDC; lpchText: LPCSTR; cchText: INTEGER; lprc: LPRECT; format: UINT): INTEGER;
PROCEDURE ^ DrawTextExA* ["DrawTextExA"] (hdc: HDC; lpchText: LPSTR; cchText: INTEGER; lprc: LPRECT; format: UINT; lpdtp: LPDRAWTEXTPARAMS): INTEGER;
PROCEDURE ^ DrawTextExW* ["DrawTextExW"] (hdc: HDC; lpchText: LPWSTR; cchText: INTEGER; lprc: LPRECT; format: UINT; lpdtp: LPDRAWTEXTPARAMS): INTEGER;
PROCEDURE ^ DrawTextW* ["DrawTextW"] (hdc: HDC; lpchText: LPCWSTR; cchText: INTEGER; lprc: LPRECT; format: UINT): INTEGER;
PROCEDURE ^ Ellipse* ["Ellipse"] (hdc: HDC; left: INTEGER; top: INTEGER; right: INTEGER; bottom: INTEGER): BOOL;
PROCEDURE ^ EmptyClipboard* ["EmptyClipboard"] (): BOOL;
PROCEDURE ^ EnableMenuItem* ["EnableMenuItem"] (hMenu: HMENU; uIDEnableItem: UINT; uEnable: UINT): BOOL;
PROCEDURE ^ EndDialog* ["EndDialog"] (hDlg: HWND; nResult: INT_PTR): BOOL;
PROCEDURE ^ EndPaint* ["EndPaint"] (hWnd: HWND; VAR lpPaint-: PAINTSTRUCT): BOOL;
PROCEDURE ^ EndPath* ["EndPath"] (hdc: HDC): BOOL;
PROCEDURE ^ EnterCriticalSection* ["EnterCriticalSection"] (lpCriticalSection: LPCRITICAL_SECTION);
PROCEDURE ^ EnumDisplayDevicesA* ["EnumDisplayDevicesA"] (lpDevice: LPCSTR; iDevNum: DWORD; lpDisplayDevice: PDISPLAY_DEVICEA; dwFlags: DWORD): BOOL;
PROCEDURE ^ EnumDisplayDevicesW* ["EnumDisplayDevicesW"] (lpDevice: LPCWSTR; iDevNum: DWORD; lpDisplayDevice: PDISPLAY_DEVICEW; dwFlags: DWORD): BOOL;
PROCEDURE ^ EnumDisplayMonitors* ["EnumDisplayMonitors"] (hdc: HDC; lprcClip: LPCRECT; lpfnEnum: MONITORENUMPROC; dwData: LPARAM): BOOL;
PROCEDURE ^ EnumDisplaySettingsA* ["EnumDisplaySettingsA"] (lpszDeviceName: LPCSTR; iModeNum: DWORD; lpDevMode: PDEVMODEA): BOOL;
PROCEDURE ^ EnumDisplaySettingsExA* ["EnumDisplaySettingsExA"] (lpszDeviceName: LPCSTR; iModeNum: DWORD; lpDevMode: PDEVMODEA; dwFlags: DWORD): BOOL;
PROCEDURE ^ EnumDisplaySettingsExW* ["EnumDisplaySettingsExW"] (lpszDeviceName: LPCWSTR; iModeNum: DWORD; lpDevMode: PDEVMODEW; dwFlags: DWORD): BOOL;
PROCEDURE ^ EnumDisplaySettingsW* ["EnumDisplaySettingsW"] (lpszDeviceName: LPCWSTR; iModeNum: DWORD; lpDevMode: PDEVMODEW): BOOL;
PROCEDURE ^ EnumDynamicTimeZoneInformation* ["EnumDynamicTimeZoneInformation"] (dwIndex: DWORD; VAR lpTimeZoneInformation-: DYNAMIC_TIME_ZONE_INFORMATION): DWORD;
PROCEDURE ^ EnumFontFamiliesExA* ["EnumFontFamiliesExA"] (hdc: HDC; lpLogfont: LPLOGFONTA; lpProc: FONTENUMPROCA; lParam: LPARAM; dwFlags: DWORD): INTEGER;
PROCEDURE ^ EnumFontFamiliesExW* ["EnumFontFamiliesExW"] (hdc: HDC; lpLogfont: LPLOGFONTW; lpProc: FONTENUMPROCW; lParam: LPARAM; dwFlags: DWORD): INTEGER;
PROCEDURE ^ EnumObjects* ["EnumObjects"] (hdc: HDC; nType: INTEGER; lpFunc: GOBJENUMPROC; lParam: LPARAM): INTEGER;
PROCEDURE ^ EqualRect* ["EqualRect"] (VAR lprc1-: RECT; VAR lprc2-: RECT): BOOL;
PROCEDURE ^ EqualRgn* ["EqualRgn"] (hSrcRgn1: HRGN; hSrcRgn2: HRGN): BOOL;
PROCEDURE ^ EscapeCommFunction* ["EscapeCommFunction"] (hFile: HANDLE; dwFunc: DWORD): BOOL;
PROCEDURE ^ ExcludeClipRect* ["ExcludeClipRect"] (hdc: HDC; left: INTEGER; top: INTEGER; right: INTEGER; bottom: INTEGER): INTEGER;
PROCEDURE ^ ExcludeUpdateRgn* ["ExcludeUpdateRgn"] (hDC: HDC; hWnd: HWND): INTEGER;
PROCEDURE ^ ExitProcess* ["ExitProcess"] (uExitCode: DWORD);
PROCEDURE ^ ExitThread* ["ExitThread"] (dwExitCode: DWORD);
PROCEDURE ^ ExtCreatePen* ["ExtCreatePen"] (iPenStyle: DWORD; cWidth: DWORD; plbrush: PLOGBRUSH; cStyle: DWORD; pstyle: PDWORD): HPEN;
PROCEDURE ^ ExtCreateRegion* ["ExtCreateRegion"] (lpXform: LPXFORM; nCount: DWORD; lpRgnData: LPRGNDATA): HRGN;
PROCEDURE ^ ExtFloodFill* ["ExtFloodFill"] (hdc: HDC; x: INTEGER; y: INTEGER; color: COLORREF; type: UINT): BOOL;
PROCEDURE ^ ExtSelectClipRgn* ["ExtSelectClipRgn"] (hdc: HDC; hrgn: HRGN; mode: INTEGER): INTEGER;
PROCEDURE ^ ExtTextOutA* ["ExtTextOutA"] (hdc: HDC; x: INTEGER; y: INTEGER; options: UINT; lprect: LPRECT; lpString: LPCSTR; c: UINT; lpDx: LPINT): BOOL;
PROCEDURE ^ ExtTextOutW* ["ExtTextOutW"] (hdc: HDC; x: INTEGER; y: INTEGER; options: UINT; lprect: LPRECT; lpString: LPCWSTR; c: UINT; lpDx: LPINT): BOOL;
PROCEDURE ^ FatalAppExitA* ["FatalAppExitA"] (uAction: UINT; lpMessageText: LPCSTR);
PROCEDURE ^ FatalAppExitW* ["FatalAppExitW"] (uAction: UINT; lpMessageText: LPCWSTR);
PROCEDURE ^ FileTimeToDosDateTime* ["FileTimeToDosDateTime"] (VAR lpFileTime-: FILETIME; VAR lpFatDate: WORD; VAR lpFatTime: WORD): BOOL;
PROCEDURE ^ FileTimeToLocalFileTime* ["FileTimeToLocalFileTime"] (VAR lpFileTime-: FILETIME; VAR lpLocalFileTime: FILETIME): BOOL;
PROCEDURE ^ FileTimeToSystemTime* ["FileTimeToSystemTime"] (VAR lpFileTime-: FILETIME; VAR lpSystemTime: SYSTEMTIME): BOOL;
PROCEDURE ^ FillConsoleOutputAttribute* ["FillConsoleOutputAttribute"] (hConsoleOutput: HANDLE; wAttribute: WORD; nLength: DWORD; dwWriteCoord: COORD; lpNumberOfAttrsWritten: LPDWORD): BOOL;
PROCEDURE ^ FillConsoleOutputCharacterA* ["FillConsoleOutputCharacterA"] (hConsoleOutput: HANDLE; cCharacter: CHAR; nLength: DWORD; dwWriteCoord: COORD; lpNumberOfAttrsWritten: LPDWORD): BOOL;
PROCEDURE ^ FillConsoleOutputCharacterW* ["FillConsoleOutputCharacterW"] (hConsoleOutput: HANDLE; cCharacter: WCHAR; nLength: DWORD; dwWriteCoord: COORD; lpNumberOfAttrsWritten: LPDWORD): BOOL;
PROCEDURE ^ FillPath* ["FillPath"] (hdc: HDC): BOOL;
PROCEDURE ^ FillRect* ["FillRect"] (hDC: HDC; VAR lprc-: RECT; hbr: HBRUSH): INTEGER;
PROCEDURE ^ FillRgn* ["FillRgn"] (hdc: HDC; hrgn: HRGN; hbr: HBRUSH): BOOL;
PROCEDURE ^ FindAtomA* ["FindAtomA"] (lpString: LPCSTR): ATOM;
PROCEDURE ^ FindAtomW* ["FindAtomW"] (lpString: LPCWSTR): ATOM;
PROCEDURE ^ FlattenPath* ["FlattenPath"] (hdc: HDC): BOOL;
PROCEDURE ^ FlushConsoleInputBuffer* ["FlushConsoleInputBuffer"] (hConsoleInput: HANDLE): BOOL;
PROCEDURE ^ FrameRect* ["FrameRect"] (hDC: HDC; lprc: LPRECT; hbr: HBRUSH): INTEGER;
PROCEDURE ^ FrameRgn* ["FrameRgn"] (hdc: HDC; hrgn: HRGN; hbr: HBRUSH; nWidth: INTEGER; nHeight: INTEGER): BOOL;
PROCEDURE ^ freeaddrinfo* ["freeaddrinfo"] (pAddrInfo: PADDRINFOA);
PROCEDURE ^ FreeConsole* ["FreeConsole"] (): BOOL;
PROCEDURE ^ FreeLibrary* ["FreeLibrary"] (hModule: HMODULE): BOOL;
PROCEDURE ^ GdiFlush* ["GdiFlush"] (): BOOL;
PROCEDURE ^ GdiGetBatchLimit* ["GdiGetBatchLimit"] (): DWORD;
PROCEDURE ^ GdiSetBatchLimit* ["GdiSetBatchLimit"] (dw: DWORD): DWORD;
PROCEDURE ^ GenerateConsoleCtrlEvent* ["GenerateConsoleCtrlEvent"] (dwCtrlEvent: DWORD; dwProcessGroupId: DWORD): BOOL;
PROCEDURE ^ getaddrinfo* ["getaddrinfo"] (pNodeName: PCSTR; pServiceName: PCSTR; pHints: PADDRINFOA; ppResult: SYSTEM.ADDRESS): INT;
PROCEDURE ^ GetArcDirection* ["GetArcDirection"] (hdc: HDC): INTEGER;
PROCEDURE ^ GetAspectRatioFilterEx* ["GetAspectRatioFilterEx"] (hdc: HDC; lpsize: LPSIZE): BOOL;
PROCEDURE ^ GetAtomNameA* ["GetAtomNameA"] (nAtom: ATOM; lbBuffer: LPSTR; nSize: INTEGER): UINT;
PROCEDURE ^ GetAtomNameW* ["GetAtomNameW"] (nAtom: ATOM; lbBuffer: LPWSTR; nSize: INTEGER): UINT;
PROCEDURE ^ GetBitmapDimensionEx* ["GetBitmapDimensionEx"] (hbit: HBITMAP; lpsize: LPSIZE): BOOL;
PROCEDURE ^ GetBkColor* ["GetBkColor"] (hdc: HDC): COLORREF;
PROCEDURE ^ GetBkMode* ["GetBkMode"] (hdc: HDC): INTEGER;
PROCEDURE ^ GetBoundsRect* ["GetBoundsRect"] (hdc: HDC; lprect: LPRECT; flags: UINT): UINT;
PROCEDURE ^ GetBrushOrgEx* ["GetBrushOrgEx"] (hdc: HDC; lppt: LPPOINT): BOOL;
PROCEDURE ^ GetCharABCWidthsA* ["GetCharABCWidthsA"] (hdc: HDC; wFirst: UINT; wLast: UINT; lpABC: LPABC): BOOL;
PROCEDURE ^ GetCharABCWidthsFloatA* ["GetCharABCWidthsFloatA"] (hdc: HDC; iFirst: UINT; iLast: UINT; lpABC: LPABCFLOAT): BOOL;
PROCEDURE ^ GetCharABCWidthsFloatW* ["GetCharABCWidthsFloatW"] (hdc: HDC; iFirst: UINT; iLast: UINT; lpABC: LPABCFLOAT): BOOL;
PROCEDURE ^ GetCharABCWidthsI* ["GetCharABCWidthsI"] (hdc: HDC; giFirst: UINT; cgi: UINT; pgi: LPWORD; pabc: LPABC): BOOL;
PROCEDURE ^ GetCharABCWidthsW* ["GetCharABCWidthsW"] (hdc: HDC; wFirst: UINT; wLast: UINT; lpABC: LPABC): BOOL;
PROCEDURE ^ GetCharacterPlacementA* ["GetCharacterPlacementA"] (hdc: HDC; lpString: LPCSTR; nCount: INTEGER; nMexExtent: INTEGER; lpResults: LPGCP_RESULTSA; dwFlags: DWORD): DWORD;
PROCEDURE ^ GetCharacterPlacementW* ["GetCharacterPlacementW"] (hdc: HDC; lpString: LPCWSTR; nCount: INTEGER; nMexExtent: INTEGER; lpResults: LPGCP_RESULTSW; dwFlags: DWORD): DWORD;
PROCEDURE ^ GetCharWidth32A* ["GetCharWidth32A"] (hdc: HDC; iFirst: UINT; iLast: UINT; lpBuffer: LPINT): BOOL;
PROCEDURE ^ GetCharWidth32W* ["GetCharWidth32W"] (hdc: HDC; iFirst: UINT; iLast: UINT; lpBuffer: LPINT): BOOL;
PROCEDURE ^ GetCharWidthFloatA* ["GetCharWidthFloatA"] (hdc: HDC; iFirst: UINT; iLast: UINT; lpBuffer: PFLOAT): BOOL;
PROCEDURE ^ GetCharWidthFloatW* ["GetCharWidthFloatW"] (hdc: HDC; iFirst: UINT; iLast: UINT; lpBuffer: PFLOAT): BOOL;
PROCEDURE ^ GetCharWidthI* ["GetCharWidthI"] (hdc: HDC; giFirst: UINT; cgi: UINT; pgi: LPWORD; piWidths: LPINT): BOOL;
PROCEDURE ^ GetClassInfoA* ["GetClassInfoA"] (hInstance: HINSTANCE; lpClassName: LPCSTR; lpWndClass: LPWNDCLASSA): BOOL;
PROCEDURE ^ GetClassInfoExA* ["GetClassInfoExA"] (hinst: HINSTANCE; lpszClass: LPCSTR; lpwcx: LPWNDCLASSEXA): BOOL;
PROCEDURE ^ GetClassInfoExW* ["GetClassInfoExW"] (hinst: HINSTANCE; lpszClass: LPCWSTR; lpwcx: LPWNDCLASSEXW): BOOL;
PROCEDURE ^ GetClassInfoW* ["GetClassInfoW"] (hInstance: HINSTANCE; lpClassName: LPCWSTR; lpWndClass: LPWNDCLASSW): BOOL;
PROCEDURE ^ GetClassLongA* ["GetClassLongA"] (hWnd: HWND; nIndex: INTEGER): DWORD;
PROCEDURE ^ GetClassLongPtrA* ["GetClassLongPtrA"] (hWnd: HWND; nIndex: INTEGER): ULONG_PTR;
PROCEDURE ^ GetClassLongPtrW* ["GetClassLongPtrW"] (hWnd: HWND; nIndex: INTEGER): ULONG_PTR;
PROCEDURE ^ GetClassLongW* ["GetClassLongW"] (hWnd: HWND; nIndex: INTEGER): DWORD;
PROCEDURE ^ GetClassNameA* ["GetClassNameA"] (hWnd: HWND; lpClassName: LPSTR; nMaxCount: INTEGER): INTEGER;
PROCEDURE ^ GetClassNameW* ["GetClassNameW"] (hWnd: HWND; lpClassName: LPWSTR; nMaxCount: INTEGER): INTEGER;
PROCEDURE ^ GetClassWord* ["GetClassWord"] (hWnd: HWND; nIndex: INTEGER): WORD;
PROCEDURE ^ GetClipboardData* ["GetClipboardData"] (uFormat: UINT): HANDLE;
PROCEDURE ^ GetClipBox* ["GetClipBox"] (hdc: HDC; lprect: LPRECT): INTEGER;
PROCEDURE ^ GetClipRgn* ["GetClipRgn"] (hdc: HDC; hrgn: HRGN): INTEGER;
PROCEDURE ^ GetColorAdjustment* ["GetColorAdjustment"] (hdc: HDC; lpca: LPCOLORADJUSTMENT): BOOL;
PROCEDURE ^ GetCommandLineA* ["GetCommandLineA"] (): LPSTR;
PROCEDURE ^ GetCommandLineW* ["GetCommandLineW"] (): LPWSTR;
PROCEDURE ^ GetCommConfig* ["GetCommConfig"] (hCommDev: HANDLE; lpCC: LPCOMMCONFIG; lpdwSize: LPDWORD): BOOL;
PROCEDURE ^ GetCommMask* ["GetCommMask"] (hFile: HANDLE; lpEvtMask: LPDWORD): BOOL;
PROCEDURE ^ GetCommModemStatus* ["GetCommModemStatus"] (hFile: HANDLE; lpModemStat: LPDWORD): BOOL;
PROCEDURE ^ GetCommProperties* ["GetCommProperties"] (hFile: HANDLE; lpCommProp: LPCOMMPROP): BOOL;
PROCEDURE ^ GetCommState* ["GetCommState"] (hFile: HANDLE; lpDCB: LPDCB): BOOL;
PROCEDURE ^ GetCommTimeouts* ["GetCommTimeouts"] (hFile: HANDLE; lpCommTimeouts: LPCOMMTIMEOUTS): BOOL;
PROCEDURE ^ GetConsoleAliasA* ["GetConsoleAliasA"] (lpSource: LPSTR; lpTargetBuffer: LPSTR; TargetBufferLength: DWORD; lpExeName: LPSTR): DWORD;
PROCEDURE ^ GetConsoleAliasesA* ["GetConsoleAliasesA"] (lpAliasBuffer: LPSTR; AliasBufferLength: DWORD; lpExeName: LPSTR): DWORD;
PROCEDURE ^ GetConsoleAliasesLengthA* ["GetConsoleAliasesLengthA"] (lpExeName: LPSTR): DWORD;
PROCEDURE ^ GetConsoleAliasesLengthW* ["GetConsoleAliasesLengthW"] (lpExeName: LPWSTR): DWORD;
PROCEDURE ^ GetConsoleAliasesW* ["GetConsoleAliasesW"] (lpAliasBuffer: LPWSTR; AliasBufferLength: DWORD; lpExeName: LPWSTR): DWORD;
PROCEDURE ^ GetConsoleAliasExesA* ["GetConsoleAliasExesA"] (lpExeNameBuffer: LPSTR; ExeNameBufferLength: DWORD): DWORD;
PROCEDURE ^ GetConsoleAliasExesLength* ["GetConsoleAliasExesLength"] (): DWORD;
PROCEDURE ^ GetConsoleAliasExesW* ["GetConsoleAliasExesW"] (lpExeNameBuffer: LPWSTR; ExeNameBufferLength: DWORD): DWORD;
PROCEDURE ^ GetConsoleAliasW* ["GetConsoleAliasW"] (lpSource: LPWSTR; lpTargetBuffer: LPWSTR; TargetBufferLength: DWORD; lpExeName: LPWSTR): DWORD;
PROCEDURE ^ GetConsoleCP* ["GetConsoleCP"] (): UINT;
PROCEDURE ^ GetConsoleCursorInfo* ["GetConsoleCursorInfo"] (hConsoleOutput: HANDLE; lpConsoleCursorInfo: PCONSOLE_CURSOR_INFO): BOOL;
PROCEDURE ^ GetConsoleDisplayMode* ["GetConsoleDisplayMode"] (lpModeFlags: LPDWORD): BOOL;
PROCEDURE ^ GetConsoleFontSize* ["GetConsoleFontSize"] (hConsoleOutput: HANDLE; nFont: DWORD): COORD_RETURN;
PROCEDURE ^ GetConsoleHistoryInfo* ["GetConsoleHistoryInfo"] (lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO): BOOL;
PROCEDURE ^ GetConsoleMode* ["GetConsoleMode"] (hConsoleHandle: HANDLE; lpMode: LPDWORD): BOOL;
PROCEDURE ^ GetConsoleOriginalTitleA* ["GetConsoleOriginalTitleA"] (lpConsoleTitle: LPSTR; nSize: DWORD): DWORD;
PROCEDURE ^ GetConsoleOriginalTitleW* ["GetConsoleOriginalTitleW"] (lpConsoleTitle: LPWSTR; nSize: DWORD): DWORD;
PROCEDURE ^ GetConsoleOutputCP* ["GetConsoleOutputCP"] (): UINT;
PROCEDURE ^ GetConsoleProcessList* ["GetConsoleProcessList"] (lpdwProcessList: LPDWORD; dwProcessCount: DWORD): DWORD;
PROCEDURE ^ GetConsoleScreenBufferInfo* ["GetConsoleScreenBufferInfo"] (hConsoleOutput: HANDLE; lpConsoleScreenBufferInfo: PCONSOLE_SCREEN_BUFFER_INFO): BOOL;
PROCEDURE ^ GetConsoleScreenBufferInfoEx* ["GetConsoleScreenBufferInfoEx"] (hConsoleOutput: HANDLE; lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX): BOOL;
PROCEDURE ^ GetConsoleSelectionInfo* ["GetConsoleSelectionInfo"] (lpConsoleSelectionInfo: PCONSOLE_SELECTION_INFO): BOOL;
PROCEDURE ^ GetConsoleTitleA* ["GetConsoleTitleA"] (lpConsoleTitle: LPSTR): DWORD;
PROCEDURE ^ GetConsoleTitleW* ["GetConsoleTitleW"] (lpConsoleTitle: LPWSTR): DWORD;
PROCEDURE ^ GetConsoleWindow* ["GetConsoleWindow"] (): HWND;
PROCEDURE ^ GetCurrentConsoleFont* ["GetCurrentConsoleFont"] (hConsoleOutput: HANDLE; bMaximumWindow: BOOL; lpConsoleCurrentFont: PCONSOLE_FONT_INFO): BOOL;
PROCEDURE ^ GetCurrentConsoleFontEx* ["GetCurrentConsoleFontEx"] (hConsoleOutput: HANDLE; bMaximumWindow: BOOL; lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX): BOOL;
PROCEDURE ^ GetCurrentDirectoryA* ["GetCurrentDirectoryA"] (nBufferLength: DWORD; lpBuffer: LPSTR): DWORD;
PROCEDURE ^ GetCurrentDirectoryW* ["GetCurrentDirectoryW"] (nBufferLength: DWORD; lpBuffer: LPWSTR): DWORD;
PROCEDURE ^ GetCurrentObject* ["GetCurrentObject"] (hdc: HDC; type: UINT): HGDIOBJ;
PROCEDURE ^ GetCurrentPositionEx* ["GetCurrentPositionEx"] (hdc: HDC; lppt: LPPOINT): BOOL;
PROCEDURE ^ GetCurrentProcess* ["GetCurrentProcess"] (): HANDLE;
PROCEDURE ^ GetCurrentProcessId* ["GetCurrentProcessId"] (): DWORD;
PROCEDURE ^ GetCurrentProcessorNumber* ["GetCurrentProcessorNumber"] (): DWORD;
PROCEDURE ^ GetCurrentThread* ["GetCurrentThread"] (): HANDLE;
PROCEDURE ^ GetCurrentThreadId* ["GetCurrentThreadId"] (): DWORD;
PROCEDURE ^ GetDC* ["GetDC"] (hWnd: HWND): HDC;
PROCEDURE ^ GetDCBrushColor* ["GetDCBrushColor"] (hdc: HDC): COLORREF;
PROCEDURE ^ GetDCEx* ["GetDCEx"] (hWnd: HWND; hrgnClip: HRGN; flags: DWORD): HDC;
PROCEDURE ^ GetDCOrgEx* ["GetDCOrgEx"] (hdc: HDC; lppt: LPPOINT): BOOL;
PROCEDURE ^ GetDCPenColor* ["GetDCPenColor"] (hdc: HDC): COLORREF;
PROCEDURE ^ GetDefaultCommConfigA* ["GetDefaultCommConfigA"] (lpszName: LPCSTR; lpCC: LPCOMMCONFIG; lpdwSize: LPDWORD): BOOL;
PROCEDURE ^ GetDefaultCommConfigW* ["GetDefaultCommConfigW"] (lpszName: LPCWSTR; lpCC: LPCOMMCONFIG; lpdwSize: LPDWORD): BOOL;
PROCEDURE ^ GetDeviceCaps* ["GetDeviceCaps"] (hdc: HDC; index: INTEGER): INTEGER;
PROCEDURE ^ GetDIBColorTable* ["GetDIBColorTable"] (hdc: HDC; iStart: UINT; cEntries: UINT; prgbq: PRGBQUAD): UINT;
PROCEDURE ^ GetDIBits* ["GetDIBits"] (hdc: HDC; hbm: HBITMAP; start: UINT; cLines: UINT; lpvBits: LPVOID; lpbmi: LPBITMAPINFO; usage: UINT): INTEGER;
PROCEDURE ^ GetDisplayAutoRotationPreferences* ["GetDisplayAutoRotationPreferences"] (VAR pOrientation: ORIENTATION_PREFERENCE): BOOL;
PROCEDURE ^ GetDlgItem* ["GetDlgItem"] (hDlg: HWND; nIDDlgItem: INTEGER): HWND;
PROCEDURE ^ GetDynamicTimeZoneInformation* ["GetDynamicTimeZoneInformation"] (VAR pTimeZoneInformation: DYNAMIC_TIME_ZONE_INFORMATION): DWORD;
PROCEDURE ^ GetDynamicTimeZoneInformationEffectiveYears* ["GetDynamicTimeZoneInformationEffectiveYears"] (VAR lpTimeZoneInformation-: DYNAMIC_TIME_ZONE_INFORMATION; VAR FirstYear: DWORD; VAR LastYear: DWORD): DWORD;
PROCEDURE ^ GetEnvironmentVariableA* ["GetEnvironmentVariableA"] (lpName: LPCSTR; lpBuffer: LPSTR; nSize: DWORD): DWORD;
PROCEDURE ^ GetEnvironmentVariableW* ["GetEnvironmentVariableW"] (lpName: LPCWSTR; lpBuffer: LPWSTR; nSize: DWORD): DWORD;
PROCEDURE ^ GetExitCodeProcess* ["GetExitCodeProcess"] (hProcess: HANDLE; lpExitCode: LPDWORD): BOOL;
PROCEDURE ^ GetExitCodeThread* ["GetExitCodeThread"] (hThread: HANDLE; lpExitCode: LPDWORD): BOOL;
PROCEDURE ^ GetFileAttributes* ["GetFileAttributes"] (lpFileName: LPCTSTR): DWORD;
PROCEDURE ^ GetFileSize* ["GetFileSize"] (hFile: HANDLE; lpFileSizeHigh: LPDWORD): DWORD;
PROCEDURE ^ GetFileTime* ["GetFileTime"] (hFile: HANDLE; lpCreationTime: LPFILETIME; lpLastAccessTime: LPFILETIME; lpLastWriteTime: LPFILETIME): BOOL;
PROCEDURE ^ GetFontData* ["GetFontData"] (hdc: HDC; dwTable: DWORD; dwOffset: DWORD; pvBuffer: PVOID; cjBuffer: DWORD): DWORD;
PROCEDURE ^ GetFontLanguageInfo* ["GetFontLanguageInfo"] (hdc: HDC): DWORD;
PROCEDURE ^ GetFontUnicodeRanges* ["GetFontUnicodeRanges"] (hdc: HDC; lpgs: LPGLYPHSET): DWORD;
PROCEDURE ^ GetForegroundWindow* ["GetForegroundWindow"] (): HWND;
PROCEDURE ^ GetGlyphIndicesA* ["GetGlyphIndicesA"] (hdc: HDC; lpstr: LPCSTR; c: INTEGER; pgi: LPWORD; fl: DWORD): DWORD;
PROCEDURE ^ GetGlyphIndicesW* ["GetGlyphIndicesW"] (hdc: HDC; lpstr: LPCWSTR; c: INTEGER; pgi: LPWORD; fl: DWORD): DWORD;
PROCEDURE ^ GetGlyphOutlineA* ["GetGlyphOutlineA"] (hdc: HDC; uChar: UINT; fuFormat: UINT; lpgm: LPGLYPHMETRICS; cjBuffer: DWORD; pvBuffer: LPVOID; lpmat2: LPMAT2): DWORD;
PROCEDURE ^ GetGlyphOutlineW* ["GetGlyphOutlineW"] (hdc: HDC; uChar: UINT; fuFormat: UINT; lpgm: LPGLYPHMETRICS; cjBuffer: DWORD; pvBuffer: LPVOID; lpmat2: LPMAT2): DWORD;
PROCEDURE ^ GetGraphicsMode* ["GetGraphicsMode"] (hdc: HDC): INTEGER;
PROCEDURE ^ GetKerningPairsA* ["GetKerningPairsA"] (hdc: HDC; nPairs: DWORD; lpKernPair: LPKERNINGPAIR): DWORD;
PROCEDURE ^ GetKerningPairsW* ["GetKerningPairsW"] (hdc: HDC; nPairs: DWORD; lpKernPair: LPKERNINGPAIR): DWORD;
PROCEDURE ^ GetLargestConsoleWindowSize* ["GetLargestConsoleWindowSize"] (hConsoleOutput: HANDLE): COORD_RETURN;
PROCEDURE ^ GetLastError* ["GetLastError"] (): DWORD;
PROCEDURE ^ GetLayout* ["GetLayout"] (hdc: HDC): DWORD;
PROCEDURE ^ GetLocalTime* ["GetLocalTime"] (VAR lpSystemTime: SYSTEMTIME);
PROCEDURE ^ GetMailslotInfo* ["GetMailslotInfo"] (hMailslot: HANDLE; lpMaxMessageSize: LPDWORD; lpNextSize: LPDWORD; lpMessageCount: LPDWORD; lpReadTimeout: LPDWORD): BOOL;
PROCEDURE ^ GetMapMode* ["GetMapMode"] (hdc: HDC): INTEGER;
PROCEDURE ^ GetMenu* ["GetMenu"] (hWnd: HWND): HMENU;
PROCEDURE ^ GetMenuItemInfoA* ["GetMenuItemInfoA"] (hMenu: HMENU; uItem: UINT; fByPosition: BOOL; lpmii: LPMENUITEMINFO): BOOL;
PROCEDURE ^ GetMenuItemInfoW* ["GetMenuItemInfoW"] (hMenu: HMENU; uItem: UINT; fByPosition: BOOL; lpmii: LPMENUITEMINFO): BOOL;
PROCEDURE ^ GetMessageA* ["GetMessageA"] (VAR lpMsg: MSG; hWnd: HWND; wMsgFilterMin: UINT; wMsgFilterMax: UINT): BOOL;
PROCEDURE ^ GetMessageW* ["GetMessageW"] (VAR lpMsg: MSG; hWnd: HWND; wMsgFilterMin: UINT; wMsgFilterMax: UINT): BOOL;
PROCEDURE ^ GetMetaRgn* ["GetMetaRgn"] (hdc: HDC; hrgn: HRGN): INTEGER;
PROCEDURE ^ GetMiterLimit* ["GetMiterLimit"] (hdc: HDC; plimit: PFLOAT): BOOL;
PROCEDURE ^ GetModuleFileNameA* ["GetModuleFileNameA"] (hModule: HMODULE; lpFilename: LPSTR; nSize: DWORD): DWORD;
PROCEDURE ^ GetModuleFileNameW* ["GetModuleFileNameW"] (hModule: HMODULE; lpFilename: LPWSTR; nSize: DWORD): DWORD;
PROCEDURE ^ GetModuleHandleA* ["GetModuleHandleA"] (lpModuleName: LPCSTR): HMODULE;
PROCEDURE ^ GetModuleHandleW* ["GetModuleHandleW"] (lpModuleName: LPCWSTR): HMODULE;
PROCEDURE ^ GetMonitorInfoA* ["GetMonitorInfoA"] (hMonitor: HMONITOR; lpmi: LPMONITORINFO): BOOL;
PROCEDURE ^ GetMonitorInfoW* ["GetMonitorInfoW"] (hMonitor: HMONITOR; lpmi: LPMONITORINFO): BOOL;
PROCEDURE ^ GetNamedPipeClientComputerNameA* ["GetNamedPipeClientComputerNameA"] (Pipe: HANDLE; ClientComputerName: LPSTR; ClientComputerNameLength: ULONG): BOOL;
PROCEDURE ^ GetNamedPipeClientComputerNameW* ["GetNamedPipeClientComputerNameW"] (Pipe: HANDLE; ClientComputerName: LPWSTR; ClientComputerNameLength: ULONG): BOOL;
PROCEDURE ^ GetNamedPipeClientProcessId* ["GetNamedPipeClientProcessId"] (Pipe: HANDLE; ClientProcessId: PULONG): BOOL;
PROCEDURE ^ GetNamedPipeClientSessionId* ["GetNamedPipeClientSessionId"] (Pipe: HANDLE; ClientSessionId: PULONG): BOOL;
PROCEDURE ^ GetNamedPipeHandleStateA* ["GetNamedPipeHandleStateA"] (hNamedPipe: HANDLE; lpState: LPDWORD; lpCurInstances: LPDWORD; lpMaxCollectionCount: LPDWORD; lpCollectDataTimeout: LPDWORD; lpUserName: LPSTR; nMaxUserNameSize: DWORD): BOOL;
PROCEDURE ^ GetNamedPipeHandleStateW* ["GetNamedPipeHandleStateW"] (hNamedPipe: HANDLE; lpState: LPDWORD; lpCurInstances: LPDWORD; lpMaxCollectionCount: LPDWORD; lpCollectDataTimeout: LPDWORD; lpUserName: LPWSTR; nMaxUserNameSize: DWORD): BOOL;
PROCEDURE ^ GetNamedPipeInfo* ["GetNamedPipeInfo"] (hNamedPipe: HANDLE; lpFlags: LPDWORD; lpOutBufferSize: LPDWORD; lpInBufferSize: LPDWORD; lpMaxInstances: LPDWORD): BOOL;
PROCEDURE ^ GetNamedPipeServerProcessId* ["GetNamedPipeServerProcessId"] (Pipe: HANDLE; ServerProcessId: PULONG): BOOL;
PROCEDURE ^ GetNamedPipeServerSessionId* ["GetNamedPipeServerSessionId"] (Pipe: HANDLE; ServerSessionId: PULONG): BOOL;
PROCEDURE ^ GetNativeSystemInfo* ["GetNativeSystemInfo"] (lpSystemInfo: LPSYSTEM_INFO);
PROCEDURE ^ GetNearestColor* ["GetNearestColor"] (hdc: HDC; color: COLORREF): COLORREF;
PROCEDURE ^ GetNearestPaletteIndex* ["GetNearestPaletteIndex"] (h: HPALETTE; color: COLORREF): UINT;
PROCEDURE ^ GetNumberOfConsoleInputEvents* ["GetNumberOfConsoleInputEvents"] (hConsoleInput: HANDLE; lpcNumberOfEvents: LPDWORD): BOOL;
PROCEDURE ^ GetNumberOfConsoleMouseButtons* ["GetNumberOfConsoleMouseButtons"] (lpNumberOfMouseButtons: LPDWORD): BOOL;
PROCEDURE ^ GetObjectA* ["GetObjectA"] (h: HANDLE; c: INTEGER; pv: LPVOID): INTEGER;
PROCEDURE ^ GetObjectType* ["GetObjectType"] (h: HGDIOBJ): DWORD;
PROCEDURE ^ GetObjectW* ["GetObjectW"] (h: HANDLE; c: INTEGER; pv: LPVOID): INTEGER;
PROCEDURE ^ GetOutlineTextMetricsA* ["GetOutlineTextMetricsA"] (hdc: HDC; cjCopy: UINT; potm: LPOUTLINETEXTMETRICA): UINT;
PROCEDURE ^ GetOutlineTextMetricsW* ["GetOutlineTextMetricsW"] (hdc: HDC; cjCopy: UINT; potm: LPOUTLINETEXTMETRICW): UINT;
PROCEDURE ^ GetPaletteEntries* ["GetPaletteEntries"] (hpal: HPALETTE; iStart: UINT; cEntries: UINT; pPalEntries: LPPALETTEENTRY): UINT;
PROCEDURE ^ GetPath* ["GetPath"] (hdc: HDC; apt: LPPOINT; aj: LPBYTE; cpt: INTEGER): INTEGER;
PROCEDURE ^ GetPixel* ["GetPixel"] (hdc: HDC; x: INTEGER; y: INTEGER): COLORREF;
PROCEDURE ^ GetPolyFillMode* ["GetPolyFillMode"] (hdc: HDC): INTEGER;
PROCEDURE ^ GetPriorityClass* ["GetPriorityClass"] (hProcess: HANDLE): DWORD;
PROCEDURE ^ GetProcAddress* ["GetProcAddress"] (hModule: HMODULE; lpProcName: LPCSTR): FARPROC;
PROCEDURE ^ GetProcessAffinityMask* ["GetProcessAffinityMask"] (hProcess: HANDLE; VAR lpProcessAffinityMask: SET; VAR lpSystemAffinityMask: SET): BOOL;
PROCEDURE ^ GetProcessHeap* ["GetProcessHeap"] (): HANDLE;
PROCEDURE ^ GetProcessId* ["GetProcessId"] (Process: HANDLE): DWORD;
PROCEDURE ^ GetRandomRgn* ["GetRandomRgn"] (hdc: HDC; hrgn: HRGN; i: INT): INTEGER;
PROCEDURE ^ GetRasterizerCaps* ["GetRasterizerCaps"] (lpraststat: LPRASTERIZER_STATUS; cjBytes: UINT): BOOL;
PROCEDURE ^ GetRegionData* ["GetRegionData"] (hRgn: HRGN; dwCount: DWORD; lpRgnData: LPRGNDATA): DWORD;
PROCEDURE ^ GetRgnBox* ["GetRgnBox"] (hrgn: HRGN; lprc: LPRECT): INTEGER;
PROCEDURE ^ GetROP2* ["GetROP2"] (hdc: HDC): INTEGER;
PROCEDURE ^ GetStdHandle* ["GetStdHandle"] (nStdHandle: DWORD): HANDLE;
PROCEDURE ^ GetStockObject* ["GetStockObject"] (i: INTEGER): HGDIOBJ;
PROCEDURE ^ GetStretchBltMode* ["GetStretchBltMode"] (hdc: HDC): INTEGER;
PROCEDURE ^ GetSysColorBrush* ["GetSysColorBrush"] (nIndex: INTEGER): HBRUSH;
PROCEDURE ^ GetSystemInfo* ["GetSystemInfo"] (lpSystemInfo: LPSYSTEM_INFO);
PROCEDURE ^ GetSystemPaletteEntries* ["GetSystemPaletteEntries"] (hdc: HDC; iStart: UINT; cEntries: UINT; pPalEntries: LPPALETTEENTRY): UINT;
PROCEDURE ^ GetSystemPaletteUse* ["GetSystemPaletteUse"] (hdc: HDC): UINT;
PROCEDURE ^ GetSystemRegistryQuota* ["GetSystemRegistryQuota"] (pdwQuotaAllowed: PDWORD; pdwQuotaUsed: PDWORD): BOOL;
PROCEDURE ^ GetSystemTime* ["GetSystemTime"] (VAR lpSystemTime: SYSTEMTIME);
PROCEDURE ^ GetSystemTimeAdjustment* ["GetSystemTimeAdjustment"] (lpTimeAdjustment: PDWORD; lpTimeIncrement: PDWORD; lpTimeAdjustmentDisabled: PBOOL): BOOL;
PROCEDURE ^ GetSystemTimeAsFileTime* ["GetSystemTimeAsFileTime"] (VAR lpSystemTimeAsFileTime: FILETIME);
PROCEDURE ^ GetSystemTimes* ["GetSystemTimes"] (VAR lpIdleTime: FILETIME; VAR lpKernelTime: FILETIME; VAR lpUserTime: FILETIME): BOOL;
PROCEDURE ^ GetTabbedTextExtentA* ["GetTabbedTextExtentA"] (hdc: HDC; lpString: LPCSTR; chCount: INTEGER; nTabPositions: INTEGER; lpnTabStopPositions: LPINT): DWORD;
PROCEDURE ^ GetTabbedTextExtentW* ["GetTabbedTextExtentW"] (hdc: HDC; lpString: LPCWSTR; chCount: INTEGER; nTabPositions: INTEGER; lpnTabStopPositions: LPINT): DWORD;
PROCEDURE ^ GetTextAlign* ["GetTextAlign"] (hdc: HDC): UINT;
PROCEDURE ^ GetTextCharacterExtra* ["GetTextCharacterExtra"] (hdc: HDC): INTEGER;
PROCEDURE ^ GetTextColor* ["GetTextColor"] (hdc: HDC): COLORREF;
PROCEDURE ^ GetTextExtentExPointA* ["GetTextExtentExPointA"] (hdc: HDC; lpszString: LPCSTR; cchString: INTEGER; nMaxExtent: INTEGER; lpnFit: LPINT; lpnDx: LPINT; lpSize: LPSIZE): BOOL;
PROCEDURE ^ GetTextExtentExPointI* ["GetTextExtentExPointI"] (hdc: HDC; lpwszString: LPWORD; cwchString: INTEGER; nMaxExtent: INTEGER; lpnFit: LPINT; lpnDx: LPINT; lpSize: LPSIZE): BOOL;
PROCEDURE ^ GetTextExtentExPointW* ["GetTextExtentExPointW"] (hdc: HDC; lpszString: LPCWSTR; cchString: INTEGER; nMaxExtent: INTEGER; lpnFit: LPINT; lpnDx: LPINT; lpSize: LPSIZE): BOOL;
PROCEDURE ^ GetTextExtentPoint32A* ["GetTextExtentPoint32A"] (hdc: HDC; lpString: LPCSTR; c: INTEGER; psizl: LPSIZE): BOOL;
PROCEDURE ^ GetTextExtentPoint32W* ["GetTextExtentPoint32W"] (hdc: HDC; lpString: LPCWSTR; c: INTEGER; psizl: LPSIZE): BOOL;
PROCEDURE ^ GetTextExtentPointI* ["GetTextExtentPointI"] (hdc: HDC; pgiIn: LPWORD; cgi: INTEGER; psize: LPSIZE): BOOL;
PROCEDURE ^ GetTextFaceA* ["GetTextFaceA"] (hdc: HDC; c: INTEGER; lpName: LPSTR): INTEGER;
PROCEDURE ^ GetTextFaceW* ["GetTextFaceW"] (hdc: HDC; c: INTEGER; lpName: LPWSTR): INTEGER;
PROCEDURE ^ GetTextMetricsA* ["GetTextMetricsA"] (hdc: HDC; lptm: LPTEXTMETRICA): BOOL;
PROCEDURE ^ GetTextMetricsW* ["GetTextMetricsW"] (hdc: HDC; lptm: LPTEXTMETRICW): BOOL;
PROCEDURE ^ GetThreadId* ["GetThreadId"] (Thread: HANDLE): DWORD;
PROCEDURE ^ GetTickCount* ["GetTickCount"] (): DWORD;
PROCEDURE ^ GetTickCount64* ["GetTickCount64"] (): ULONGLONG;
PROCEDURE ^ GetTimeFormatA* ["GetTimeFormatA"] (Locale: LCID; dwFlags: DWORD; lpTime: LPSYSTEMTIME; lpFormat: LPCSTR; lpTimeStr: LPSTR; cchTime: INTEGER): INTEGER;
PROCEDURE ^ GetTimeFormatW* ["GetTimeFormatW"] (Locale: LCID; dwFlags: DWORD; lpTime: LPSYSTEMTIME; lpFormat: LPCSTR; lpTimeStr: LPSTR; cchTime: INTEGER): INTEGER;
PROCEDURE ^ GetTimeZoneInformation* ["GetTimeZoneInformation"] (VAR lpTimeZoneInformation: TIME_ZONE_INFORMATION): DWORD;
PROCEDURE ^ GetTimeZoneInformationForYear* ["GetTimeZoneInformationForYear"] (wYear: USHORT; pdtzi: PDYNAMIC_TIME_ZONE_INFORMATION; VAR ptzi: TIME_ZONE_INFORMATION): BOOL;
PROCEDURE ^ GetUpdateRect* ["GetUpdateRect"] (hWnd: HWND; lpRect: LPRECT; bErase: BOOL): BOOL;
PROCEDURE ^ GetUpdateRgn* ["GetUpdateRgn"] (hWnd: HWND; hRgn: HRGN; bErase: BOOL): INTEGER;
PROCEDURE ^ GetViewportExtEx* ["GetViewportExtEx"] (hdc: HDC; lpsize: LPSIZE): BOOL;
PROCEDURE ^ GetViewportOrgEx* ["GetViewportOrgEx"] (hdc: HDC; lppoint: LPPOINT): BOOL;
PROCEDURE ^ GetWindow* ["GetWindow"] (hWnd: HWND; uCmd: UINT): HWND;
PROCEDURE ^ GetWindowDC* ["GetWindowDC"] (hWnd: HWND): HDC;
PROCEDURE ^ GetWindowExtEx* ["GetWindowExtEx"] (hdc: HDC; lpsize: LPSIZE): BOOL;
PROCEDURE ^ GetWindowLongA* ["GetWindowLongA"] (hWnd: HWND; nIndex: INTEGER): LONG;
PROCEDURE ^ GetWindowLongPtrA* ["GetWindowLongPtrA"] (hWnd: HWND; nIndex: INTEGER): LONG_PTR;
PROCEDURE ^ GetWindowLongPtrW* ["GetWindowLongPtrW"] (hWnd: HWND; nIndex: INTEGER): LONG_PTR;
PROCEDURE ^ GetWindowLongW* ["GetWindowLongW"] (hWnd: HWND; nIndex: INTEGER): LONG;
PROCEDURE ^ GetWindowOrgEx* ["GetWindowOrgEx"] (hdc: HDC; lppoint: LPPOINT): BOOL;
PROCEDURE ^ GetWindowRect* ["GetWindowRect"] (hWnd: HWND; lpRect: LPRECT): BOOL;
PROCEDURE ^ GetWindowRgn* ["GetWindowRgn"] (hWnd: HWND; hRgn: HRGN): INTEGER;
PROCEDURE ^ GetWindowRgnBox* ["GetWindowRgnBox"] (hWnd: HWND; lprc: LPRECT): INTEGER;
PROCEDURE ^ GetWorldTransform* ["GetWorldTransform"] (hdc: HDC; lpxf: LPXFORM): BOOL;
PROCEDURE ^ GlobalAddAtomA* ["GlobalAddAtomA"] (lpString: LPCSTR): ATOM;
PROCEDURE ^ GlobalAddAtomW* ["GlobalAddAtomW"] (lpString: LPCWSTR): ATOM;
PROCEDURE ^ GlobalAlloc* ["GlobalAlloc"] (uFlags: UINT; dwBytes: SIZE_T): HGLOBAL;
PROCEDURE ^ GlobalDeleteAtom* ["GlobalDeleteAtom"] (nAtom: ATOM): ATOM;
PROCEDURE ^ GlobalFindAtomA* ["GlobalFindAtomA"] (lpString: LPCSTR): ATOM;
PROCEDURE ^ GlobalFindAtomW* ["GlobalFindAtomW"] (lpString: LPCWSTR): ATOM;
PROCEDURE ^ GlobalFree* ["GlobalFree"] (hMem: HGLOBAL): HGLOBAL;
PROCEDURE ^ GlobalGetAtomNameA* ["GlobalGetAtomNameA"] (nAtom: ATOM; lbBuffer: LPSTR; nSize: INTEGER): UINT;
PROCEDURE ^ GlobalGetAtomNameW* ["GlobalGetAtomNameW"] (nAtom: ATOM; lbBuffer: LPWSTR; nSize: INTEGER): UINT;
PROCEDURE ^ GlobalHandle* ["GlobalHandle"] (pMem: LPCVOID): HGLOBAL;
PROCEDURE ^ GlobalLock* ["GlobalLock"] (hMem: HGLOBAL): LPVOID;
PROCEDURE ^ GlobalReAlloc* ["GlobalReAlloc"] (hMem: HGLOBAL; dwBytes: SIZE_T; uFlags: UINT): HGLOBAL;
PROCEDURE ^ GlobalSize* ["GlobalSize"] (hMem: HGLOBAL): SIZE_T;
PROCEDURE ^ GlobalUnlock* ["GlobalUnlock"] (hMem: HGLOBAL): BOOL;
PROCEDURE ^ GradientFill* ["GradientFill"] (hdc: HDC; pVertex: PTRIVERTEX; nVertex: ULONG; pMesh: PVOID; nMesh: ULONG; ulMode: ULONG): BOOL;
PROCEDURE ^ GrayStringA* ["GrayStringA"] (hDC: HDC; hBrush: HBRUSH; lpOutputFunc: GRAYSTRINGPROC; lpData: LPARAM; nCount: INTEGER; X: INTEGER; Y: INTEGER; nWidth: INTEGER; nHeight: INTEGER): BOOL;
PROCEDURE ^ GrayStringW* ["GrayStringW"] (hDC: HDC; hBrush: HBRUSH; lpOutputFunc: GRAYSTRINGPROC; lpData: LPARAM; nCount: INTEGER; X: INTEGER; Y: INTEGER; nWidth: INTEGER; nHeight: INTEGER): BOOL;
PROCEDURE ^ HeapAlloc* ["HeapAlloc"] (hHeap: HANDLE; dwFlags: DWORD; dwBytes: SIZE_T): LPVOID;
PROCEDURE ^ HeapCompact* ["HeapCompact"] (hHeap: HANDLE; dwFlags: DWORD): SIZE_T;
PROCEDURE ^ HeapCreate* ["HeapCreate"] (flOptions: DWORD; dInitialSize: SIZE_T; dwMaximumSize: SIZE_T): HANDLE;
PROCEDURE ^ HeapDestroy* ["HeapDestroy"] (hHeap: HANDLE): BOOL;
PROCEDURE ^ HeapFree* ["HeapFree"] (hHeap: HANDLE; dwFlags: DWORD; lpMem: LPVOID): BOOL;
PROCEDURE ^ HeapLock* ["HeapLock"] (hHeap: HANDLE): BOOL;
PROCEDURE ^ HeapReAlloc* ["HeapReAlloc"] (hHeap: HANDLE; dwFlags: DWORD; lpMem: LPVOID; dwBytes: SIZE_T): LPVOID;
PROCEDURE ^ HeapSize* ["HeapSize"] (hHeap: HANDLE; dwFlags: DWORD; lpMem: LPCVOID): SIZE_T;
PROCEDURE ^ HeapUnlock* ["HeapUnlock"] (hHeap: HANDLE): BOOL;
PROCEDURE ^ HeapValidate* ["HeapValidate"] (hHeap: HANDLE; dwFlags: DWORD; lpMem: LPCVOID): BOOL;
PROCEDURE ^ HeapWalk* ["HeapWalk"] (hHeap: HANDLE; lpEntry: LPPROCESS_HEAP_ENTRY): BOOL;
PROCEDURE ^ ImpersonateNamedPipeClient* ["ImpersonateNamedPipeClient"] (hNamedPipe: HANDLE): BOOL;
PROCEDURE ^ InflateRect* ["InflateRect"] (VAR lprc: RECT; dx: INTEGER; dy: INTEGER): BOOL;
PROCEDURE ^ InitAtomTable* ["InitAtomTable"] (nSize: DWORD): BOOL;
PROCEDURE ^ InitializeConditionVariable* ["InitializeConditionVariable"] (ConditionVariable: PCONDITION_VARIABLE);
PROCEDURE ^ InitializeCriticalSection* ["InitializeCriticalSection"] (lpCriticalSection: LPCRITICAL_SECTION);
PROCEDURE ^ InitializeCriticalSectionAndSpinCount* ["InitializeCriticalSectionAndSpinCount"] (lpCriticalSection: LPCRITICAL_SECTION; dwSpinCount: DWORD): BOOL;
PROCEDURE ^ InitializeCriticalSectionEx* ["InitializeCriticalSectionEx"] (lpCriticalSection: LPCRITICAL_SECTION; dwSpinCount: DWORD; Flags: DWORD): BOOL;
PROCEDURE ^ InitOnceBeginInitialize* ["InitOnceBeginInitialize"] (lpInitOnce: LPINIT_ONCE; dwFlags: DWORD; fPending: PBOOL; lpContext: LPVOID): BOOL;
PROCEDURE ^ InitOnceComplete* ["InitOnceComplete"] (lpInitOnce: LPINIT_ONCE; dwFlags: DWORD; lpContext: LPVOID): BOOL;
PROCEDURE ^ InitOnceInitialize* ["InitOnceInitialize"] (InitOnce: LPINIT_ONCE);
PROCEDURE ^ InsertMenuItemA* ["InsertMenuItemA"] (hMenu: HMENU; uItem: UINT; fByPosition: BOOL; lpmii: LPMENUITEMINFO): BOOL;
PROCEDURE ^ InsertMenuItemW* ["InsertMenuItemW"] (hMenu: HMENU; uItem: UINT; fByPosition: BOOL; lpmii: LPMENUITEMINFO): BOOL;
PROCEDURE ^ IntersectClipRect* ["IntersectClipRect"] (hdc: HDC; nLeftRect: INTEGER; nTopRect: INTEGER; nRightRect: INTEGER; nBottomRect: INTEGER): INTEGER;
PROCEDURE ^ IntersectRect* ["IntersectRect"] (VAR lprcDst: RECT; VAR lprcSrc1-: RECT; VAR lprcSrc2-: RECT): BOOL;
PROCEDURE ^ InvalidateRect* ["InvalidateRect"] (hWnd: HWND; lpRect: LPRECT; bErase: BOOL): BOOL;
PROCEDURE ^ InvalidateRgn* ["InvalidateRgn"] (hWnd: HWND; hRgn: HRGN; bErase: BOOL): BOOL;
PROCEDURE ^ InvertRect* ["InvertRect"] (hDC: HDC; VAR lprc-: RECT): BOOL;
PROCEDURE ^ InvertRgn* ["InvertRgn"] (hdc: HDC; hrgn: HRGN): BOOL;
PROCEDURE ^ IsRectEmpty* ["IsRectEmpty"] (VAR lprc-: RECT): BOOL;
PROCEDURE ^ IsThreadAFiber* ["IsThreadAFiber"] (): BOOL;
PROCEDURE ^ KillTimer* ["KillTimer"] (hWnd: HWND; uIDEvent: UINT_PTR): BOOL;
PROCEDURE ^ LeaveCriticalSection* ["LeaveCriticalSection"] (lpCriticalSection: LPCRITICAL_SECTION);
PROCEDURE ^ LineDDA* ["LineDDA"] (xStart: INTEGER; yStart: INTEGER; xEnd: INTEGER; yEnd: INTEGER; lpProc: LINEDDAPROC; data: LPARAM): BOOL;
PROCEDURE ^ LineTo* ["LineTo"] (hdc: HDC; x: INTEGER; y: INTEGER): BOOL;
PROCEDURE ^ listen* ["listen"] (s: SOCKET; backlog: INTEGER): INTEGER;
PROCEDURE ^ LoadBitmapA* ["LoadBitmapA"] (hInstance: HINSTANCE; lpBitmapName: LPCSTR): HBITMAP;
PROCEDURE ^ LoadBitmapW* ["LoadBitmapW"] (hInstance: HINSTANCE; lpBitmapName: LPCWSTR): HBITMAP;
PROCEDURE ^ LoadCursorA* ["LoadCursorA"] (hInstance: HINSTANCE; lpCursorName: LPCSTR): HCURSOR;
PROCEDURE ^ LoadCursorW* ["LoadCursorW"] (hInstance: HINSTANCE; lpCursorName: LPCWSTR): HCURSOR;
PROCEDURE ^ LoadIconA* ["LoadIconA"] (hInstance: HINSTANCE; lpIconName: LPCSTR): HICON;
PROCEDURE ^ LoadIconW* ["LoadIconW"] (hInstance: HINSTANCE; lpIconName: LPCWSTR): HICON;
PROCEDURE ^ LoadLibraryA* ["LoadLibraryA"] (lpFileName: LPCSTR): HMODULE;
PROCEDURE ^ LoadLibraryW* ["LoadLibraryW"] (lpFileName: LPCWSTR): HMODULE;
PROCEDURE ^ LocalFileTimeToFileTime* ["LocalFileTimeToFileTime"] (VAR lpLocalFileTime-: FILETIME; VAR lpFileTime-: FILETIME): BOOL;
PROCEDURE ^ LockWindowUpdate* ["LockWindowUpdate"] (hWndLock: HWND): BOOL;
PROCEDURE ^ LPtoDP* ["LPtoDP"] (hdc: HDC; lppt: LPPOINT; c: INTEGER): BOOL;
PROCEDURE ^ MapWindowPoints* ["MapWindowPoints"] (hWndFrom: HWND; hWndTo: HWND; lpPoints: LPPOINT; cPoints: UINT): INTEGER;
PROCEDURE ^ MaskBlt* ["MaskBlt"] (hdcDest: HDC; xDest: INTEGER; yDest: INTEGER; width: INTEGER; height: INTEGER; hdcSrc: HDC; xSrc: INTEGER; ySrc: INTEGER; hbmMask: HBITMAP; xMask: INTEGER; yMask: INTEGER; rop: DWORD): BOOL;
PROCEDURE ^ MessageBeep* ["MessageBeep"] (uType: UINT): BOOL;
PROCEDURE ^ MessageBoxA* ["MessageBoxA"] (hWnd: HWND; lpText: LPCSTR; lpCaption: LPCSTR; uType: UINT): INTEGER;
PROCEDURE ^ MessageBoxExA* ["MessageBoxExA"] (hWnd: HWND; lpText: LPCSTR; lpCaption: LPCSTR; uType: UINT; wLanguageId: WORD): INTEGER;
PROCEDURE ^ MessageBoxExW* ["MessageBoxExW"] (hWnd: HWND; lpText: LPCWSTR; lpCaption: LPCWSTR; uType: UINT; wLanguageId: WORD): INTEGER;
PROCEDURE ^ MessageBoxW* ["MessageBoxW"] (hWnd: HWND; lpText: LPCWSTR; lpCaption: LPCWSTR; uType: UINT): INTEGER;
PROCEDURE ^ ModifyWorldTransform* ["ModifyWorldTransform"] (hdc: HDC; lpxf: PXFORM; mode: DWORD): BOOL;
PROCEDURE ^ MonitorFromPoint* ["MonitorFromPoint"] (pt: POINT; dwFlags: DWORD): HMONITOR;
PROCEDURE ^ MonitorFromRect* ["MonitorFromRect"] (lprc: LPCRECT; dwFlags: DWORD): HMONITOR;
PROCEDURE ^ MonitorFromWindow* ["MonitorFromWindow"] (hwnd: HWND; dwFlags: DWORD): HMONITOR;
PROCEDURE ^ mouse_event* ["mouse_event"] (dwFlags: DWORD; dx: DWORD; dy: DWORD; dwData: DWORD; dwExtraInfo: ULONG_PTR);
PROCEDURE ^ MoveFileA* ["MoveFileA"] (lpExistingFileName: LPCSTR; lpNewFileName: LPCSTR): BOOL;
PROCEDURE ^ MoveFileW* ["MoveFileW"] (lpExistingFileName: LPCWSTR; lpNewFileName: LPCWSTR): BOOL;
PROCEDURE ^ MoveToEx* ["MoveToEx"] (hdc: HDC; x: INTEGER; y: INTEGER; lppt: LPPOINT): BOOL;
PROCEDURE ^ OffsetClipRgn* ["OffsetClipRgn"] (hdc: HDC; x: INTEGER; y: INTEGER): INTEGER;
PROCEDURE ^ OffsetRect* ["OffsetRect"] (VAR lprc: RECT; dx: INTEGER; dy: INTEGER): BOOL;
PROCEDURE ^ OffsetRgn* ["OffsetRgn"] (hrgn: HRGN; nXOffset: INTEGER; nYOffset: INTEGER): INTEGER;
PROCEDURE ^ OffsetViewportOrgEx* ["OffsetViewportOrgEx"] (hdc: HDC; x: INTEGER; y: INTEGER; lppt: LPPOINT): BOOL;
PROCEDURE ^ OffsetWindowOrgEx* ["OffsetWindowOrgEx"] (hdc: HDC; x: INTEGER; y: INTEGER; lppt: LPPOINT): BOOL;
PROCEDURE ^ OpenClipboard* ["OpenClipboard"] (hWndNewOwner: HWND): BOOL;
PROCEDURE ^ OpenEventA* ["OpenEventA"] (dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: LPCSTR): HANDLE;
PROCEDURE ^ OpenEventW* ["OpenEventW"] (dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: LPCWSTR): HANDLE;
PROCEDURE ^ PaintDesktop* ["PaintDesktop"] (hdc: HDC): BOOL;
PROCEDURE ^ PaintRgn* ["PaintRgn"] (hdc: HDC; hrgn: HRGN): BOOL;
PROCEDURE ^ PatBlt* ["PatBlt"] (hdc: HDC; x: INTEGER; y: INTEGER; w: INTEGER; h: INTEGER; rop: DWORD): BOOL;
PROCEDURE ^ PathToRegion* ["PathToRegion"] (hdc: HDC): HRGN;
PROCEDURE ^ PeekNamedPipe* ["PeekNamedPipe"] (hNamedPipe: HANDLE; lpBuffer: LPVOID; nBufferSize: DWORD; lpBytesRead: LPDWORD; lpTotalBytesAvail: LPDWORD; lpBytesLeftThisMessage: LPDWORD): BOOL;
PROCEDURE ^ Pie* ["Pie"] (hdc: HDC; left: INTEGER; top: INTEGER; right: INTEGER; bottom: INTEGER; xr1: INTEGER; yr1: INTEGER; xr2: INTEGER; yr2: INTEGER): BOOL;
PROCEDURE ^ PlgBlt* ["PlgBlt"] (hdcDest: HDC; lpPoint: LPPOINT; hdcSrc: HDC; xSrc: INTEGER; ySrc: INTEGER; width: INTEGER; height: INTEGER; hbmMask: HBITMAP; xMask: INTEGER; yMask: INTEGER): BOOL;
PROCEDURE ^ PolyBezier* ["PolyBezier"] (hdc: HDC; apt: LPPOINT; cpt: DWORD): BOOL;
PROCEDURE ^ PolyBezierTo* ["PolyBezierTo"] (hdc: HDC; lppt: LPPOINT; cCount: DWORD): BOOL;
PROCEDURE ^ PolyDraw* ["PolyDraw"] (hdc: HDC; apt: LPPOINT; aj: LPBYTE; cpt: INTEGER): BOOL;
PROCEDURE ^ Polygon* ["Polygon"] (hdc: HDC; apt: LPPOINT; cpt: INTEGER): BOOL;
PROCEDURE ^ Polyline* ["Polyline"] (hdc: HDC; lppt: LPPOINT; cPoints: INTEGER): BOOL;
PROCEDURE ^ PolylineTo* ["PolylineTo"] (hdc: HDC; apt: LPPOINT; cpt: DWORD): BOOL;
PROCEDURE ^ PolyPolygon* ["PolyPolygon"] (hdc: HDC; apt: LPPOINT; asz: LPINT; csz: INTEGER): BOOL;
PROCEDURE ^ PolyPolyline* ["PolyPolyline"] (hdc: HDC; apt: LPPOINT; asz: LPDWORD; csz: DWORD): BOOL;
PROCEDURE ^ PolyTextOutA* ["PolyTextOutA"] (hdc: HDC; ppt: PPOLYTEXTA; nstrings: INTEGER): BOOL;
PROCEDURE ^ PolyTextOutW* ["PolyTextOutW"] (hdc: HDC; ppt: PPOLYTEXTW; nstrings: INTEGER): BOOL;
PROCEDURE ^ PostQuitMessage* ["PostQuitMessage"] (nExitCode: INTEGER);
PROCEDURE ^ PtInRect* ["PtInRect"] (VAR lprc-: RECT; pt: POINT): BOOL;
PROCEDURE ^ PtInRegion* ["PtInRegion"] (hrgn: HRGN; X: INTEGER; Y: INTEGER): BOOL;
PROCEDURE ^ PtVisible* ["PtVisible"] (hdc: HDC; x: INTEGER; y: INTEGER): BOOL;
PROCEDURE ^ PulseEvent* ["PulseEvent"] (hEvent: HANDLE): BOOL;
PROCEDURE ^ PurgeComm* ["PurgeComm"] (hFile: HANDLE; dwFlags: DWORD): BOOL;
PROCEDURE ^ QueryAuxiliaryCounterFrequency* ["QueryAuxiliaryCounterFrequency"] (VAR lpAuxiliaryCounterFrequency: ULONGLONG): HRESULT;
PROCEDURE ^ QueryInterruptTime* ["QueryInterruptTime"] (VAR lpInterruptTime: ULONGLONG);
PROCEDURE ^ QueryInterruptTimePrecise* ["QueryInterruptTimePrecise"] (VAR lpInterruptTimePrecise: ULONGLONG);
PROCEDURE ^ QueryPerformanceCounter* ["QueryPerformanceCounter"] (VAR lpPerformanceCount: LARGE_INTEGER): BOOL;
PROCEDURE ^ QueryPerformanceFrequency* ["QueryPerformanceFrequency"] (VAR lpFrequency: LARGE_INTEGER): BOOL;
PROCEDURE ^ QueryUnbiasedInterruptTime* ["QueryUnbiasedInterruptTime"] (VAR UnbiasedTime: ULONGLONG): BOOL;
PROCEDURE ^ QueryUnbiasedInterruptTimePrecise* ["QueryUnbiasedInterruptTimePrecise"] (VAR lpUnbiasedInterruptTimePrecise: ULONGLONG);
PROCEDURE ^ ReadFile* ["ReadFile"] (hFile: HANDLE; lpBuffer: LPVOID; nNumberOfBytesToRead: DWORD; lpNumberOfBytesRead: LPDWORD; lpOverlapped: LPOVERLAPPED): BOOL;
PROCEDURE ^ RealizePalette* ["RealizePalette"] (hdc: HDC): UINT;
PROCEDURE ^ Rectangle* ["Rectangle"] (hdc: HDC; left: INTEGER; top: INTEGER; right: INTEGER; bottom: INTEGER): BOOL;
PROCEDURE ^ RectInRegion* ["RectInRegion"] (hrgn: HRGN; lprc: LPRECT): BOOL;
PROCEDURE ^ RectVisible* ["RectVisible"] (hdc: HDC; lprc: LPRECT): BOOL;
PROCEDURE ^ recv* ["recv"] (s: SOCKET; buf: SYSTEM.ADDRESS; len: INTEGER; flags: INTEGER): INTEGER;
PROCEDURE ^ RedrawWindow* ["RedrawWindow"] (hWnd: HWND; lprcUpdate: LPRECT; hrgnUpdate: HRGN; flags: UINT): BOOL;
PROCEDURE ^ RegCloseKey* ["RegCloseKey"] (hKey: HKEY): LONG;
PROCEDURE ^ RegCreateKeyExA* ["RegCreateKeyExA"] (hKey: HKEY; lpSubKey: LPCSTR; Reserved: DWORD; lpClass: LPSTR; dwOptions: DWORD; samDesired: REGSAM; lpSecurityAttributes: LPSECURITY_ATTRIBUTES; phkResult: PHKEY; lpdwDisposition: LPDWORD): LONG;
PROCEDURE ^ RegCreateKeyExW* ["RegCreateKeyExW"] (hKey: HKEY; lpSubKey: LPCWSTR; Reserved: DWORD; lpClass: LPWSTR; dwOptions: DWORD; samDesired: REGSAM; lpSecurityAttributes: LPSECURITY_ATTRIBUTES; phkResult: PHKEY; lpdwDisposition: LPDWORD): LONG;
PROCEDURE ^ RegisterClassA* ["RegisterClassA"] (VAR lpWndClass-: WNDCLASSA): ATOM;
PROCEDURE ^ RegisterClassExA* ["RegisterClassExA"] (VAR lpwcx-: WNDCLASSEXA): ATOM;
PROCEDURE ^ RegisterClassExW* ["RegisterClassExW"] (VAR lpwcx-: WNDCLASSEXW): ATOM;
PROCEDURE ^ RegisterClassW* ["RegisterClassW"] (VAR lpWndClass-: WNDCLASSW): ATOM;
PROCEDURE ^ RegOpenKeyExA* ["RegOpenKeyExA"] (hKey: HKEY; lpSubKey: LPCSTR; ulOptions: DWORD; samDesired: REGSAM; phkResult: PHKEY): LONG;
PROCEDURE ^ RegOpenKeyExW* ["RegOpenKeyExW"] (hKey: HKEY; lpSubKey: LPCWSTR; ulOptions: DWORD; samDesired: REGSAM; phkResult: PHKEY): LONG;
PROCEDURE ^ RegQueryValueExA* ["RegQueryValueExA"] (hKey: HKEY; lpValueName: LPCSTR; lpReserved: LPDWORD; lpType: LPDWORD; lpData: LPBYTE; lpcbData: LPDWORD): LONG;
PROCEDURE ^ RegQueryValueExW* ["RegQueryValueExW"] (hKey: HKEY; lpValueName: LPCWSTR; lpReserved: LPDWORD; lpType: LPDWORD; lpData: LPBYTE; lpcbData: LPDWORD): LONG;
PROCEDURE ^ RegSetValueExA* ["RegSetValueExA"] (hKey: HKEY; lpValueName: LPCSTR; Reserved: DWORD; dwType: DWORD; lpData: LPCBYTE; cbData: DWORD): LONG;
PROCEDURE ^ RegSetValueExW* ["RegSetValueExW"] (hKey: HKEY; lpValueName: LPCWSTR; Reserved: DWORD; dwType: DWORD; lpData: LPCBYTE; cbData: DWORD): LONG;
PROCEDURE ^ ReleaseCapture* ["ReleaseCapture"] (): BOOL;
PROCEDURE ^ ReleaseDC* ["ReleaseDC"] (hWnd: HWND; hDC: HDC): INTEGER;
PROCEDURE ^ ReleaseMutex* ["ReleaseMutex"] (hMutex: HANDLE): BOOL;
PROCEDURE ^ ReleaseSemaphore* ["ReleaseSemaphore"] (hSemaphore: HANDLE; lReleaseCount: LONG; lpPreviousCount: LPLONG): BOOL;
PROCEDURE ^ RemoveFontMemResourceEx* ["RemoveFontMemResourceEx"] (h: HANDLE): BOOL;
PROCEDURE ^ RemoveFontResourceA* ["RemoveFontResourceA"] (lpFileName: LPCSTR): BOOL;
PROCEDURE ^ RemoveFontResourceExA* ["RemoveFontResourceExA"] (name: LPCSTR; fl: DWORD; pdv: PVOID): BOOL;
PROCEDURE ^ RemoveFontResourceExW* ["RemoveFontResourceExW"] (name: LPCWSTR; fl: DWORD; pdv: PVOID): BOOL;
PROCEDURE ^ RemoveFontResourceW* ["RemoveFontResourceW"] (lpFileName: LPCWSTR): BOOL;
PROCEDURE ^ RemoveVectoredContinueHandler* ["RemoveVectoredContinueHandler"] (Handler: PVOID): ULONG;
PROCEDURE ^ RemoveVectoredExceptionHandler* ["RemoveVectoredExceptionHandler"] (Handler: PVOID): ULONG;
PROCEDURE ^ ResetDCA* ["ResetDCA"] (hdc: HDC; lpdm: PDEVMODEA): HDC;
PROCEDURE ^ ResetDCW* ["ResetDCW"] (hdc: HDC; lpdm: PDEVMODEW): HDC;
PROCEDURE ^ ResetEvent* ["ResetEvent"] (hEvent: HANDLE): BOOL;
PROCEDURE ^ ResizePalette* ["ResizePalette"] (hpal: HPALETTE; n: UINT): BOOL;
PROCEDURE ^ RestoreDC* ["RestoreDC"] (hdc: HDC; nSavedDC: INTEGER): BOOL;
PROCEDURE ^ ResumeThread* ["ResumeThread"] (hThread: HANDLE): DWORD;
PROCEDURE ^ RoundRect* ["RoundRect"] (hdc: HDC; left: INTEGER; top: INTEGER; right: INTEGER; bottom: INTEGER; width: INTEGER; height: INTEGER): BOOL;
PROCEDURE ^ SaveDC* ["SaveDC"] (hdc: HDC): INTEGER;
PROCEDURE ^ ScaleViewportExtEx* ["ScaleViewportExtEx"] (hdc: HDC; xn: INTEGER; dx: INTEGER; yn: INTEGER; yd: INTEGER; lpsz: LPSIZE): BOOL;
PROCEDURE ^ ScaleWindowExtEx* ["ScaleWindowExtEx"] (hdc: HDC; xn: INTEGER; xd: INTEGER; yn: INTEGER; yd: INTEGER; lpsz: LPSIZE): BOOL;
PROCEDURE ^ ScreenToClient* ["ScreenToClient"] (hWnd: HWND; lpPoint: LPPOINT): BOOL;
PROCEDURE ^ SelectClipPath* ["SelectClipPath"] (hdc: HDC; mode: INTEGER): BOOL;
PROCEDURE ^ SelectClipRgn* ["SelectClipRgn"] (hdc: HDC; hrgn: HRGN): INTEGER;
PROCEDURE ^ SelectObject* ["SelectObject"] (hdc: HDC; hgdiobj: HGDIOBJ): HGDIOBJ;
PROCEDURE ^ SelectPalette* ["SelectPalette"] (hdc: HDC; hPal: HPALETTE; bForceBkgd: BOOL): HPALETTE;
PROCEDURE ^ send* ["send"] (s: SOCKET; buf: SYSTEM.ADDRESS; len: INTEGER; flags: INTEGER): INTEGER;
PROCEDURE ^ SendMessageA* ["SendMessageA"] (hWnd: HWND; Msg: UINT; wParam: WPARAM; lParam: LPARAM): LRESULT;
PROCEDURE ^ SendMessageW* ["SendMessageW"] (hWnd: HWND; Msg: UINT; wParam: WPARAM; lParam: LPARAM): LRESULT;
PROCEDURE ^ SetArcDirection* ["SetArcDirection"] (hdc: HDC; dir: INTEGER): INTEGER;
PROCEDURE ^ SetBitmapDimensionEx* ["SetBitmapDimensionEx"] (hbm: HBITMAP; w: INTEGER; h: INTEGER; lpsz: LPSIZE): BOOL;
PROCEDURE ^ SetBkColor* ["SetBkColor"] (hdc: HDC; color: COLORREF): COLORREF;
PROCEDURE ^ SetBkMode* ["SetBkMode"] (hdc: HDC; mode: INTEGER): INTEGER;
PROCEDURE ^ SetBoundsRect* ["SetBoundsRect"] (hdc: HDC; lprect: LPRECT; flags: UINT): UINT;
PROCEDURE ^ SetBrushOrgEx* ["SetBrushOrgEx"] (hdc: HDC; x: INTEGER; y: INTEGER; lppt: LPPOINT): BOOL;
PROCEDURE ^ SetCapture* ["SetCapture"] (hWnd: HWND): HWND;
PROCEDURE ^ SetClassLongA* ["SetClassLongA"] (hWnd: HWND; nIndex: INTEGER; dwNewLong: ULONG): DWORD;
PROCEDURE ^ SetClassLongPtrA* ["SetClassLongPtrA"] (hWnd: HWND; nIndex: INTEGER; dwNewLong: LONG_PTR): ULONG_PTR;
PROCEDURE ^ SetClassLongPtrW* ["SetClassLongPtrW"] (hWnd: HWND; nIndex: INTEGER; dwNewLong: LONG_PTR): ULONG_PTR;
PROCEDURE ^ SetClassLongW* ["SetClassLongW"] (hWnd: HWND; nIndex: INTEGER; dwNewLong: ULONG): DWORD;
PROCEDURE ^ SetClassWord* ["SetClassWord"] (hWnd: HWND; nIndex: INTEGER; wNewWord: WORD): WORD;
PROCEDURE ^ SetClipboardData* ["SetClipboardData"] (uFormat: UINT; hMem: HANDLE): HANDLE;
PROCEDURE ^ SetCoalescableTimer* ["SetCoalescableTimer"] (hWnd: HWND; nIDEvent: UINT_PTR; uElapse: UINT; lpTimerFunc: TIMERPROC; uToleranceDelay: ULONG): UINT_PTR;
PROCEDURE ^ SetColorAdjustment* ["SetColorAdjustment"] (hdc: HDC; lpca: PCOLORADJUSTMENT): BOOL;
PROCEDURE ^ SetCommBreak* ["SetCommBreak"] (hFile: HANDLE): BOOL;
PROCEDURE ^ SetCommConfig* ["SetCommConfig"] (hCommDev: HANDLE; lpCC: LPCOMMCONFIG; dwSize: DWORD): BOOL;
PROCEDURE ^ SetCommMask* ["SetCommMask"] (hFile: HANDLE; dwEvtMask: DWORD): BOOL;
PROCEDURE ^ SetCommState* ["SetCommState"] (hFile: HANDLE; lpDCB: LPDCB): BOOL;
PROCEDURE ^ SetCommTimeouts* ["SetCommTimeouts"] (hFile: HANDLE; lpCommTimeouts: LPCOMMTIMEOUTS): BOOL;
PROCEDURE ^ SetConsoleCP* ["SetConsoleCP"] (wCodePageID: UINT): BOOL;
PROCEDURE ^ SetConsoleMode* ["SetConsoleMode"] (hConsoleHandle: HANDLE; dwMode: DWORD): BOOL;
PROCEDURE ^ SetConsoleTextAttribute* ["SetConsoleTextAttribute"] (hConsoleOutput: HANDLE; wAttributes: WORD): BOOL;
PROCEDURE ^ SetCriticalSectionSpinCount* ["SetCriticalSectionSpinCount"] (lpCriticalSection: LPCRITICAL_SECTION; dwSpinCount: DWORD): DWORD;
PROCEDURE ^ SetDCBrushColor* ["SetDCBrushColor"] (hdc: HDC; color: COLORREF): COLORREF;
PROCEDURE ^ SetDCPenColor* ["SetDCPenColor"] (hdc: HDC; color: COLORREF): COLORREF;
PROCEDURE ^ SetDefaultCommConfigA* ["SetDefaultCommConfigA"] (lpszName: LPCSTR; lpCC: LPCOMMCONFIG; dwSize: DWORD): BOOL;
PROCEDURE ^ SetDefaultCommConfigW* ["SetDefaultCommConfigW"] (lpszName: LPCWSTR; lpCC: LPCOMMCONFIG; dwSize: DWORD): BOOL;
PROCEDURE ^ SetDIBColorTable* ["SetDIBColorTable"] (hdc: HDC; iStart: UINT; cEntries: UINT; prgbq: PRGBQUAD): UINT;
PROCEDURE ^ SetDIBits* ["SetDIBits"] (hdc: HDC; hbm: HBITMAP; start: UINT; cLines: UINT; lpBits: LPVOID; lpbmi: PBITMAPINFO; ColorUse: UINT): INTEGER;
PROCEDURE ^ SetDIBitsToDevice* ["SetDIBitsToDevice"] (hdc: HDC; xDest: INTEGER; yDest: INTEGER; w: DWORD; h: DWORD; xSrc: INTEGER; ySrc: INTEGER; StartScan: UINT; cLines: UINT; lpvBits: PVOID; lpbmi: PBITMAPINFO; ColorUse: UINT): INTEGER;
PROCEDURE ^ SetDisplayAutoRotationPreferences* ["SetDisplayAutoRotationPreferences"] (orientation: ORIENTATION_PREFERENCE): BOOL;
PROCEDURE ^ SetDynamicTimeZoneInformation* ["SetDynamicTimeZoneInformation"] (VAR lpTimeZoneInformation-: DYNAMIC_TIME_ZONE_INFORMATION): BOOL;
PROCEDURE ^ SetEnvironmentVariableA* ["SetEnvironmentVariableA"] (lpName: LPCSTR; lpValue: LPCSTR): BOOL;
PROCEDURE ^ SetEnvironmentVariableW* ["SetEnvironmentVariableW"] (lpName: LPCWSTR; lpValue: LPCWSTR): BOOL;
PROCEDURE ^ SetEvent* ["SetEvent"] (hEvent: HANDLE): BOOL;
PROCEDURE ^ SetFileAttributes* ["SetFileAttributes"] (lpFileName: LPCTSTR; dwFileAttributes: DWORD): BOOL;
PROCEDURE ^ SetFilePointer* ["SetFilePointer"] (hFile: HANDLE; lDistanceToMove: LONG; lpDistanceToMoveHigh: PLONG; dwMoveMethod: DWORD): DWORD;
PROCEDURE ^ SetFileTime* ["SetFileTime"] (hFile: HANDLE; lpCreationTime: LPFILETIME; lpLastAccessTime: LPFILETIME; lpLastWriteTime: LPFILETIME): BOOL;
PROCEDURE ^ SetGraphicsMode* ["SetGraphicsMode"] (hdc: HDC; iMode: INTEGER): INTEGER;
PROCEDURE ^ SetLayout* ["SetLayout"] (hdc: HDC; l: DWORD): DWORD;
PROCEDURE ^ SetLocalTime* ["SetLocalTime"] (VAR lpSystemTime-: SYSTEMTIME): BOOL;
PROCEDURE ^ SetMailslotInfo* ["SetMailslotInfo"] (hMailslot: HANDLE; lReadTimeout: DWORD): BOOL;
PROCEDURE ^ SetMapMode* ["SetMapMode"] (hdc: HDC; iMode: INTEGER): INTEGER;
PROCEDURE ^ SetMapperFlags* ["SetMapperFlags"] (hdc: HDC; flags: DWORD): DWORD;
PROCEDURE ^ SetMenuItemInfoA* ["SetMenuItemInfoA"] (hMenu: HMENU; uItem: UINT; fByPosition: BOOL; lpmii: LPMENUITEMINFO): BOOL;
PROCEDURE ^ SetMenuItemInfoW* ["SetMenuItemInfoW"] (hMenu: HMENU; uItem: UINT; fByPosition: BOOL; lpmii: LPMENUITEMINFO): BOOL;
PROCEDURE ^ SetMetaRgn* ["SetMetaRgn"] (hdc: HDC): INTEGER;
PROCEDURE ^ SetMiterLimit* ["SetMiterLimit"] (hdc: HDC; limit: FLOAT; old: PFLOAT): BOOL;
PROCEDURE ^ SetNamedPipeHandleState* ["SetNamedPipeHandleState"] (hNamedPipe: HANDLE; lpMode: LPDWORD; lpMaxCollectionCount: LPDWORD; lpCollectDataTimeout: LPDWORD): BOOL;
PROCEDURE ^ SetPaletteEntries* ["SetPaletteEntries"] (hpal: HPALETTE; iStart: UINT; cEntries: UINT; pPalEntries: PPALETTEENTRY): UINT;
PROCEDURE ^ SetPixel* ["SetPixel"] (hdc: HDC; x: INTEGER; y: INTEGER; color: COLORREF): COLORREF;
PROCEDURE ^ SetPixelV* ["SetPixelV"] (hdc: HDC; x: INTEGER; y: INTEGER; color: COLORREF): BOOL;
PROCEDURE ^ SetPolyFillMode* ["SetPolyFillMode"] (hdc: HDC; iPolyFillMode: INTEGER): INTEGER;
PROCEDURE ^ SetPriorityClass* ["SetPriorityClass"] (hProcess: HANDLE; dwPriorityClass: DWORD): BOOL;
PROCEDURE ^ SetRect* ["SetRect"] (VAR lprc: RECT; xLeft: INTEGER; yTop: INTEGER; xRight: INTEGER; yBottom: INTEGER): BOOL;
PROCEDURE ^ SetRectEmpty* ["SetRectEmpty"] (VAR lprc: RECT): BOOL;
PROCEDURE ^ SetRectRgn* ["SetRectRgn"] (hrgn: HRGN; nLeftRect: INTEGER; nTopRect: INTEGER; nRightRect: INTEGER; nBottomRect: INTEGER): BOOL;
PROCEDURE ^ SetROP2* ["SetROP2"] (hdc: HDC; rop2: INTEGER): INTEGER;
PROCEDURE ^ SetStdHandle* ["SetStdHandle"] (nStdHandle: DWORD; hHandle: HANDLE): BOOL;
PROCEDURE ^ SetStretchBltMode* ["SetStretchBltMode"] (hdc: HDC; mode: INTEGER): INTEGER;
PROCEDURE ^ SetSystemPaletteUse* ["SetSystemPaletteUse"] (hdc: HDC; use: UINT): UINT;
PROCEDURE ^ SetSystemTime* ["SetSystemTime"] (VAR lpSystemTime-: SYSTEMTIME): BOOL;
PROCEDURE ^ SetSystemTimeAdjustment* ["SetSystemTimeAdjustment"] (dwTimeAdjustment: DWORD; bTimeAdjustmentDisabled: BOOL): BOOL;
PROCEDURE ^ SetTextAlign* ["SetTextAlign"] (hdc: HDC; align: UINT): UINT;
PROCEDURE ^ SetTextCharacterExtra* ["SetTextCharacterExtra"] (hdc: HDC; extra: INTEGER): INTEGER;
PROCEDURE ^ SetTextColor* ["SetTextColor"] (hdc: HDC; color: COLORREF): COLORREF;
PROCEDURE ^ SetTextJustification* ["SetTextJustification"] (hdc: HDC; extra: INTEGER; count: INTEGER): BOOL;
PROCEDURE ^ SetThreadAffinityMask* ["SetThreadAffinityMask"] (hThread: HANDLE; dwThreadAffinityMask: SET): SET;
PROCEDURE ^ SetTimer* ["SetTimer"] (hWnd: HWND; nIDEvent: UINT_PTR; uElapse: UINT; lpTimerFunc: TIMERPROC): UINT_PTR;
PROCEDURE ^ SetTimeZoneInformation* ["SetTimeZoneInformation"] (VAR lpTimeZoneInformation-: TIME_ZONE_INFORMATION): BOOL;
PROCEDURE ^ SetupComm* ["SetupComm"] (hFile: HANDLE; dwInQueue: DWORD; dwOutQueue: DWORD): BOOL;
PROCEDURE ^ SetViewportExtEx* ["SetViewportExtEx"] (hdc: HDC; x: INTEGER; y: INTEGER; lpsz: LPSIZE): BOOL;
PROCEDURE ^ SetViewportOrgEx* ["SetViewportOrgEx"] (hdc: HDC; x: INTEGER; y: INTEGER; lppt: LPPOINT): BOOL;
PROCEDURE ^ SetWindowExtEx* ["SetWindowExtEx"] (hdc: HDC; x: INTEGER; y: INTEGER; lpsz: LPSIZE): BOOL;
PROCEDURE ^ SetWindowLongA* ["SetWindowLongA"] (hWnd: HWND; nIndex: INTEGER; dwNewLong: LONG): LONG;
PROCEDURE ^ SetWindowLongPtrA* ["SetWindowLongPtrA"] (hWnd: HWND; nIndex: INTEGER; dwNewLong: LONG_PTR): LONG_PTR;
PROCEDURE ^ SetWindowLongPtrW* ["SetWindowLongPtrW"] (hWnd: HWND; nIndex: INTEGER; dwNewLong: LONG_PTR): LONG_PTR;
PROCEDURE ^ SetWindowLongW* ["SetWindowLongW"] (hWnd: HWND; nIndex: INTEGER; dwNewLong: LONG): LONG;
PROCEDURE ^ SetWindowOrgEx* ["SetWindowOrgEx"] (hdc: HDC; x: INTEGER; y: INTEGER; lppt: LPPOINT): BOOL;
PROCEDURE ^ SetWindowPos* ["SetWindowPos"] (hWnd: HWND; hWndInsertAfter: HWND; X: INTEGER; Y: INTEGER; cx: INTEGER; cy: INTEGER; uFlags: UINT): BOOL;
PROCEDURE ^ SetWindowRgn* ["SetWindowRgn"] (hWnd: HWND; hRgn: HRGN; bRedraw: BOOL): INTEGER;
PROCEDURE ^ SetWorldTransform* ["SetWorldTransform"] (hdc: HDC; lpxf: PXFORM): BOOL;
PROCEDURE ^ ShellAboutA* ["ShellAboutA"] (hWnd: HWND; szApp: LPCSTR; szOtherStuff: LPCSTR; hIcon: HICON): INTEGER;
PROCEDURE ^ ShellAboutW* ["ShellAboutW"] (hWnd: HWND; szApp: LPCWSTR; szOtherStuff: LPCWSTR; hIcon: HICON): INTEGER;
PROCEDURE ^ ShellExecuteA* ["ShellExecuteA"] (hwnd: HWND; lpOperation: LPCSTR; lpFile: LPCSTR; lpParameters: LPCSTR; lpDirectory: LPCSTR; nShowCmd: INT): HINSTANCE;
PROCEDURE ^ ShellExecuteW* ["ShellExecuteW"] (hwnd: HWND; lpOperation: LPCWSTR; lpFile: LPCWSTR; lpParameters: LPCWSTR; lpDirectory: LPCWSTR; nShowCmd: INT): HINSTANCE;
PROCEDURE ^ ShowWindow* ["ShowWindow"] (hWnd: HWND; nCmdShow: INTEGER): BOOL;
PROCEDURE ^ shutdown* ["shutdown"] (s: SOCKET; how: INTEGER): INTEGER;
PROCEDURE ^ Sleep* ["Sleep"] (dwMilliseconds: DWORD);
PROCEDURE ^ SleepConditionVariableCS* ["SleepConditionVariableCS"] (ConditionVariable: PCONDITION_VARIABLE; CriticalSection: LPCRITICAL_SECTION; dwMilliseconds: DWORD): BOOL;
PROCEDURE ^ socket* ["socket"] (af: INTEGER; type: INTEGER; protocol: INTEGER): SOCKET;
PROCEDURE ^ StretchBlt* ["StretchBlt"] (hdcDest: HDC; xDest: INTEGER; yDest: INTEGER; wDest: INTEGER; hDest: INTEGER; hdcSrc: HDC; xSrc: INTEGER; ySrc: INTEGER; wSrc: INTEGER; hSrc: INTEGER; rop: DWORD): BOOL;
PROCEDURE ^ StretchDIBits* ["StretchDIBits"] (hdc: HDC; xDest: INTEGER; yDest: INTEGER; DestWidth: INTEGER; DestHeight: INTEGER; xSrc: INTEGER; ySrc: INTEGER; SrcWidth: INTEGER; SrcHeight: INTEGER; lpBits: PVOID; lpbmi: PBITMAPINFO; iUsage: UINT; rop: DWORD): INTEGER;
PROCEDURE ^ StrokeAndFillPath* ["StrokeAndFillPath"] (hdc: HDC): BOOL;
PROCEDURE ^ StrokePath* ["StrokePath"] (hdc: HDC): BOOL;
PROCEDURE ^ SubtractRect* ["SubtractRect"] (VAR lprcDst: RECT; VAR lprcSrc1-: RECT; VAR lprcSrc2-: RECT): BOOL;
PROCEDURE ^ SwitchToFiber* ["SwitchToFiber"] (lpFiber: LPVOID);
PROCEDURE ^ SwitchToThread* ["SwitchToThread"] (): BOOL;
PROCEDURE ^ SystemTimeToFileTime* ["SystemTimeToFileTime"] (VAR lpSystemTime-: SYSTEMTIME; VAR lpFileTime: FILETIME): BOOL;
PROCEDURE ^ SystemTimeToTzSpecificLocalTime* ["SystemTimeToTzSpecificLocalTime"] (lpTimeZoneInformation: LPTIME_ZONE_INFORMATION; VAR lpUniversalTime-: SYSTEMTIME; VAR lpLocalTime: SYSTEMTIME): BOOL;
PROCEDURE ^ SystemTimeToTzSpecificLocalTimeEx* ["SystemTimeToTzSpecificLocalTimeEx"] (VAR lpTimeZoneInformation-: DYNAMIC_TIME_ZONE_INFORMATION; VAR lpUniversalTime-: SYSTEMTIME; VAR lpLocalTime: SYSTEMTIME): BOOL;
PROCEDURE ^ TabbedTextOutA* ["TabbedTextOutA"] (hdc: HDC; x: INTEGER; y: INTEGER; lpString: LPCSTR; chCount: INTEGER; nTabPositions: INTEGER; lpnTabStopPositions: PINT; nTabOrigin: INTEGER): LONG;
PROCEDURE ^ TabbedTextOutW* ["TabbedTextOutW"] (hdc: HDC; x: INTEGER; y: INTEGER; lpString: LPCWSTR; chCount: INTEGER; nTabPositions: INTEGER; lpnTabStopPositions: PINT; nTabOrigin: INTEGER): LONG;
PROCEDURE ^ TextOutA* ["TextOutA"] (hdc: HDC; x: INTEGER; y: INTEGER; lpString: LPCSTR; c: INTEGER): BOOL;
PROCEDURE ^ TextOutW* ["TextOutW"] (hdc: HDC; x: INTEGER; y: INTEGER; lpString: LPCWSTR; c: INTEGER): BOOL;
PROCEDURE ^ TlsAlloc* ["TlsAlloc"] (): DWORD;
PROCEDURE ^ TlsFree* ["TlsFree"] (dwTlsIndex: DWORD): BOOL;
PROCEDURE ^ TlsGetValue* ["TlsGetValue"] (dwTlsIndex: DWORD): LPVOID;
PROCEDURE ^ TlsSetValue* ["TlsSetValue"] (dwTlsIndex: DWORD; lpTlsValue: LPVOID): BOOL;
PROCEDURE ^ TransactNamedPipe* ["TransactNamedPipe"] (hNamedPipe: HANDLE; lpInBuffer: LPVOID; nInBufferSize: DWORD; lpOutBuffer: LPVOID; nOutBufferSize: DWORD; lpBytesRead: LPDWORD; lpOverlapped: LPOVERLAPPED): BOOL;
PROCEDURE ^ TranslateMessage* ["TranslateMessage"] (VAR lpMsg-: LPMSG): BOOL;
PROCEDURE ^ TransmitCommChar* ["TransmitCommChar"] (hFile: HANDLE; cChar: CHAR): BOOL;
PROCEDURE ^ TransparentBlt* ["TransparentBlt"] (hdcDest: HDC; xoriginDest: INTEGER; yoriginDest: INTEGER; wDest: INTEGER; hDest: INTEGER; hdcSrc: HDC; xoriginSrc: INTEGER; yoriginSrc: INTEGER; wSrc: INTEGER; hSrc: INTEGER; crTransparent: UINT): BOOL;
PROCEDURE ^ TryEnterCriticalSection* ["TryEnterCriticalSection"] (lpCriticalSection: LPCRITICAL_SECTION): BOOL;
PROCEDURE ^ TzSpecificLocalTimeToSystemTime* ["TzSpecificLocalTimeToSystemTime"] (lpTimeZoneInformation: LPTIME_ZONE_INFORMATION; VAR lpLocalTime-: SYSTEMTIME; VAR lpUniversalTime-: SYSTEMTIME): BOOL;
PROCEDURE ^ TzSpecificLocalTimeToSystemTimeEx* ["TzSpecificLocalTimeToSystemTimeEx"] (VAR lpTimeZoneInformation-: DYNAMIC_TIME_ZONE_INFORMATION; VAR lpLocalTime-: SYSTEMTIME; VAR lpUniversalTime: SYSTEMTIME): BOOL;
PROCEDURE ^ UnionRect* ["UnionRect"] (VAR lprcDst: RECT; VAR lprcSrc1-: RECT; VAR lprcSrc2-: RECT): BOOL;
PROCEDURE ^ UnrealizeObject* ["UnrealizeObject"] (h: HGDIOBJ): BOOL;
PROCEDURE ^ UnregisterClassA* ["UnregisterClassA"] (lpClassName: LPCSTR; hInstance: HINSTANCE): BOOL;
PROCEDURE ^ UnregisterClassW* ["UnregisterClassW"] (lpClassName: LPCWSTR; hInstance: HINSTANCE): BOOL;
PROCEDURE ^ UpdateColors* ["UpdateColors"] (hdc: HDC): BOOL;
PROCEDURE ^ UpdateWindow* ["UpdateWindow"] (hWnd: HWND): BOOL;
PROCEDURE ^ ValidateRect* ["ValidateRect"] (hWnd: HWND; lpRect: LPRECT): BOOL;
PROCEDURE ^ ValidateRgn* ["ValidateRgn"] (hWnd: HWND; hRgn: HRGN): BOOL;
PROCEDURE ^ WaitCommEvent* ["WaitCommEvent"] (hFile: HANDLE; lpEvtMask: LPDWORD; lpOverlapped: LPOVERLAPPED): BOOL;
PROCEDURE ^ WaitForMultipleObjects* ["WaitForMultipleObjects"] (nCount: DWORD; lpHandles: SYSTEM.ADDRESS; bWaitAll: BOOL; dwMilliseconds: DWORD): DWORD;
PROCEDURE ^ WaitForSingleObject* ["WaitForSingleObject"] (hHandle: HANDLE; dwMilliseconds: DWORD): DWORD;
PROCEDURE ^ WaitNamedPipeA* ["WaitNamedPipeA"] (lpNamedPipeName: LPCSTR; nTimeOut: DWORD): BOOL;
PROCEDURE ^ WaitNamedPipeW* ["WaitNamedPipeW"] (lpNamedPipeName: LPCWSTR; nTimeOut: DWORD): BOOL;
PROCEDURE ^ WakeAllConditionVariable* ["WakeAllConditionVariable"] (ConditionVariable: PCONDITION_VARIABLE);
PROCEDURE ^ WakeConditionVariable* ["WakeConditionVariable"] (ConditionVariable: PCONDITION_VARIABLE);
PROCEDURE ^ WidenPath* ["WidenPath"] (hdc: HDC): BOOL;
PROCEDURE ^ WindowFromDC* ["WindowFromDC"] (hDC: HDC): HWND;
PROCEDURE ^ WriteFile* ["WriteFile"] (hFile: HANDLE; lpBuffer: LPCVOID; nNumberOfBytesToWrite: DWORD; lpNumberOfBytesWritten: LPDWORD; lpOverlapped: LPOVERLAPPED): BOOL;
PROCEDURE ^ WSACleanup* ["WSACleanup"] (): INTEGER;
PROCEDURE ^ WSAGetLastError* ["WSAGetLastError"] (): INTEGER;
PROCEDURE ^ WSAStartup* ["WSAStartup"] (wVersionRequested: WORD; lpWSAData: LPWSADATA): INTEGER;

END Windows.
