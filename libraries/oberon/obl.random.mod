(* Pseudo-random number generator
Copyright (C) Florian Negele

This file is part of the Eigen Compiler Suite.

The ECS is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

The ECS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of the GNU General Public License version 3,
the copyright holder grants you additional permissions to use
this file as described in the ECS Runtime Support Exception.

You should have received a copy of the GNU General Public License
and a copy of the ECS Runtime Support Exception along with
the ECS.  If not, see <https://www.gnu.org/licenses/>. *)

(** The module {{{Random}}} provides several functions for generating uniform pseudo-random numbers. *)
(** Each function requires a //seed// which defines the next number in the predefined sequence of the underlying random number generator. *)
MODULE Random IN OBL;

IMPORT SYSTEM;

(** Represents the current seed for the next number generated by the random number generator. *)
TYPE Seed* = RECORD- value: INTEGER END;

(** Initializes the seed of the random number generator with the specified value. *)
PROCEDURE Initialize* (VAR seed: Seed; value: INTEGER);
BEGIN
	seed.value := value;
END Initialize;

(** Returns a uniform random integer number between zero and {{{MAX(INTEGER)}}}. *)
PROCEDURE Integer* (VAR seed: Seed): INTEGER;
CONST a = 16807; q = 127773 MOD (MAX (INTEGER) + 1); r = 2836; VAR value: INTEGER;
BEGIN
	value := seed.value;
	seed.value := a * (value MOD q) - r * (value DIV q);
	RETURN value MOD SHORT (MAX (INTEGER) + 1);
END Integer;

(** Returns the value of a roll of a uniform dice with the specified number of sides. *)
PROCEDURE Dice* (VAR seed: Seed; sides: INTEGER): INTEGER;
BEGIN
	RETURN Integer (seed) MOD sides;
END Dice;

(** Returns a uniformly distributed random real number between zero and one. *)
PROCEDURE Uniform* (VAR seed: Seed): REAL;
BEGIN
	RETURN Integer (seed) / MAX (INTEGER);
END Uniform;

(** Creates an arbitrary random value. *)
PROCEDURE Create* (VAR seed: Seed; VAR value: ARRAY OF SYSTEM.BYTE);
VAR i: LENGTH;
BEGIN FOR i := 0 TO LEN (value) - 1 DO value[i] := SYSTEM.BYTE (Integer (seed)) END;
END Create;

END Random.
