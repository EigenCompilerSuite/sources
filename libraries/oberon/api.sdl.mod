(* SDL API wrapper
Copyright (C) Florian Negele

This file is part of the Eigen Compiler Suite.

The ECS is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

The ECS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of the GNU General Public License version 3,
the copyright holder grants you additional permissions to use
this file as described in the ECS Runtime Support Exception.

You should have received a copy of the GNU General Public License
and a copy of the ECS Runtime Support Exception along with
the ECS.  If not, see <https://www.gnu.org/licenses/>. *)

MODULE SDL IN API;

IMPORT SYSTEM;

CONST ANYFORMAT* = 10000000H;
CONST APP_DIDENTERBACKGROUND* = 104H;
CONST APP_DIDENTERFOREGROUND* = 106H;
CONST APP_LOWMEMORY* = 102H;
CONST APP_TERMINATING* = 101H;
CONST APP_WILLENTERBACKGROUND* = 103H;
CONST APP_WILLENTERFOREGROUND* = 105H;
CONST ASYNCBLIT* = 4H;
CONST AUDIODEVICEADDED* = 1100H;
CONST AUDIODEVICEREMOVED* = 1101H;
CONST BLENDMODE_ADD* = 2H;
CONST BLENDMODE_BLEND* = 1H;
CONST BLENDMODE_MOD* = 4H;
CONST BLENDMODE_NONE* = 0H;
CONST CLIPBOARDUPDATE* = 900H;
CONST CONTROLLERAXISMOTION* = 650H;
CONST CONTROLLERBUTTONDOWN* = 651H;
CONST CONTROLLERBUTTONUP* = 652H;
CONST CONTROLLERDEVICEADDED* = 653H;
CONST CONTROLLERDEVICEREMAPPED* = 655H;
CONST CONTROLLERDEVICEREMOVED* = 654H;
CONST DOLLARGESTURE* = 800H;
CONST DOLLARRECORD* = 801H;
CONST DOUBLEBUF* = 40000000H;
CONST DROPFILE* = 1000H;
CONST FINGERDOWN* = 700H;
CONST FINGERMOTION* = 702H;
CONST FINGERUP* = 701H;
CONST FIRSTEVENT* = 0H;
CONST FULLSCREEN* = 80000000H;
CONST HINT_ACCELEROMETER_AS_JOYSTICK* = "SDL_ACCELEROMETER_AS_JOYSTICK";
CONST HINT_ALLOW_TOPMOST* = "SDL_ALLOW_TOPMOST";
CONST HINT_FRAMEBUFFER_ACCELERATION* = "SDL_FRAMEBUFFER_ACCELERATION";
CONST HINT_GAMECONTROLLERCONFIG* = "SDL_GAMECONTROLLERCONFIG";
CONST HINT_GRAB_KEYBOARD* = "SDL_GRAB_KEYBOARD";
CONST HINT_IDLE_TIMER_DISABLED* = "SDL_IOS_IDLE_TIMER_DISABLED";
CONST HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS* = "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS";
CONST HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK* = "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK";
CONST HINT_MOUSE_RELATIVE_MODE_WARP* = "SDL_MOUSE_RELATIVE_MODE_WARP";
CONST HINT_ORIENTATIONS* = "SDL_IOS_ORIENTATIONS";
CONST HINT_RENDER_DIRECT3D_THREADSAFE* = "SDL_RENDER_DIRECT3D_THREADSAFE";
CONST HINT_RENDER_DRIVER* = "SDL_RENDER_DRIVER";
CONST HINT_RENDER_OPENGL_SHADERS* = "SDL_RENDER_OPENGL_SHADERS";
CONST HINT_RENDER_SCALE_QUALITY* = "SDL_RENDER_SCALE_QUALITY";
CONST HINT_RENDER_VSYNC* = "SDL_RENDER_VSYNC";
CONST HINT_TIMER_RESOLUTION* = "SDL_TIMER_RESOLUTION";
CONST HINT_VIDEO_ALLOW_SCREENSAVER* = "SDL_VIDEO_ALLOW_SCREENSAVER";
CONST HINT_VIDEO_HIGHDPI_DISABLED* = "SDL_VIDEO_HIGHDPI_DISABLED";
CONST HINT_VIDEO_MAC_FULLSCREEN_SPACES* = "SDL_VIDEO_MAC_FULLSCREEN_SPACES";
CONST HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS* = "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS";
CONST HINT_VIDEO_WIN_D3DCOMPILER* = "SDL_VIDEO_WIN_D3DCOMPILER";
CONST HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT* = "SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT";
CONST HINT_VIDEO_X11_XINERAMA* = "SDL_VIDEO_X11_XINERAMA";
CONST HINT_VIDEO_X11_XRANDR* = "SDL_VIDEO_X11_XRANDR";
CONST HINT_VIDEO_X11_XVIDMODE* = "SDL_VIDEO_X11_XVIDMODE";
CONST HINT_XINPUT_ENABLED* = "SDL_XINPUT_ENABLED";
CONST HWPALETTE* = 20000000H;
CONST HWSURFACE* = 1H;
CONST INIT_AUDIO* = 10H;
CONST INIT_CDROM* = 100H;
CONST INIT_EVENTTHREAD* = 1000000H;
CONST INIT_EVERYTHING* = 0FFFFH;
CONST INIT_JOYSTICK* = 200H;
CONST INIT_NOPARACHUTE* = 100000H;
CONST INIT_TIMER* = 1H;
CONST INIT_VIDEO* = 20H;
CONST JOYAXISMOTION* = 600H;
CONST JOYBALLMOTION* = 601H;
CONST JOYBUTTONDOWN* = 603H;
CONST JOYBUTTONUP* = 604H;
CONST JOYDEVICEADDED* = 605H;
CONST JOYDEVICEREMOVED* = 606H;
CONST JOYHATMOTION* = 602H;
CONST KEYDOWN* = 300H;
CONST KEYMAPCHANGED* = 304H;
CONST KEYUP* = 301H;
CONST LASTEVENT* = 0FFFFH;
CONST MOUSEBUTTONDOWN* = 401H;
CONST MOUSEBUTTONUP* = 402H;
CONST MOUSEMOTION* = 400H;
CONST MOUSEWHEEL* = 403H;
CONST MULTIGESTURE* = 802H;
CONST NOFRAME* = 20H;
CONST NUM_SCANCODES* = 512;
CONST OPENGL* = 2H;
CONST OPENGLBLIT* = 0AH;
CONST QUIT* = 100H;
CONST RENDER_DEVICE_RESET* = 2001H;
CONST RENDERER_ACCELERATED* = 2H;
CONST RENDERER_PRESENTVSYNC* = 4H;
CONST RENDERER_SOFTWARE* = 1H;
CONST RENDERER_TARGETTEXTURE* = 8H;
CONST RENDER_TARGETS_RESET* = 2000H;
CONST RESIZABLE* = 10H;
CONST SCANCODE_0* = 39;
CONST SCANCODE_1* = 30;
CONST SCANCODE_2* = 31;
CONST SCANCODE_3* = 32;
CONST SCANCODE_4* = 33;
CONST SCANCODE_5* = 34;
CONST SCANCODE_6* = 35;
CONST SCANCODE_7* = 36;
CONST SCANCODE_8* = 37;
CONST SCANCODE_9* = 38;
CONST SCANCODE_A* = 4;
CONST SCANCODE_AC_BACK* = 270;
CONST SCANCODE_AC_BOOKMARKS* = 274;
CONST SCANCODE_AC_FORWARD* = 271;
CONST SCANCODE_AC_HOME* = 269;
CONST SCANCODE_AC_REFRESH* = 273;
CONST SCANCODE_AC_SEARCH* = 268;
CONST SCANCODE_AC_STOP* = 272;
CONST SCANCODE_AGAIN* = 121;
CONST SCANCODE_ALTERASE* = 153;
CONST SCANCODE_APOSTROPHE* = 52;
CONST SCANCODE_APP1* = 283;
CONST SCANCODE_APP2* = 284;
CONST SCANCODE_APPLICATION* = 101;
CONST SCANCODE_AUDIOMUTE* = 262;
CONST SCANCODE_AUDIONEXT* = 258;
CONST SCANCODE_AUDIOPLAY* = 261;
CONST SCANCODE_AUDIOPREV* = 259;
CONST SCANCODE_AUDIOSTOP* = 260;
CONST SCANCODE_B* = 5;
CONST SCANCODE_BACKSLASH* = 49;
CONST SCANCODE_BACKSPACE* = 42;
CONST SCANCODE_BRIGHTNESSDOWN* = 275;
CONST SCANCODE_BRIGHTNESSUP* = 276;
CONST SCANCODE_C* = 6;
CONST SCANCODE_CALCULATOR* = 266;
CONST SCANCODE_CANCEL* = 155;
CONST SCANCODE_CAPSLOCK* = 57;
CONST SCANCODE_CLEAR* = 156;
CONST SCANCODE_CLEARAGAIN* = 162;
CONST SCANCODE_COMMA* = 54;
CONST SCANCODE_COMPUTER* = 267;
CONST SCANCODE_COPY* = 124;
CONST SCANCODE_CRSEL* = 163;
CONST SCANCODE_CURRENCYSUBUNIT* = 181;
CONST SCANCODE_CURRENCYUNIT* = 180;
CONST SCANCODE_CUT* = 123;
CONST SCANCODE_D* = 7;
CONST SCANCODE_DECIMALSEPARATOR* = 179;
CONST SCANCODE_DELETE* = 76;
CONST SCANCODE_DISPLAYSWITCH* = 277;
CONST SCANCODE_DOWN* = 81;
CONST SCANCODE_E* = 8;
CONST SCANCODE_EJECT* = 281;
CONST SCANCODE_END* = 77;
CONST SCANCODE_EQUALS* = 46;
CONST SCANCODE_ESCAPE* = 41;
CONST SCANCODE_EXECUTE* = 116;
CONST SCANCODE_EXSEL* = 164;
CONST SCANCODE_F10* = 67;
CONST SCANCODE_F11* = 68;
CONST SCANCODE_F12* = 69;
CONST SCANCODE_F13* = 104;
CONST SCANCODE_F14* = 105;
CONST SCANCODE_F15* = 106;
CONST SCANCODE_F1* = 58;
CONST SCANCODE_F16* = 107;
CONST SCANCODE_F17* = 108;
CONST SCANCODE_F18* = 109;
CONST SCANCODE_F19* = 110;
CONST SCANCODE_F20* = 111;
CONST SCANCODE_F21* = 112;
CONST SCANCODE_F22* = 113;
CONST SCANCODE_F23* = 114;
CONST SCANCODE_F24* = 115;
CONST SCANCODE_F2* = 59;
CONST SCANCODE_F3* = 60;
CONST SCANCODE_F4* = 61;
CONST SCANCODE_F5* = 62;
CONST SCANCODE_F6* = 63;
CONST SCANCODE_F7* = 64;
CONST SCANCODE_F8* = 65;
CONST SCANCODE_F* = 9;
CONST SCANCODE_F9* = 66;
CONST SCANCODE_FIND* = 126;
CONST SCANCODE_G* = 10;
CONST SCANCODE_GRAVE* = 53;
CONST SCANCODE_H* = 11;
CONST SCANCODE_HELP* = 117;
CONST SCANCODE_HOME* = 74;
CONST SCANCODE_I* = 12;
CONST SCANCODE_INSERT* = 73;
CONST SCANCODE_INTERNATIONAL1* = 135;
CONST SCANCODE_INTERNATIONAL2* = 136;
CONST SCANCODE_INTERNATIONAL3* = 137;
CONST SCANCODE_INTERNATIONAL4* = 138;
CONST SCANCODE_INTERNATIONAL5* = 139;
CONST SCANCODE_INTERNATIONAL6* = 140;
CONST SCANCODE_INTERNATIONAL7* = 141;
CONST SCANCODE_INTERNATIONAL8* = 142;
CONST SCANCODE_INTERNATIONAL9* = 143;
CONST SCANCODE_J* = 13;
CONST SCANCODE_K* = 14;
CONST SCANCODE_KBDILLUMDOWN* = 279;
CONST SCANCODE_KBDILLUMTOGGLE* = 278;
CONST SCANCODE_KBDILLUMUP* = 280;
CONST SCANCODE_KP_000* = 177;
CONST SCANCODE_KP_00* = 176;
CONST SCANCODE_KP_0* = 98;
CONST SCANCODE_KP_1* = 89;
CONST SCANCODE_KP_2* = 90;
CONST SCANCODE_KP_3* = 91;
CONST SCANCODE_KP_4* = 92;
CONST SCANCODE_KP_5* = 93;
CONST SCANCODE_KP_6* = 94;
CONST SCANCODE_KP_7* = 95;
CONST SCANCODE_KP_8* = 96;
CONST SCANCODE_KP_9* = 97;
CONST SCANCODE_KP_A* = 188;
CONST SCANCODE_KP_AMPERSAND* = 199;
CONST SCANCODE_KP_AT* = 206;
CONST SCANCODE_KP_B* = 189;
CONST SCANCODE_KP_BACKSPACE* = 187;
CONST SCANCODE_KP_BINARY* = 218;
CONST SCANCODE_KP_C* = 190;
CONST SCANCODE_KP_CLEAR* = 216;
CONST SCANCODE_KP_CLEARENTRY* = 217;
CONST SCANCODE_KP_COLON* = 203;
CONST SCANCODE_KP_COMMA* = 133;
CONST SCANCODE_KP_D* = 191;
CONST SCANCODE_KP_DBLAMPERSAND* = 200;
CONST SCANCODE_KP_DBLVERTICALBAR* = 202;
CONST SCANCODE_KP_DECIMAL* = 220;
CONST SCANCODE_KP_DIVIDE* = 84;
CONST SCANCODE_KP_E* = 192;
CONST SCANCODE_KP_ENTER* = 88;
CONST SCANCODE_KP_EQUALS* = 103;
CONST SCANCODE_KP_EQUALSAS400* = 134;
CONST SCANCODE_KP_EXCLAM* = 207;
CONST SCANCODE_KP_F* = 193;
CONST SCANCODE_KP_GREATER* = 198;
CONST SCANCODE_KP_HASH* = 204;
CONST SCANCODE_KP_HEXADECIMAL* = 221;
CONST SCANCODE_KP_LEFTBRACE* = 184;
CONST SCANCODE_KP_LEFTPAREN* = 182;
CONST SCANCODE_KP_LESS* = 197;
CONST SCANCODE_KP_MEMADD* = 211;
CONST SCANCODE_KP_MEMCLEAR* = 210;
CONST SCANCODE_KP_MEMDIVIDE* = 214;
CONST SCANCODE_KP_MEMMULTIPLY* = 213;
CONST SCANCODE_KP_MEMRECALL* = 209;
CONST SCANCODE_KP_MEMSTORE* = 208;
CONST SCANCODE_KP_MEMSUBTRACT* = 212;
CONST SCANCODE_KP_MINUS* = 86;
CONST SCANCODE_KP_MULTIPLY* = 85;
CONST SCANCODE_KP_OCTAL* = 219;
CONST SCANCODE_KP_PERCENT* = 196;
CONST SCANCODE_KP_PERIOD* = 99;
CONST SCANCODE_KP_PLUS* = 87;
CONST SCANCODE_KP_PLUSMINUS* = 215;
CONST SCANCODE_KP_POWER* = 195;
CONST SCANCODE_KP_RIGHTBRACE* = 185;
CONST SCANCODE_KP_RIGHTPAREN* = 183;
CONST SCANCODE_KP_SPACE* = 205;
CONST SCANCODE_KP_TAB* = 186;
CONST SCANCODE_KP_VERTICALBAR* = 201;
CONST SCANCODE_KP_XOR* = 194;
CONST SCANCODE_L* = 15;
CONST SCANCODE_LALT* = 226;
CONST SCANCODE_LANG1* = 144;
CONST SCANCODE_LANG2* = 145;
CONST SCANCODE_LANG3* = 146;
CONST SCANCODE_LANG4* = 147;
CONST SCANCODE_LANG5* = 148;
CONST SCANCODE_LANG6* = 149;
CONST SCANCODE_LANG7* = 150;
CONST SCANCODE_LANG8* = 151;
CONST SCANCODE_LANG9* = 152;
CONST SCANCODE_LCTRL* = 224;
CONST SCANCODE_LEFT* = 80;
CONST SCANCODE_LEFTBRACKET* = 47;
CONST SCANCODE_LGUI* = 227;
CONST SCANCODE_LSHIFT* = 225;
CONST SCANCODE_M* = 16;
CONST SCANCODE_MAIL* = 265;
CONST SCANCODE_MEDIASELECT* = 263;
CONST SCANCODE_MENU* = 118;
CONST SCANCODE_MINUS* = 45;
CONST SCANCODE_MODE* = 257;
CONST SCANCODE_MUTE* = 127;
CONST SCANCODE_N* = 17;
CONST SCANCODE_NONUSBACKSLASH* = 100;
CONST SCANCODE_NONUSHASH* = 50;
CONST SCANCODE_NUMLOCKCLEAR* = 83;
CONST SCANCODE_O* = 18;
CONST SCANCODE_OPER* = 161;
CONST SCANCODE_OUT* = 160;
CONST SCANCODE_P* = 19;
CONST SCANCODE_PAGEDOWN* = 78;
CONST SCANCODE_PAGEUP* = 75;
CONST SCANCODE_PASTE* = 125;
CONST SCANCODE_PAUSE* = 72;
CONST SCANCODE_PERIOD* = 55;
CONST SCANCODE_POWER* = 102;
CONST SCANCODE_PRINTSCREEN* = 70;
CONST SCANCODE_PRIOR* = 157;
CONST SCANCODE_Q* = 20;
CONST SCANCODE_R* = 21;
CONST SCANCODE_RALT* = 230;
CONST SCANCODE_RCTRL* = 228;
CONST SCANCODE_RETURN2* = 158;
CONST SCANCODE_RETURN* = 40;
CONST SCANCODE_RGUI* = 231;
CONST SCANCODE_RIGHT* = 79;
CONST SCANCODE_RIGHTBRACKET* = 48;
CONST SCANCODE_RSHIFT* = 229;
CONST SCANCODE_S* = 22;
CONST SCANCODE_SCROLLLOCK* = 71;
CONST SCANCODE_SELECT* = 119;
CONST SCANCODE_SEMICOLON* = 51;
CONST SCANCODE_SEPARATOR* = 159;
CONST SCANCODE_SLASH* = 56;
CONST SCANCODE_SLEEP* = 282;
CONST SCANCODE_SPACE* = 44;
CONST SCANCODE_STOP* = 120;
CONST SCANCODE_SYSREQ* = 154;
CONST SCANCODE_T* = 23;
CONST SCANCODE_TAB* = 43;
CONST SCANCODE_THOUSANDSSEPARATOR* = 178;
CONST SCANCODE_U* = 24;
CONST SCANCODE_UNDO* = 122;
CONST SCANCODE_UNKNOWN* = 0;
CONST SCANCODE_UP* = 82;
CONST SCANCODE_V* = 25;
CONST SCANCODE_VOLUMEDOWN* = 129;
CONST SCANCODE_VOLUMEUP* = 128;
CONST SCANCODE_W* = 26;
CONST SCANCODE_WWW* = 264;
CONST SCANCODE_X* = 27;
CONST SCANCODE_Y* = 28;
CONST SCANCODE_Z* = 29;
CONST SWSURFACE* = 0H;
CONST SYSWMEVENT* = 201H;
CONST TEXTEDITING* = 302H;
CONST TEXTINPUT* = 303H;
CONST TEXTUREACCESS_STATIC* = 0;
CONST TEXTUREACCESS_STREAMING* = 1;
CONST TEXTUREACCESS_TARGET* = 2;
CONST USEREVENT* = 8000H;
CONST WINDOW_ALLOW_HIGHDPI* = 2000H;
CONST WINDOW_BORDERLESS* = 10H;
CONST WINDOWEVENT* = 200H;
CONST WINDOWEVENT_CLOSE* = 14;
CONST WINDOWEVENT_ENTER* = 10;
CONST WINDOWEVENT_EXPOSED* = 3;
CONST WINDOWEVENT_FOCUS_GAINED* = 12;
CONST WINDOWEVENT_FOCUS_LOST* = 13;
CONST WINDOWEVENT_HIDDEN* = 2;
CONST WINDOWEVENT_LEAVE* = 11;
CONST WINDOWEVENT_MAXIMIZED* = 8;
CONST WINDOWEVENT_MINIMIZED* = 7;
CONST WINDOWEVENT_MOVED* = 4;
CONST WINDOWEVENT_NONE* = 0;
CONST WINDOWEVENT_RESIZED* = 5;
CONST WINDOWEVENT_RESTORED* = 9;
CONST WINDOWEVENT_SHOWN* = 1;
CONST WINDOWEVENT_SIZE_CHANGED* = 6;
CONST WINDOW_FOREIGN* = 800H;
CONST WINDOW_FULLSCREEN* = 1H;
CONST WINDOW_FULLSCREEN_DESKTOP* = 1001H;
CONST WINDOW_HIDDEN* = 8H;
CONST WINDOW_INPUT_FOCUS* = 200H;
CONST WINDOW_INPUT_GRABBED* = 100H;
CONST WINDOW_MAXIMIZED* = 80H;
CONST WINDOW_MINIMIZED* = 40H;
CONST WINDOW_MOUSE_FOCUS* = 400H;
CONST WINDOW_OPENGL* = 2H;
CONST WINDOWPOS_CENTERED* = 2FFF0000H;
CONST WINDOWPOS_UNDEFINED* = 1FFF0000H;
CONST WINDOW_RESIZABLE* = 20H;
CONST WINDOW_SHOWN* = 4H;

TYPE Sint32* = SIGNED32;
TYPE Uint8* = UNSIGNED8;
TYPE Uint16* = UNSIGNED16;
TYPE Uint32* = UNSIGNED32;

TYPE GLContext* = SYSTEM.ADDRESS;

TYPE Color* = RECORD- r*, g*, b*, a*: Uint8 END;
TYPE Point* = RECORD- x*, y*: INTEGER END;
TYPE Rect* = RECORD- x*, y*, w*, h*: INTEGER END;
TYPE Renderer* = RECORD- END;
TYPE Texture* = RECORD- END;
TYPE Window* = RECORD- END;

TYPE CommonEvent* = RECORD-
	type*: Uint32;
	timestamp*: Uint32;
END;

TYPE Event* = RECORD-
	type*: Uint32;
	timestamp*: Uint32;
	unused*: ARRAY 44 OF CHAR;
END;

TYPE Keysym* = RECORD-
	scancode*: INTEGER;
	sym*: INTEGER;
	mod*: Uint16;
	unused*: Uint32;
END;

TYPE KeyboardEvent* = RECORD-
	type*: Uint32;
	timestamp*: Uint32;
	windowID*: Uint32;
	state*: Uint8;
	repeat*: Uint8;
	padding2*: Uint8;
	padding3*: Uint8;
	keysym*: Keysym;
END;

TYPE MouseButtonEvent* = RECORD-
	type*: Uint32;
	timestamp*: Uint32;
	windowID*: Uint32;
	which*: Uint32;
	button*: Uint8;
	state*: Uint8;
	clicks*: Uint8;
	padding1*: Uint8;
	x*: Sint32;
	y*: Sint32;
END;

TYPE MouseMotionEvent* = RECORD-
	type*: Uint32;
	timestamp*: Uint32;
	windowID*: Uint32;
	which*: Uint32;
	state*: Uint32;
	x*: Sint32;
	y*: Sint32;
	xrel*: Sint32;
	yrel*: Sint32;
END;

TYPE MouseWheelEvent* = RECORD-
	type*: Uint32;
	timestamp*: Uint32;
	windowID*: Uint32;
	which*: Uint32;
	x*: Sint32;
	y*: Sint32;
	direction*: Uint32;
END;

TYPE Palette* = RECORD-
	ncolors*: INTEGER;
	colors*: POINTER TO VAR Color;
	version*: Uint32;
	refcount*: INTEGER;
END;

TYPE PixelFormat* = RECORD-
	format*: Uint32;
	palette*: POINTER TO VAR Palette;
	BitsPerPixel*: Uint8;
	BytesPerPixel*: Uint8;
	padding*: ARRAY 2 OF Uint8;
	Rmask*: Uint32;
	Gmask*: Uint32;
	Bmask*: Uint32;
	Amask*: Uint32;
	Rloss*: Uint8;
	Gloss*: Uint8;
	Bloss*: Uint8;
	Aloss*: Uint8;
	Rshift*: Uint8;
	Gshift*: Uint8;
	Bshift*: Uint8;
	Ashift*: Uint8;
	refcount*: INTEGER;
	next*: SYSTEM.ADDRESS;
END;

TYPE Surface* = RECORD-
	flags*: Uint32;
	format*: POINTER TO VAR PixelFormat;
	w*: INTEGER;
	h*: INTEGER;
	pitch*: INTEGER;
	pixels*: SYSTEM.ADDRESS;
	userdata*: SYSTEM.ADDRESS;
	locked*: INTEGER;
	list_blitmap*: SYSTEM.ADDRESS;
	clip_rect*: Rect;
	map*: SYSTEM.ADDRESS;
	refcount*: INTEGER;
END;

TYPE TextEditingEvent* = RECORD-
	type*: Uint32;
	timestamp*: Uint32;
	windowID*: Uint32;
	text*: ARRAY 32 OF CHAR;
	start*: Sint32;
	length*: Sint32;
END;

TYPE TextInputEvent* = RECORD-
	type*: Uint32;
	timestamp*: Uint32;
	windowID*: Uint32;
	text*: ARRAY 32 OF CHAR;
END;

TYPE WindowEvent* = RECORD-
	type*: Uint32;
	timestamp*: Uint32;
	windowID*: Uint32;
	event*: Uint8;
	padding1*: Uint8;
	padding2*: Uint8;
	padding3*: Uint8;
	data1*: Sint32;
	data2*: Sint32;
END;

PROCEDURE ^ BlitSurface* ["SDL_BlitSurface"] (src: POINTER TO VAR Surface; srcrect: POINTER TO VAR- Rect; dst: POINTER TO VAR Surface; dstrect: POINTER TO VAR Rect): INTEGER;
PROCEDURE ^ CreateRenderer* ["SDL_CreateRenderer"] (window: POINTER TO VAR Window; index: INTEGER; flags: Uint32): POINTER TO VAR Renderer;
PROCEDURE ^ CreateTexture* ["SDL_CreateTexture"] (renderer: POINTER TO VAR Renderer; format: Uint32; access: INTEGER; w: INTEGER; h: INTEGER): POINTER TO VAR Texture;
PROCEDURE ^ CreateTextureFromSurface* ["SDL_CreateTextureFromSurface"] (renderer: POINTER TO VAR Renderer; surface: POINTER TO VAR Surface): POINTER TO VAR Texture;
PROCEDURE ^ CreateWindow* ["SDL_CreateWindow"] (title: POINTER TO VAR- CHAR; x: INTEGER; y: INTEGER; w: INTEGER; h: INTEGER; flags: Uint32): POINTER TO VAR Window;
PROCEDURE ^ Delay* ["SDL_Delay"] (ms: Uint32);
PROCEDURE ^ DestroyRenderer* ["SDL_DestroyRenderer"] (renderer: POINTER TO VAR Renderer);
PROCEDURE ^ DestroyTexture* ["SDL_DestroyTexture"] (texture: POINTER TO VAR Texture);
PROCEDURE ^ DestroyWindow* ["SDL_DestroyWindow"] (window: POINTER TO VAR Window);
PROCEDURE ^ DisableScreenSaver* ["SDL_DisableScreenSaver"];
PROCEDURE ^ EnableScreenSaver* ["SDL_EnableScreenSaver"];
PROCEDURE ^ EnclosePoints* ["SDL_EnclosePoints"] (points: POINTER TO VAR- Point; count: INTEGER; clip: POINTER TO VAR- Rect; result: POINTER TO VAR Rect): INTEGER;
PROCEDURE ^ FillRect* ["SDL_FillRect"] (dst: POINTER TO VAR Surface; rect: POINTER TO VAR- Rect; color: Uint32): INTEGER;
PROCEDURE ^ GetClipboardText* ["SDL_GetClipboardText"] (): POINTER TO VAR CHAR;
PROCEDURE ^ GetDisplayBounds* ["SDL_GetDisplayBounds"] (displayIndex: INTEGER; rect: POINTER TO VAR Rect): INTEGER;
PROCEDURE ^ GetError* ["SDL_GetError"] (): POINTER TO VAR- CHAR;
PROCEDURE ^ GetHint* ["SDL_GetHint"] (name: POINTER TO VAR- CHAR): POINTER TO VAR- CHAR;
PROCEDURE ^ GetNumVideoDisplays* ["SDL_GetNumVideoDisplays"] (): INTEGER;
PROCEDURE ^ GetTextureAlphaMod* ["SDL_GetTextureAlphaMod"] (texture: POINTER TO VAR Texture; VAR alpha: Uint8): INTEGER;
PROCEDURE ^ GetTextureBlendMode* ["SDL_GetTextureBlendMode"] (texture: POINTER TO VAR Texture; VAR blendMode: INTEGER): INTEGER;
PROCEDURE ^ GetTextureColorMod* ["SDL_GetTextureColorMod"] (texture: POINTER TO VAR Texture; VAR r: Uint8; VAR g: Uint8; VAR b: Uint8): INTEGER;
PROCEDURE ^ GetTicks* ["SDL_GetTicks"] (): Uint32;
PROCEDURE ^ GetWindowSize* ["SDL_GetWindowSize"] (window: POINTER TO VAR Window; VAR w: INTEGER; VAR h: INTEGER);
PROCEDURE ^ GetWindowSurface* ["SDL_GetWindowSurface"] (window: POINTER TO VAR Window): POINTER TO VAR Surface;
PROCEDURE ^ GL_CreateContext* ["SDL_GL_CreateContext"] (window: POINTER TO VAR Window): GLContext;
PROCEDURE ^ GL_DeleteContext* ["SDL_GL_DeleteContext"] (context: GLContext);
PROCEDURE ^ GL_MakeCurrent* ["SDL_GL_MakeCurrent"] (window: POINTER TO VAR Window; context: GLContext): INTEGER;
PROCEDURE ^ HasClipboardText* ["SDL_HasClipboardText"] (): INTEGER;
PROCEDURE ^ HasIntersection* ["SDL_HasIntersection"] (A: POINTER TO VAR- Rect; B: POINTER TO VAR- Rect): INTEGER;
PROCEDURE ^ Init* ["SDL_Init"] (flags: Uint32): INTEGER;
PROCEDURE ^ InitSubSystem* ["SDL_InitSubSystem"] (flags: Uint32): INTEGER;
PROCEDURE ^ IntersectRect* ["SDL_IntersectRect"] (A: POINTER TO VAR- Rect; B: POINTER TO VAR- Rect; result: POINTER TO VAR Rect): INTEGER;
PROCEDURE ^ IsScreenSaverEnabled* ["SDL_IsScreenSaverEnabled"] (): INTEGER;
PROCEDURE ^ LockTexture* ["SDL_LockTexture"] (texture: POINTER TO VAR Texture; rect: POINTER TO VAR- Rect; pixels: SYSTEM.ADDRESS; VAR pitch: INTEGER): INTEGER;
PROCEDURE ^ MapRGB* ["SDL_MapRGB"] (format: POINTER TO VAR- PixelFormat; r: Uint8; g: Uint8; b: Uint8): Uint32;
PROCEDURE ^ MapRGBA* ["SDL_MapRGBA"] (format: POINTER TO VAR- PixelFormat; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Uint32;
PROCEDURE ^ PollEvent* ["SDL_PollEvent"] (event: POINTER TO VAR Event): INTEGER;
PROCEDURE ^ QueryTexture* ["SDL_QueryTexture"] (texture: POINTER TO VAR Texture; VAR format: Uint32; VAR access: INTEGER; VAR w: INTEGER; VAR h: INTEGER): INTEGER;
PROCEDURE ^ Quit* ["SDL_Quit"];
PROCEDURE ^ QuitSubSystem* ["SDL_QuitSubSystem"] (flags: Uint32): INTEGER;
PROCEDURE ^ RenderClear* ["SDL_RenderClear"] (renderer: POINTER TO VAR Renderer): INTEGER;
PROCEDURE ^ RenderCopy* ["SDL_RenderCopy"] (renderer: POINTER TO VAR Renderer; texture: POINTER TO VAR Texture; srcrect: POINTER TO VAR- Rect; dstrect: POINTER TO VAR- Rect): INTEGER;
PROCEDURE ^ RenderDrawLine* ["SDL_RenderDrawLine"] (renderer: POINTER TO VAR Renderer; x1: INTEGER; y1: INTEGER; x2: INTEGER; y2: INTEGER): INTEGER;
PROCEDURE ^ RenderDrawLines* ["SDL_RenderDrawLines"] (renderer: POINTER TO VAR Renderer; points: POINTER TO VAR- Point; count: INTEGER): INTEGER;
PROCEDURE ^ RenderDrawPoint* ["SDL_RenderDrawPoint"] (renderer: POINTER TO VAR Renderer; x: INTEGER; y: INTEGER): INTEGER;
PROCEDURE ^ RenderDrawPoints* ["SDL_RenderDrawPoints"] (renderer: POINTER TO VAR Renderer; points: POINTER TO VAR- Point; count: INTEGER): INTEGER;
PROCEDURE ^ RenderDrawRect* ["SDL_RenderDrawRect"] (renderer: POINTER TO VAR Renderer; rect: POINTER TO VAR- Rect): INTEGER;
PROCEDURE ^ RenderDrawRects* ["SDL_RenderDrawRects"] (renderer: POINTER TO VAR Renderer; rects: POINTER TO VAR- Rect; count: INTEGER): INTEGER;
PROCEDURE ^ RenderFillRect* ["SDL_RenderFillRect"] (renderer: POINTER TO VAR Renderer; rect: POINTER TO VAR- Rect): INTEGER;
PROCEDURE ^ RenderPresent* ["SDL_RenderPresent"] (renderer: POINTER TO VAR Renderer);
PROCEDURE ^ RenderReadPixels* ["SDL_RenderReadPixels"] (renderer: POINTER TO VAR Renderer; rect: POINTER TO VAR- Rect; format: Uint32; pixels: SYSTEM.ADDRESS; pitch: INTEGER): INTEGER;
PROCEDURE ^ SetClipboardText* ["SDL_SetClipboardText"] (text: POINTER TO VAR- CHAR): INTEGER;
PROCEDURE ^ SetHint* ["SDL_SetHint"] (name: POINTER TO VAR- CHAR; value: POINTER TO VAR- CHAR): INTEGER;
PROCEDURE ^ SetRenderDrawColor* ["SDL_SetRenderDrawColor"] (renderer: POINTER TO VAR Renderer; r: Uint8; g: Uint8; b: Uint8; a: Uint8): INTEGER;
PROCEDURE ^ SetTextureAlphaMod* ["SDL_SetTextureAlphaMod"] (texture: POINTER TO VAR Texture; alpha: Uint8): INTEGER;
PROCEDURE ^ SetTextureBlendMode* ["SDL_SetTextureBlendMode"] (texture: POINTER TO VAR Texture; blendMode: INTEGER): INTEGER;
PROCEDURE ^ SetTextureColorMod* ["SDL_SetTextureColorMod"] (texture: POINTER TO VAR Texture; r: Uint8; g: Uint8; b: Uint8): INTEGER;
PROCEDURE ^ SetVideoMode* ["SDL_SetVideoMode"] (width: INTEGER; height: INTEGER; bpp: INTEGER; Uint32: INTEGER): POINTER TO VAR Surface;
PROCEDURE ^ ShowCursor* ["SDL_ShowCursor"] (toggle: INTEGER): INTEGER;
PROCEDURE ^ ShowSimpleMessageBox* ["SDL_ShowSimpleMessageBox"] (flags: Uint32; title: POINTER TO VAR- CHAR; message: POINTER TO VAR- CHAR; window: POINTER TO VAR Window): INTEGER;
PROCEDURE ^ ShowWindow* ["SDL_ShowWindow"] (window: POINTER TO VAR Window);
PROCEDURE ^ UnionRect* ["SDL_UnionRect"] (A: POINTER TO VAR- Rect; B: POINTER TO VAR- Rect; result: POINTER TO VAR Rect);
PROCEDURE ^ UnlockTexture* ["SDL_UnlockTexture"] (texture: POINTER TO VAR Texture);
PROCEDURE ^ UpdateTexture* ["SDL_UpdateTexture"] (texture: POINTER TO VAR Texture; rect: POINTER TO VAR- Rect; pixels: SYSTEM.ADDRESS; pitch: INTEGER): INTEGER;
PROCEDURE ^ UpdateWindowSurface* ["SDL_UpdateWindowSurface"] (window: POINTER TO VAR Window): INTEGER;
PROCEDURE ^ UpdateWindowSurfaceRects* ["SDL_UpdateWindowSurfaceRects"] (window: POINTER TO VAR Window; rects: POINTER TO VAR- Rect; numrects: INTEGER): INTEGER;
PROCEDURE ^ WaitEvent* ["SDL_WaitEvent"] (event: POINTER TO VAR Event): INTEGER;
PROCEDURE ^ WaitEventTimeout* ["SDL_WaitEventTimeout"] (event: POINTER TO VAR Event; timeout: INTEGER): INTEGER;
PROCEDURE ^ WasInit* ["SDL_WasInit"] (flags: Uint32): Uint32;
PROCEDURE ^ WM_SetCaption* ["SDL_WM_SetCaption"] (title: POINTER TO VAR- CHAR; icon: POINTER TO VAR- CHAR);

END SDL.
